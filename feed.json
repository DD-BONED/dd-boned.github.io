{"version":"https://jsonfeed.org/version/1","title":"優萌初華","subtitle":"有夢書架","icon":"https://shoka.lostyu.me/images/favicon.ico","description":"琉璃的医学 & 编程笔记","home_page_url":"https://shoka.lostyu.me","items":[{"id":"https://shoka.lostyu.me/computer-science/mse/itmd-510/final-exam/","url":"https://shoka.lostyu.me/computer-science/mse/itmd-510/final-exam/","title":"Final Exam","date_published":"2020-12-05T12:32:06.000Z","content_html":"<table>\n<thead>\n<tr>\n<th>Topic(s)</th>\n<th>Suggested Readings</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Abstraction, Inheritance, Polymorphism</td>\n<td>Chap. 10</td>\n</tr>\n<tr>\n<td>Exceptions and Advanced File IO</td>\n<td>Chap. 11</td>\n</tr>\n<tr>\n<td>Java Gui's – Swing / JavaFX</td>\n<td>Chap. 12-14 (plus supplements)</td>\n</tr>\n<tr>\n<td>Generics</td>\n<td>Chap. 17</td>\n</tr>\n<tr>\n<td>Collections (maps, sets, lists)</td>\n<td>Chap. 18</td>\n</tr>\n<tr>\n<td>Linked Lists</td>\n<td>Chaps. 19</td>\n</tr>\n<tr>\n<td>Stacks, Queues</td>\n<td>Chap. 21</td>\n</tr>\n<tr>\n<td>Databases - JDBC</td>\n<td>Chap. 22 (supplemented)</td>\n</tr>\n<tr>\n<td>+ Regular Expressions from notes, source examples and links</td>\n<td>(supplemented)1</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"study-guide-part-1\"><a class=\"anchor\" href=\"#study-guide-part-1\">#</a> Study guide part 1</h1>\n<ol>\n<li class=\"quiz\">\n<p>What SQL operator can be used to perform a search for a substring?</p>\n<ul class=\"options\">\n<li>STR</li>\n<li>SUB</li>\n<li>WHERE</li>\n<li class=\"correct\">LIKE</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>What must you have installed on a system before you can use JDBC to access a database on the system?</p>\n<ul class=\"options\">\n<li>Java</li>\n<li>A DBMS</li>\n<li class=\"correct\">Both A and B</li>\n<li>Neither A nor B</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>What term refers to data that describes other data?</p>\n<ul class=\"options\">\n<li class=\"correct\">meta data</li>\n<li>abstract data</li>\n<li>micro data</li>\n<li>pseudo-data</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>Which of the following is NOT a part of JDBC URL?</p>\n<ul class=\"options\">\n<li><code>&lt;protocol&gt;</code></li>\n<li><code>&lt;subprotocol&gt;</code></li>\n<li><code>&lt;subname&gt;</code></li>\n<li class=\"correct\"><code>&lt;tablename&gt;</code> </li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p><span class=\"gap\"></span> package contains classes that help in connecting to a database</p>\n<ul class=\"options\">\n<li>sql.java</li>\n<li>mysql.java</li>\n<li class=\"correct\">java.sql</li>\n<li>java.mysql</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>Two main interfaces that directly use the Collection interface are <span class=\"gap\"></span> and <span class=\"gap\"></span> .</p>\n<ul class=\"options\">\n<li>AbstractList, LinkedList</li>\n<li class=\"correct\">Set, List</li>\n<li>List, Vector</li>\n<li>HashSet, LinkedHashSet</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>The function below can be rewritten how?</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>addButton<span class=\"token punctuation\">.</span><span class=\"token function\">setOnAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ActionEvent</span> e<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    data<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Z\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"X\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul class=\"options\">\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>addButton<span class=\"token punctuation\">.</span><span class=\"token function\">setOnAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ActionEvent</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Z\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"X\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>addButton<span class=\"token punctuation\">.</span><span class=\"token function\">setOnAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ActionEvent</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Z\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"X\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li class=\"correct\"><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>addButton<span class=\"token punctuation\">.</span><span class=\"token function\">setOnAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ActionEvent</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Z\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"X\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>addButton<span class=\"token punctuation\">.</span><span class=\"token function\">setOnAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ActionEvent</span> e <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Z\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"X\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>Which is not a solid example of encapsulation?</p>\n<ul class=\"options\">\n<li>A Car class having a has-a relation with class Parts</li>\n<li class=\"correct\">Taking for granted a wikipedia definition</li>\n<li>A washing machine and its use of a power Button</li>\n<li>A Touring machine</li>\n</ul>\n<blockquote>\n<p>哪个不是封装的可靠示例</p>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>Given the generic following method, what can be passed in as a parameter value?</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">displayArray</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> element <span class=\"token operator\">:</span> array<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul class=\"options\">\n<li>an array whose element type is E</li>\n<li>an array whose element type is Object</li>\n<li class=\"correct\">an array whose element type is Integer</li>\n<li>an array whose type is any superclass of Number</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>Variable result below has what action performed on it?</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">newMain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">Integer</span> i <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token function\">newValue</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">newValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token operator\">-</span>i <span class=\"token operator\">:</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul class=\"options\">\n<li>boxing</li>\n<li>autoboxing</li>\n<li>casting</li>\n<li class=\"correct\">unboxing</li>\n</ul>\n</li>\n<li class=\"quiz essay\">\n<p>Write a create table statement below to create the tickets table (my_Ticket) for your project given the information listed below.</p>\n<div class=\"note default no-icon\">\n<table>\n<thead>\n<tr>\n<th>Field name</th>\n<th>Field Type</th>\n<th>Field Size</th>\n<th>Primary Key?</th>\n<th>Nulll?</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td>Auto_increment</td>\n<td></td>\n<td>Y</td>\n<td>N</td>\n</tr>\n<tr>\n<td>ticketNum</td>\n<td>Integer</td>\n<td></td>\n<td>N</td>\n<td>Y</td>\n</tr>\n<tr>\n<td>ticketDecsc</td>\n<td>varchar</td>\n<td>100</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"note default no-icon\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> <span class=\"token string\">\"CREATE TABLE my_Ticket \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                   <span class=\"token string\">\"(id INTEGER not NULL AUTO_INCREMENT, \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                   <span class=\"token string\">\" ticketNum INTEGER, \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                   <span class=\"token string\">\" ticketDesc VARCHAR(100), \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                   <span class=\"token string\">\" PRIMARY KEY ( id ))\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n</li>\n<li class=\"quiz essay\">\n<p>Create an insert statement below to insert a record into the above table that contains the data below.</p>\n<div class=\"note default no-icon\">\n<table>\n<thead>\n<tr>\n<th>Variable (Field) name</th>\n<th>Data</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Id</td>\n<td></td>\n</tr>\n<tr>\n<td>ticketNum</td>\n<td>1001</td>\n</tr>\n<tr>\n<td>ticketDecsc</td>\n<td>PC Virus</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"note default no-icon\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> <span class=\"token string\">\"INSERT INTO my_Ticket(ticketNum, ticketDesc) \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                          <span class=\"token string\">\"VALUES ('\"</span><span class=\"token operator\">+</span>ticket_num<span class=\"token operator\">+</span><span class=\"token string\">\"','\"</span><span class=\"token operator\">+</span>ticket_desc<span class=\"token operator\">+</span><span class=\"token string\">\"')\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n</li>\n<li class=\"quiz essay\">\n<p>Write a statement that will update all ticketNum fields &gt; 200 and whose<br />\nticketDesc field has the containment  <code>Bootstrapped virus found</code>  to a ticketDesc value of  <code>Bootsector virus found</code>  from the table above.</p>\n<div class=\"note default no-icon\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> <span class=\"token string\">\"update my_Ticket set ticketDesc = 'Bootsector virus found' where ticketDesc like 'Bootstrapped virus found' and ticketNum > 200\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n</li>\n<li class=\"quiz essay\">\n<p>Assume a file called data.dat is opened for reading and contains the following record data. Assume records begin with a number: </p>\n<pre><code>1 Puppy 2 Catnap 3 plaintiff 4 CoolCat 5 Cat and mouse 6 Catburgler.  \n</code></pre>\n<p>Fill in the underline to complete the statement for variable REGEX below to allow for the displaying any data containing the letters cat.</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>line <span class=\"token operator\">=</span> bufferedReader<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">String</span> REGEX <span class=\"token operator\">=</span> <span class=\"token string\">\"cat+\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Pattern</span> p <span class=\"token operator\">=</span> <span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span>REGEX<span class=\"token punctuation\">,</span><span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">.</span>CASE_INSENSITIVE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">String</span> phrase <span class=\"token operator\">=</span> line<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">Matcher</span> m <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">matcher</span><span class=\"token punctuation\">(</span>phrase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>phrase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li class=\"quiz\">\n<p>Given a button named  <code>btnCancel</code> , in FX an alert can verify if the cancel button has been pressed how?</p>\n<ul class=\"options\">\n<li class=\"correct\"><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ButtonType</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> alert<span class=\"token punctuation\">.</span><span class=\"token function\">showAndWait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> btnCancel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> … <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> alert<span class=\"token punctuation\">.</span><span class=\"token function\">showAndWait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> btnCancel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> … <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Optional</span> result <span class=\"token operator\">=</span> alert<span class=\"token punctuation\">.</span><span class=\"token function\">showAndWait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> btnCancel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> … <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ButtonType</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> alert<span class=\"token punctuation\">.</span><span class=\"token function\">showAndWait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> btnCancel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> … <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n<h1 id=\"study-guide-part-2\"><a class=\"anchor\" href=\"#study-guide-part-2\">#</a> Study guide part 2</h1>\n<ol>\n<li class=\"quiz essay\">\n<p>Can we call a non-static method from inside a static method?</p>\n<blockquote>\n<p>我们可以从静态方法内部调用非静态方法吗？<br />\nNon-Static methods are owned and called by objects of a class and have object level scope so in order to call the non-static methods from a static block (like the main method), an object of the class needs to be created first.<br />\n 非静态方法由类的对象拥有和调用，并且具有对象级别的范围，因此为了从静态块（如 main 方法）调用非静态方法，需要首先创建类的对象 。</p>\n</blockquote>\n</li>\n<li class=\"quiz essay\">\n<p>What are some differences between a JDBC statement object and prepared statement object?</p>\n<blockquote>\n<p>JDBC 语句对象和预准备语句对象之间有什么区别？<br />\nPrimarily the differences between a standard JDBC statement and a PreparedStatement are best viewed by the benefits that a PreparedStatement gives you and your application.<br />\n 首先，通过 PreparedStatement 给您和您的应用程序带来的好处，可以最好地查看标准 JDBC 语句和 PreparedStatement 之间的差异。</p>\n<p>Some core advantages include the following:<br />\n 一些核心优势包括：</p>\n<ul>\n<li>SQL Injection Prevention SQL 注入预防</li>\n<li>Pre-Compilation 预编译</li>\n<li>Ease of coding 易于编码</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz essay\">\n<p>Explain how an Iterator can be beneficial when traversing elements of a data structure.</p>\n<blockquote>\n<p>解释遍历数据结构的元素时，迭代器如何有益。<br />\nThe Iterator pattern enables you to traverse through all the elements in a data structure without knowing or caring how those elements are stored or represented.  The iterator provides methods for fetching the elements of the collection, one at a time, in some order.<br />\n 迭代器模式使您可以遍历数据结构中的所有元素，而无需知道或关心如何存储或表示这些元素。 迭代器提供了一些以某种顺序一次获取集合元素的方法。<br />\nEx.</p>\n</blockquote>\n<div class=\"note default no-icon\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Iterator</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">::</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">ArrayList</span> names <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>names<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Thomas\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>names<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Betty\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>names<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Pritesh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">Iterator</span> it <span class=\"token operator\">=</span> names<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">String</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n</li>\n<li class=\"quiz essay\">\n<p>Can we override any static methods in an Interface? Explain.</p>\n<blockquote>\n<p>我们可以覆盖接口中的任何静态方法吗？ 说明。<br />\nNo. The interface static method helps provide security by not allowing implementation classes to override them. Note a compiler error will occur if you attempt to override any static method – ex. The method  <code>whateEver()</code>  of type someClass must override or implement a supertype method.<br />\n 不能。接口静态方法通过不允许实现类覆盖，来帮助提供安全性。 请注意，如果您尝试覆盖任何静态方法，则会发生编译器错误。<br />\n例如，someClass 类型的 <code>whateEver()</code>  方法必须重写或实现超类型方法。</p>\n</blockquote>\n</li>\n<li class=\"quiz essay\">\n<p>Compare and contrast HashMaps vs. HashTables. Which of the types allow nulls? Which allow duplicates? Which are thread safe? How are orders retained upon insertion? What are access time capabilites?</p>\n<blockquote>\n<ul>\n<li>\n<p>HT: It does not allow nulls for both key any value. It will throw a NullPointerException.<br />\n 不允许两个键的任何值都为 null。 它将抛出 NullPointerException。<br />\nHashtable does not maintain insertion order. The order is defined by the Hash function. So only use this if you do not need data in order.<br />\n 哈希表不保持插入顺序。 顺序由哈希函数定义。 因此，仅在不需要顺序数据时才使用它。<br />\nIt is synchronized. It is slow. Only one thread can access it at a time.<br />\n 同步。 太慢了。一次只能有一个线程访问它。<br />\nThread safe.<br />\n 线程安全。</p>\n</li>\n<li>\n<p>HM: Does not maintain insertion order.<br />\n 不保持插入顺序。<br />\nIt is not synchronized. It will have better performance.<br />\n 不同步。 它将具有更好的性能。<br />\nHashMap are not thread safe<br />\nHashMap 不是线程安全的<br />\n Allows for nulls for both K,V<br />\n 允许 K，V 都为空</p>\n</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n","tags":["计算机科学","Master of Software Engineering","ITMD 510. Object-Oriented App Develop","试题","Java"]},{"id":"https://shoka.lostyu.me/computer-science/mse/itmd-510/week-15/","url":"https://shoka.lostyu.me/computer-science/mse/itmd-510/week-15/","title":"Week 15. Test-driven development(TDD)","date_published":"2020-12-04T08:12:09.000Z","content_html":"<h1 id=\"notes\"><a class=\"anchor\" href=\"#notes\">#</a> Notes</h1>\n<h2 id=\"test-driven-development-tdd\"><a class=\"anchor\" href=\"#test-driven-development-tdd\">#</a> TEST DRIVEN DEVELOPMENT (TDD)</h2>\n<h3 id=\"what\"><a class=\"anchor\" href=\"#what\">#</a> What</h3>\n<p>TDD is a tool for developers that aides in the development of high quality code.</p>\n<h3 id=\"why\"><a class=\"anchor\" href=\"#why\">#</a> Why</h3>\n<p>Benefits for new code:</p>\n<ul>\n<li>TDD encourages more thorough analysis 进行更彻底的分析</li>\n<li>TDD encourages better design 更好的设计</li>\n<li>TDD encourages more modular code 使用更多模块化代码</li>\n<li>TDD encourages more reusable code 使用更多可重用的代码</li>\n<li>TDD encourages more maintainable code 使用更具可维护性的代码</li>\n<li>TDD provides a short feedback cycle 提供了较短的反馈周期</li>\n</ul>\n<p>Benefits for existing code:</p>\n<ul>\n<li>Provides automated regression</li>\n<li>Provides automated impact analysis</li>\n<li>Reduces fear of refactoring</li>\n</ul>\n<p>Saves time!</p>\n<h3 id=\"when\"><a class=\"anchor\" href=\"#when\">#</a> When</h3>\n<ul>\n<li>New code</li>\n<li>Utility code</li>\n<li>Legacy code...sometimes<br />\nwhen time and capacity permits</li>\n</ul>\n<h2 id=\"junit\"><a class=\"anchor\" href=\"#junit\">#</a> JUnit</h2>\n<p>A tool for test-driven development</p>\n","tags":["计算机科学","Master of Software Engineering","ITMD 510. Object-Oriented App Develop","Java"]},{"id":"https://shoka.lostyu.me/computer-science/mse/itmd-510/week-14/","url":"https://shoka.lostyu.me/computer-science/mse/itmd-510/week-14/","title":"Week 14. Regular Expressions (RegEx)","date_published":"2020-11-30T08:01:42.000Z","content_html":"<h1 id=\"notes\"><a class=\"anchor\" href=\"#notes\">#</a> Notes</h1>\n<h2 id=\"regex\"><a class=\"anchor\" href=\"#regex\">#</a> Regex</h2>\n<table>\n<thead>\n<tr>\n<th>Java Subexpression</th>\n<th>Matches</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<p><code>^</code></p>\n</td>\n<td>\n<p>Matches beginning of line.<br />\n 匹配行首。</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>$</code></p>\n</td>\n<td>\n<p>Matches end of line.<br />\n 匹配行尾。</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>.</code></p>\n</td>\n<td>\n<p>Matches any single character except newline. Using m option allows it to match newline as well.<br />\n 匹配除换行符以外的任何单个字符。使用 m 选项还可以使其与换行符匹配。</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>[...]</code></p>\n</td>\n<td>\n<p>Matches any single character in brackets.<br />\n 匹配括号中的任何单个字符。</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>[^...]</code></p>\n</td>\n<td>\n<p>Matches any single character not in brackets.<br />\n 匹配括号中没有的任何单个字符。</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>\\A</code></p>\n</td>\n<td>\n<p>Beginning of entire string<br />\n 整个字符串的开头</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>\\z</code></p>\n</td>\n<td>\n<p>End of entire string<br />\n 整个字符串的结尾</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>\\Z</code></p>\n</td>\n<td>\n<p>End of entire string except allowable final line terminator.<br />\n 整个字符串的结尾，但允许的最后一行终止符除外。</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>re*</code></p>\n</td>\n<td>\n<p>Matches 0 or more occurrences of preceding expression.<br />\n 匹配 0 个或多个出现的前一个表达式。</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>re+</code></p>\n</td>\n<td>\n<p>Matches 1 or more of the previous thing.<br />\n 匹配上一项或多项。</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>re?</code></p>\n</td>\n<td>\n<p>Matches 0 or 1 occurrence of preceding expression.<br />\n 匹配 0 或 1 个出现的前一个表达式。</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>re&#123; n&#125;</code></p>\n</td>\n<td>\n<p>Matches exactly n number of occurrences of preceding expression.<br />\n 精确匹配前一个表达式的 n 次出现。</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>re&#123; n,&#125;</code></p>\n</td>\n<td>\n<p>Matches n or more occurrences of preceding expression.<br />\n 匹配 n 个或多个出现的前一个表达式。</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>re&#123; n, m&#125;</code></p>\n</td>\n<td>\n<p>Matches at least n and at most m occurrences of preceding expression.<br />\n 至少匹配 n 个并且最多匹配 m 个先前的表达式。</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>a|b</code></p>\n</td>\n<td>\n<p>Matches either a or b.<br />\n 匹配 a 或 b。</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>\\w</code></p>\n</td>\n<td>\n<p>Matches word characters.<br />\n 匹配单词字符。</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>\\W</code></p>\n</td>\n<td>\n<p>Matches nonword characters.<br />\n 匹配非单词字符。</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>\\s</code></p>\n</td>\n<td>\n<p>Matches whitespace. Equivalent to  <code>[\\t\\n\\r\\f]</code> .<br />\n 匹配空格。等效于 <code>[\\t\\n\\r\\f]</code> 。</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>\\S</code></p>\n</td>\n<td>\n<p>Matches nonwhitespace.<br />\n 匹配非空格。</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>\\d</code></p>\n</td>\n<td>\n<p>Matches digits. Equivalent to  <code>[0-9]</code> .<br />\n 匹配数字。相当于 <code>[0-9]</code> 。</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>\\D</code></p>\n</td>\n<td>\n<p>Matches nondigits.<br />\n 匹配非数字。</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>\\A</code></p>\n</td>\n<td>\n<p>Matches beginning of string.<br />\n 匹配字符串的开头。</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>\\Z</code></p>\n</td>\n<td>\n<p>Matches end of string. If a newline exists, it matches just before newline.<br />\n 匹配字符串的结尾。如果存在换行符，则匹配换行符。</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>\\z</code></p>\n</td>\n<td>\n<p>Matches end of string.<br />\n 匹配字符串的结尾。</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>\\b</code></p>\n</td>\n<td>\n<p>Matches word boundaries when outside brackets. Matches backspace (0x08) when inside brackets.<br />\n 放在方括号内时匹配单词边界。放在方括号内时，匹配退格键（0x08）。</p>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Referece sites:<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5yZWdleHIuY29t\">http://www.regexr.com</span><br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy50dXRvcmlhbHNwb2ludC5jb20vamF2YS9qYXZhX3JlZ3VsYXJfZXhwcmVzc2lvbnMuaHRt\">http://www.tutorialspoint.com/java/java_regular_expressions.htm</span></p>\n<h3 id=\"demo\"><a class=\"anchor\" href=\"#demo\">#</a> demo</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>EmailValidator.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>regex<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Matcher</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>regex<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EmailValidator</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// Regex pattern to valid email address</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> EMAIL_REGEX<span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       <span class=\"token string\">\"^[\\\\w-\\\\+]+(\\\\.[\\\\w]+)*@[\\\\w-]+(\\\\.[\\\\w]+)*(\\\\.[a-z]&#123;2,&#125;)$\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">//static Pattern object, since pattern is fixed</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Pattern</span> pattern<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//non-static Matcher object because it's created from the input String</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Matcher</span> matcher<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">EmailValidator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">//initialize the Pattern object</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        pattern <span class=\"token operator\">=</span> <span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span>EMAIL_REGEX<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">.</span>CASE_INSENSITIVE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     * This method validates the input email address with EMAIL_REGEX pattern</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * @param email</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     * @return boolean</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">validateEmail</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        matcher <span class=\"token operator\">=</span> pattern<span class=\"token punctuation\">.</span><span class=\"token function\">matcher</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> matcher<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EmailValidatorTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>     </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">// list of valid email addresses</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>     <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> validEmailIds <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span>        </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token string\">\"papadev@yahoo.com\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token string\">\"papadev-100@yahoo.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"papadev.100@yahoo.com\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token string\">\"papadev111@papadev.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"papadev-100@papadev.net\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token string\">\"papadev.100@papadev.com.au\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"papadev@1.com\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token string\">\"papadev@gmail.com.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"papadev+100@gmail.com\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token string\">\"papadev-100@yahoo-test.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"papadev_100@yahoo-test.ABC.CoM\"</span>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>     </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">// list of invalid email addresses</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> invalidEmailIds <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"papadev\"</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token string\">\"papadev@.com.my\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token string\">\"papadev123@gmail.a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"papadev123@.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"papadev123@.com.com\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token string\">\".papadev@papadev.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"papadev()*@gmail.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"papadev@%*.com\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token string\">\"papadev..2002@gmail.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"papadev.@gmail.com\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token string\">\"papadev@papadev@gmail.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"papadev@gmail.com.1a\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>     </pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">EmailValidator</span> emailValidator<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre> </pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        emailValidator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EmailValidator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> temp <span class=\"token operator\">:</span> validEmailIds<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token keyword\">boolean</span> valid <span class=\"token operator\">=</span> emailValidator<span class=\"token punctuation\">.</span><span class=\"token function\">validateEmail</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Email ID \"</span><span class=\"token operator\">+</span>temp<span class=\"token operator\">+</span><span class=\"token string\">\" is valid? \"</span> <span class=\"token operator\">+</span> valid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> temp <span class=\"token operator\">:</span> invalidEmailIds<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token keyword\">boolean</span> valid <span class=\"token operator\">=</span> emailValidator<span class=\"token punctuation\">.</span><span class=\"token function\">validateEmail</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Email ID \"</span><span class=\"token operator\">+</span>temp<span class=\"token operator\">+</span><span class=\"token string\">\" is valid? \"</span> <span class=\"token operator\">+</span> valid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><pre><code>Email ID papadev@yahoo.com is valid? true\nEmail ID papadev-100@yahoo.com is valid? true\nEmail ID papadev.100@yahoo.com is valid? true\nEmail ID papadev111@papadev.com is valid? true\nEmail ID papadev-100@papadev.net is valid? true\nEmail ID papadev.100@papadev.com.au is valid? true\nEmail ID papadev@1.com is valid? true\nEmail ID papadev@gmail.com.com is valid? true\nEmail ID papadev+100@gmail.com is valid? true\nEmail ID papadev-100@yahoo-test.com is valid? true\nEmail ID papadev_100@yahoo-test.ABC.CoM is valid? true\n \nEmail ID papadev is valid? false\nEmail ID papadev@.com.my is valid? false\nEmail ID papadev123@gmail.a is valid? false\nEmail ID papadev123@.com is valid? false\nEmail ID papadev123@.com.com is valid? false\nEmail ID .papadev@papadev.com is valid? false\nEmail ID papadev()*@gmail.com is valid? false\nEmail ID papadev@%*.com is valid? false\nEmail ID papadev..2002@gmail.com is valid? false\nEmail ID papadev.@gmail.com is valid? false\nEmail ID papadev@papadev@gmail.com is valid? false\nEmail ID papadev@gmail.com.1a is valid? false\n</code></pre>\n<h1 id=\"review\"><a class=\"anchor\" href=\"#review\">#</a> Review</h1>\n<p>Regular Expressions (RegEx) - For text searching &amp; manipulation</p>\n<p>Set up a patten to match given tasks for given strings below.</p>\n<table>\n<thead>\n<tr>\n<th>String/phrase</th>\n<th>Task</th>\n<th>Your Pattern</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&quot;cat cat cat cattie cat&quot;</td>\n<td>Find Cat occurrences</td>\n<td><code>&quot;\\\\bcat\\\\b&quot;</code>  note use of the added ( \\ ) character used as an escape sequence</td>\n</tr>\n<tr>\n<td>doggy</td>\n<td>Find dog</td>\n<td><code>dog</code></td>\n</tr>\n<tr>\n<td>Apple123</td>\n<td>Must start with Apple</td>\n<td><code>[Apple].*</code></td>\n</tr>\n<tr>\n<td>Apple123</td>\n<td>Must NOT start with Apple</td>\n<td><code>[^Apple].*</code></td>\n</tr>\n<tr>\n<td>Apple123</td>\n<td>Must start with Apple or apple</td>\n<td><code>[Apple|apple].*</code></td>\n</tr>\n</tbody>\n</table>\n","tags":["计算机科学","Master of Software Engineering","ITMD 510. Object-Oriented App Develop","Java"]},{"id":"https://shoka.lostyu.me/computer-science/mse/itmd-510/week-13/","url":"https://shoka.lostyu.me/computer-science/mse/itmd-510/week-13/","title":"Week 13. Object Serialization, Network Programming","date_published":"2020-11-23T11:51:29.000Z","content_html":"<h1 id=\"notes\"><a class=\"anchor\" href=\"#notes\">#</a> Notes</h1>\n<h2 id=\"object-serialization\"><a class=\"anchor\" href=\"#object-serialization\">#</a> Object Serialization</h2>\n<h3 id=\"serialize\"><a class=\"anchor\" href=\"#serialize\">#</a> serialize</h3>\n<p>If an object contains other types of objects as fields, saving its contents can be complicated.<br />\n 如果对象包含其他类型的对象作为字段，则保存其内容可能会很复杂。</p>\n<p>Java allows you to <strong>serialize</strong> objects, which is a simpler way of saving objects to a file.<br />\nJava 允许您序列化对象，这是将对象保存到文件的一种更简单的方法。</p>\n<p>When an object is serialized, it is converted into a series of bytes that contain the object’s data.<br />\n 序列化对象时，会将其转换为包含该对象数据的一系列字节。</p>\n<p>If the object is set up properly, even the other objects that it might contain as fields are automatically serialized.<br />\n 如果对象设置正确，则甚至可能包含其作为字段的其他对象也会自动序列化。</p>\n<p>The resulting set of bytes can be saved to a file for later retrieval.<br />\n 可以将结果字节集保存到文件中以供以后检索。</p>\n<p>For an object to be serialized, its class must implement the  <code>Serializable</code>  interface.<br />\n 对于要序列化的对象，其类必须实现 <code>Serializable</code>  接口。</p>\n<p>The  <code>Serializable</code>  interface has no methods or fields.<br />\n <code>Serializable</code>  接口没有方法或字段。</p>\n<p>It is used only to let the Java compiler know that objects of the class might be serialized.<br />\n 它仅用于让 Java 编译器知道该类的对象可能已序列化。</p>\n<p>If a class contains objects of other classes as fields, those classes must also implement the  <code>Serializable</code>  interface, in order to be serialized.<br />\n 如果一个类包含其他类的对象作为字段，则这些类还必须实现 <code>Serializable</code>  接口才能进行序列化。</p>\n<p>The  <code>String</code>  class, as many others in the Java API, implements the  <code>Serializable</code>  interface.<br />\n 与 Java API 中的许多其他类一样， <code>String</code>  类实现了 <code>Serializable</code>  接口。</p>\n<p>To write a serialized object to a file, you use an  <code>ObjectOutputStream</code>  object.<br />\n 要将序列化的对象写入文件，请使用 <code>ObjectOutputStream</code>  对象。</p>\n<p>The  <code>ObjectOutputStream</code>  class is designed to perform the serialization process.<br />\n <code>ObjectOutputStream</code>  类旨在执行序列化过程。</p>\n<p>To write the bytes to a file, an output stream object is needed.<br />\n 要将字节写入文件，需要一个输出流对象。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">FileOutputStream</span> outStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Objects.dat\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">ObjectOutputStream</span> objectOutputFile <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span>outStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>To serialize an object and write it to the file, the  <code>ObjectOutputStream</code>  class's  <code>writeObject</code>  method is used.<br />\n 序列化对象并将其写入文件</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">InventoryItem2</span> item <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InventoryItem2</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Wrench\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>objectOutputFile<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>The  <code>writeObject</code>  method throws an  <code>IOException</code>  if an error occurs.</p>\n<h3 id=\"deserialization\"><a class=\"anchor\" href=\"#deserialization\">#</a> deserialization</h3>\n<p>The process of reading a serialized object's bytes and constructing an object from them is known as <strong>deserialization</strong>.<br />\n 读取序列化对象的字节并从中构造对象的过程称为反序列化。</p>\n<p>To desrialize an object an  <code>ObjectInputStream</code>  object is used in conjunction with a  <code>FileInputStream</code>  object.<br />\n 对对象进行反序列化</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">FileInputStream</span> inStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Objects.dat\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">ObjectInputStream</span> objectInputFile <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span>inStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>To read a serialized object from the file, the  <code>ObjectInputStream</code>  class's  <code>readObject</code>  method is used.<br />\n 从文件读取序列化的对象</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">InventoryItem2</span> item<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>item <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InventoryItem2</span><span class=\"token punctuation\">)</span> objectInputFile<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>The  <code>readObject</code>  method returns the deserialized object.</p>\n<blockquote>\n<p>Notice that you must cast the return value to the desired class type.</p>\n</blockquote>\n<p>The  <code>readObject</code>  method throws a number of different exceptions if an error occurs.</p>\n<h3 id=\"demo\"><a class=\"anchor\" href=\"#demo\">#</a> demo</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Employee.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span> <span class=\"token keyword\">implements</span> java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span><span class=\"token class-name\">Serializable</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> address<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">transient</span> <span class=\"token keyword\">int</span> SSN<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> number<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">mailCheck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mailing a check to \"</span> <span class=\"token operator\">+</span> name</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t\t\t\t\t<span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>SerializeDemo.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SerializeDemo</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token class-name\">Employee</span> e <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\te<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"James Papademas\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\te<span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> <span class=\"token string\">\"3300 S. Federal\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\te<span class=\"token punctuation\">.</span>SSN <span class=\"token operator\">=</span> <span class=\"token number\">11122333</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\te<span class=\"token punctuation\">.</span>number <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token class-name\">FileOutputStream</span> fileOut <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"employee.ser\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t<span class=\"token class-name\">ObjectOutputStream</span> out <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span>fileOut<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\tout<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\tout<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\tfileOut<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Serialized data is saved as employee.ser\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\ti<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>DeserializeDemo.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//import java.io.*;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DeserializeDemo</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token class-name\">Employee</span> e <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token class-name\">FileInputStream</span> fileIn <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"employee.ser\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token class-name\">ObjectInputStream</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span>fileIn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\te <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">)</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\tin<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\tfileIn<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\ti<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassNotFoundException</span> c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Employee class not found\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\tc<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Deserialized Employee...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name: \"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Address: \"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SSN: \"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>SSN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Number: \"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"network-programming\"><a class=\"anchor\" href=\"#network-programming\">#</a> Network Programming</h2>\n<h3 id=\"network-layers\"><a class=\"anchor\" href=\"#network-layers\">#</a> Network Layers</h3>\n<ul>\n<li>Application Level<br />\n(FTP, Telnet, etc.)</li>\n<li>Transport Layer<br />\n(TCP, UDP, sockets, etc.)</li>\n<li>Network Layer<br />\n(Low-level Protocol -- IP, datagrams, etc.)</li>\n<li>Hardware Layer<br />\n(Ethernet, TokenRing, X.25, etc.)</li>\n</ul>\n<hr />\n<ul>\n<li>\n<p>headers: <span class=\"exturl\" data-url=\"aHR0cDovL25tYXAub3JnL2Jvb2svdGNwaXAtcmVmLmh0bWw=\">http://nmap.org/book/tcpip-ref.html</span></p>\n</li>\n<li>\n<p>ports: <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy9zZXJ2aWNlLW5hbWVzLXBvcnQtbnVtYmVycy9zZXJ2aWNlLW5hbWVzLXBvcnQtbnVtYmVycy54aHRtbA==\">http://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml</span></p>\n</li>\n<li>\n<p>Sample Http Error Codes: <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy53M3NjaG9vbHMuY29tL3RhZ3MvcmVmX2h0dHBtZXNzYWdlcy5hc3A=\">http://www.w3schools.com/tags/ref_httpmessages.asp</span></p>\n</li>\n</ul>\n<h3 id=\"networking-in-java\"><a class=\"anchor\" href=\"#networking-in-java\">#</a> Networking in Java</h3>\n<p>The  <code>java.net</code>  package contains classes and interfaces that provide a powerful infrastructure for networking in Java.</p>\n<p>Today, we see how networking in Java works.</p>\n<p>We will check out the following: Load a document from the web</p>\n<ol>\n<li>Some packaged classes</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UnsupportedEncodingException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MalformedURLException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">URISyntaxException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span>URL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">URLConnection</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>Constructing  <code>URL</code>  Objects</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token class-name\">URL</span> u <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://www.iit.edu/Sp18/grad.html#itm\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MalformedURLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"http\"><a class=\"anchor\" href=\"#http\">#</a> HTTP</h3>\n<p>Web browsers communicate with web servers through a standard protocol known as HTTP, an acronym for HyperText Transfer Protocol.<br />\nThis protocol defines</p>\n<ul>\n<li>how a browser requests a file from a web server</li>\n<li>how a browser sends additional data along with the request (e.g. the data formats it can accept),</li>\n<li>how the server sends data back to the client</li>\n<li>response codes</li>\n</ul>\n<p>Query Strings</p>\n<ul>\n<li>CGI GET data is sent in URL encoded query strings</li>\n<li>a query string is a set of  <code>name=value</code>  pairs separated by ampersands<br />\n <code>Author=Sadie, Julie&amp;Title=Women Composers</code></li>\n<li>separated from rest of URL by a question mark</li>\n</ul>\n<h3 id=\"demo-2\"><a class=\"anchor\" href=\"#demo-2\">#</a> demo</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>NetTest.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PrintStream</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UnsupportedEncodingException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MalformedURLException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">URISyntaxException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span>URL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">URLConnection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NetTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">UnsupportedEncodingException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">URISyntaxException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token comment\">//https://www.quandl.com/tools/api</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token class-name\">StringBuilder</span> builder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token class-name\">URL</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t\t\t<span class=\"token string\">\"https://www.quandl.com/api/v1/datasets/WIKI/AAPL.csv?\"</span><span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t\t\t<span class=\"token string\">\"column=2&amp;sort_order=asc&amp;collapse=quarterly&amp;trim_start=2012-01-01&amp;trim_end=2013-12-31\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t<span class=\"token class-name\">URLConnection</span> conn <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">openConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t<span class=\"token class-name\">String</span> line<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\tconn<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t<span class=\"token class-name\">InputStreamReader</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t<span class=\"token class-name\">BufferedReader</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>line <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t\t<span class=\"token comment\">//String splitter[] = line.split(\",\"); //parse &amp; present data option</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t\tbuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t\tbuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MalformedURLException</span> mue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bad URL: \"</span> <span class=\"token operator\">+</span> mue<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> ioe<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"IO Error:\"</span> <span class=\"token operator\">+</span> ioe<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>builder<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>NetW.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PrintStream</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InetAddress</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NetW</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span>\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token class-name\">InetAddress</span> me <span class=\"token operator\">=</span> <span class=\"token class-name\">InetAddress</span><span class=\"token punctuation\">.</span><span class=\"token function\">getByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token class-name\">PrintStream</span> o <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\to<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost by name =\"</span> <span class=\"token operator\">+</span> me <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token class-name\">InetAddress</span> me2 <span class=\"token operator\">=</span> <span class=\"token class-name\">InetAddress</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLocalHost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\to<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost by getLocalHost =\"</span> <span class=\"token operator\">+</span> me2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token class-name\">InetAddress</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> many <span class=\"token operator\">=</span> <span class=\"token class-name\">InetAddress</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAllByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"microsoft.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>many<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\to<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span> many<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>","tags":["计算机科学","Master of Software Engineering","ITMD 510. Object-Oriented App Develop","Java"]},{"id":"https://shoka.lostyu.me/computer-science/mse/itmd-534/final-project/","url":"https://shoka.lostyu.me/computer-science/mse/itmd-534/final-project/","title":"Final Project","date_published":"2020-11-18T05:32:26.000Z","content_html":"<p>To start the design process for your final project you may follow the steps below:</p>\n<ol>\n<li>\n<p>Define tasks to be accomplished by your product. If you are a team of 5 – you will define 5 individual goals. If 3 then 3 goals. Each task to accomplish your goals has to be fairly complex – about 10 steps.<br />\n 定义产品要完成的任务。如果您是 5 人组成的团队，则将定义 5 个独立目标。如果 3 则 3 个目标。完成目标的每个任务都必须相当复杂 - 大约 10 个步骤。</p>\n</li>\n<li>\n<p>Identify an existing product that could be used to accomplish a similar goal as chosen in step 1. You can choose a different existing product for each of the goal in step1.<br />\n 标识可用于实现与步骤 1 中选择的目标相似的现有产品。您可以在步骤 1 中为每个目标选择不同的现有产品。</p>\n</li>\n<li>\n<p>Each group member should pick one goal and perform a contextual inquiry (CI) selecting two users for the task. Select the user who is most likely to use your product.<br />\n 每个小组成员应选择一个目标并执行 CI，为任务选择两个用户。选择最有可能使用您的产品的用户。</p>\n</li>\n<li>\n<p>Each group member should make clear and complete report of the product chosen, the CI and the detailed tasks and scripts that they have created.<br />\n 每个小组成员应清楚，完整地报告所选产品，CI 以及他们创建的详细任务和脚本。</p>\n</li>\n<li>\n<p>Each group member should document in details the response received from the user interview during the CI.<br />\n 每个小组成员应详细记录，在 CI 期间从用户访谈中收到的答复。</p>\n</li>\n<li>\n<p>Each group member should run a Heuristic Evaluation (HE) of the existing interface using the goal they have chosen.<br />\n 每个小组成员应使用他们选择的目标，对现有界面进行启发式评估（HE）。</p>\n</li>\n<li>\n<p>Once the CI data is obtained and the HE information is documented – the group members should consolidate the information as a team and draw up an Affinity Diagram if necessary (this diagram is optional). An integration of the various tasks is required at this step. Group members should get together and decide on the modification needed for the tasks to be performed on the new design. Group members should brainstorm ideas for final design.<br />\n 一旦获取了 CI 数据并记录了 HE 信息–小组成员应将信息作为一个团队进行合并，并在必要时绘制一个亲和图（此图是可选的）。在此步骤中，需要整合各种任务。小组成员应该聚在一起，并决定要在新设计上执行的任务所需的修改。小组成员应集思广益，以进行最终设计。</p>\n</li>\n<li>\n<p>Each group member should draw a Flow diagram for their task and document this as part of the project documentation.<br />\n 每个小组成员应为其任务绘制流程图，并将其记录为项目文档的一部分。</p>\n</li>\n<li>\n<p>Group members as a team should design a User Interface which would help accomplish all the tasks.<br />\n 小组成员应以团队为单位设计用户界面，以帮助完成所有任务。</p>\n</li>\n<li>\n<p>Group members as a team should draw sketches and build a low fidelity prototype for the interface. This interface will be for the new design and it needs to start from a single top level UI and branch out to individual screens for separate tasks. As the UI screens branch out – each member responsible for the specific task will need to design that branch of the UI.<br />\n 小组成员应以团队为基础绘制草图，并构建低保真度的原型。该界面将用于新设计，它需要从单个顶级 UI 开始，并分支到单独的屏幕以执行单独的任务。当 UI 屏幕分支出来时 - 负责特定任务的每个成员都需要设计 UI 的分支。</p>\n</li>\n<li>\n<p>After the design is done and a low fidelity prototype is prepared – each group member should run HE on the new design using goals of another member of the group. Iterate this HE process at least 2 times to refine the design.<br />\n 完成设计并准备好低保真原型后–每个小组成员均应使用小组另一成员的目标，对新设计运行 HE。至少重复此 HE 过程 2 次以完善设计。</p>\n</li>\n<li>\n<p>Each group member should take the low fidelity prototype back to their users and perform CI for their task on the new design.<br />\n 每个小组成员都应将低保真度的原型带回用户手中，并对新设计的任务执行 CI。</p>\n</li>\n<li>\n<p>Document these inquiries and HE as part of the project documentation.<br />\n 将这些 CI 和 HE 记录为项目文档的一部分。</p>\n</li>\n<li>\n<p>Finally group members jointly build the final prototype with any tool they are comfortable with. Power Point is the suggested tool for building the finished prototype.<br />\n 最终小组成员使用他们愿意使用的任何工具，共同构建最终原型。 Power Point 是用于构建最终原型的建议工具。</p>\n</li>\n<li>\n<p>Prepare the final project documentation for submission with separate slide presentation to be presented in the class.<br />\n 准备要提交的最终项目文档，并带有单独的幻灯片演示文稿，以在课堂上介绍。</p>\n</li>\n<li>\n<p>Submit all CI and HE documentation in PDF format along with the final presentation.<br />\n 以 PDF 格式提交所有 CI 和 HE 文档以及最终演示文稿。</p>\n</li>\n<li>\n<p>The slide presentation has to be made with audio. Group members will all contribute to make of the slide presentation and can choose one member to provide the narration on the slides. Below is a link to prepare slide presentation with audio using PowerPoint:<br />\n 幻灯片演示必须带有音频。小组成员都将为幻灯片演示做出贡献，并且可以选择一名成员在幻灯片上提供旁白。以下是使用 PowerPoint 准备带音频的幻灯片演示文稿的链接：<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdXBwb3J0Lm9mZmljZS5jb20vZW4tbnovYXJ0aWNsZS9SZWNvcmQtYS1zbGlkZS1zaG93LXdpdGgtbmFycmF0aW9uLWluay1hbmQtc2xpZGUtdGltaW5ncy0zZGM4NTAwMS1lZmFiLTRmOGEtOTRiZi1hZmRjNWI3YzFmMGI/dWk9ZW4tVVMmYW1wO3JzPWVuLU5aJmFtcDthZD1OWg==\">https://support.office.com/en-nz/article/Record-a-slide-show-with-narration-ink-and-slide-timings-3dc85001-efab-4f8a-94bf-afdc5b7c1f0b?ui=en-US&amp;rs=en-NZ&amp;ad=NZ</span></p>\n</li>\n</ol>\n<h1 id=\"clarification-on-the-sequence-of-ci-and-he\"><a class=\"anchor\" href=\"#clarification-on-the-sequence-of-ci-and-he\">#</a> Clarification on the sequence of CI and HE</h1>\n<p>明确 CI 和 HE 的顺序</p>\n<p><strong>Before designing your interface</strong><br />\n 设计界面之前</p>\n<ol>\n<li>Perform CI on existing interface to generate requirements for design/redesign - using your goal<br />\n 使用目标在现有接口上执行配置项以生成设计 / 重新设计要求</li>\n<li>Perform HE on the existing interface - use the interface portion related to your goal<br />\n 在现有界面上执行 HE - 使用与您的目标相关的界面部分</li>\n</ol>\n<p><strong>After designing your interface</strong><br />\n 设计界面之后</p>\n<ol start=\"3\">\n<li>Perform CI on the new design prototype that you created - using your goal<br />\n 使用您的目标对您创建的新设计原型执行 CI</li>\n<li>Perform HE on the new design - use the interface portion of another team member.<br />\n 对新设计执行 HE - 使用另一个团队成员的界面部分。</li>\n</ol>\n<h1 id=\"final-presentation-slides\"><a class=\"anchor\" href=\"#final-presentation-slides\">#</a> Final presentation Slides</h1>\n<p>Each team will give a short PowerPoint presentation (10-15 min long) covering the following:<br />\n 每个小组将作一个简短的 PowerPoint 演示文稿（长 10-15 分钟），内容如下：</p>\n<ul>\n<li>Who is your team<br />\n 你的团队是谁</li>\n<li>What is your product<br />\n 您的产品是什么</li>\n<li>How did you come up with this idea<br />\n 您是如何提出这个想法的</li>\n<li>What is the business need<br />\n 业务需求是什么</li>\n<li>How is your product different from competitors<br />\n 您的产品与竞争对手有何不同</li>\n<li>Narration of the functioning of your product<br />\n 产品功能的叙述</li>\n</ul>\n<p>The final presentation slides must include story board or other illustrations showing how the product functions. Each group member must work on the presentation and may select on representative for the group to narrate on the slide presentation.<br />\n 最终的演示幻灯片必须包括故事板或其他说明产品功能的插图。 每个小组成员都必须参与演示，并可以选择代表作为小组成员来演示幻灯片演示。</p>\n<p>Online students should mail in the narration enhanced Power Point slides to be played during the final presentation day in class. Students who will be present in class on the final presentation day will get to grade each presentation.</p>\n<h1 id=\"final-project-presentation-grading\"><a class=\"anchor\" href=\"#final-project-presentation-grading\">#</a> Final Project Presentation Grading</h1>\n<h2 id=\"presentation-of-information-25\"><a class=\"anchor\" href=\"#presentation-of-information-25\">#</a> Presentation of Information 25</h2>\n<p>信息介绍</p>\n<ol>\n<li>Story of work: statement of goals/purpose, faming/context of work, structure/flow<br />\n 工作经历：目标 / 目的的陈述，工作的名称 / 背景，结构 / 流程</li>\n<li>Appeal/appearance: graphics, text balance/quantity, quality of multimedia (not blurry or hard to hear), quality of results charts and graphs<br />\n 外观 / 外观：图形，文本平衡 / 数量，多媒体质量（不模糊或不易听到），结果图表和图形的质量</li>\n<li>Speaker skill: loudness level, speaking rate, confidence, enthusiasm/interest<br />\n 演讲者技能：响度，说话率，信心，热情 / 兴趣</li>\n</ol>\n<h2 id=\"discussion-of-user-requirements-35\"><a class=\"anchor\" href=\"#discussion-of-user-requirements-35\">#</a> Discussion of User Requirements: 35</h2>\n<p>用户需求讨论</p>\n<ol>\n<li>Description of users: methods for identifying who, demographics and other characteristics<br />\n 用户描述：识别谁，人口统计特征和其他特征的方法</li>\n<li>Description of tasks/context of use: methods for identifying tasks/contexts, characteristics<br />\n 任务 / 使用背景说明：确定任务 / 使用背景，特征的方法</li>\n<li>Review of competitive analysis or other analysis of related solutions<br />\n 审查竞争分析或其他有关解决方案的分析</li>\n<li>Description of design requirements: mapping to identified needs, specific criteria/features/attributes, and their purpose, use cases<br />\n 设计要求的描述：映射到已识别的需求，特定的标准 / 功能 / 属性及其目的，用例</li>\n</ol>\n<h2 id=\"discussion-of-user-interface-40\"><a class=\"anchor\" href=\"#discussion-of-user-interface-40\">#</a> Discussion of User Interface: 40</h2>\n<p>用户界面讨论</p>\n<ol>\n<li>Description of implementation of user requirements: show the connection between identified requirements and features included in the design, steps or stages for implementing (including outside help, specific resource needs)<br />\n 用户需求的实现描述：显示已确定的需求与设计，实现的步骤或阶段（包括外部帮助，特定资源需求）中包含的功能之间的联系</li>\n<li>Implementation quality: clarity of approach, accessibility of design (are certain users excluded?), information architecture, integration of and conformance with effective design principles, quality of UI demo (video/audio, realtime, screenshots)<br />\n 实施质量：方法的清晰性，设计的可访问性（某些用户是否被排除在外？），信息体系结构，有效的设计原则的集成和一致性，UI 演示的质量（视频 / 音频，实时，屏幕截图）</li>\n</ol>\n","tags":["计算机科学","Master of Software Engineering","ITMD 534. Human Computer Interaction","人机交互"]},{"id":"https://shoka.lostyu.me/computer-science/mse/itmd-510/week-12/","url":"https://shoka.lostyu.me/computer-science/mse/itmd-510/week-12/","title":"Week 12. JavaFx","date_published":"2020-11-13T14:51:29.000Z","content_html":"<h1 id=\"notes\"><a class=\"anchor\" href=\"#notes\">#</a> Notes</h1>\n<h2 id=\"getting-started-with-fx\"><a class=\"anchor\" href=\"#getting-started-with-fx\">#</a> Getting started with FX</h2>\n<p>The  <code>start</code>  method is the <ins>heart</ins> of any JavaFX application.<br />\nThe method is called when the application is loaded, and a reference to the application's primary <span class=\"red\">Stage</span> is passed as a parameter.<br />\nThe start method creates the <span class=\"red\">Scene</span> object and displays it in the stage.<br />\nPictoral shown below.</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Stage</span> primaryStage<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Group</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Group</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Scene</span> scene <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scene</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">250</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    primaryStage<span class=\"token punctuation\">.</span><span class=\"token function\">setScene</span><span class=\"token punctuation\">(</span>scene<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    primaryStage<span class=\"token punctuation\">.</span><span class=\"token function\">setTitle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The Click Me App\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    primaryStage<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://i.loli.net/2020/12/05/uVzWraG12Rgflm4.png\" alt=\"1.png\" /></p>\n<h2 id=\"scenebuilder\"><a class=\"anchor\" href=\"#scenebuilder\">#</a> Scenebuilder</h2>\n<p>JavaFX Scene Builder is a visual layout tool that lets users quickly design JavaFX application user interfaces, without coding.</p>\n<p>Users can <strong>drag and drop</strong> UI components to a work area, modify their properties, apply style sheets, and the FXML code for the layout that they are creating is automatically generated in the background! The result is an FXML file that can then be combined with a Java project by binding the UI to the application's logic.</p>\n<ol>\n<li>Download the latest scenebuilder for your OS at <span class=\"exturl\" data-url=\"aHR0cDovL2dsdW9uaHEuY29tL3Byb2R1Y3RzL3NjZW5lLWJ1aWxkZXIv\">http://gluonhq.com/products/scene-builder/</span></li>\n<li>Install scenebuilder in your OS. Remember the <ins>path</ins> where you install it at.</li>\n<li>Lastly set your path in Eclipse under Preferences, so you can drag and drop and view your UI components from within Eclipse.<br />\nTo set your path, do the following depending on your OS.<br />\nSet the SceneBuilder executable path in Eclipse as follows:</li>\n<li>(Windows) Window -&gt; Preferences -&gt; JavaFX. For the (Mac) Eclipse -&gt; Preferences… -&gt; JavaFX</li>\n<li>Click &quot;Browse&quot; and navigate to your bash file (linux) or where the  <code>SceneBuilder.exe</code>  (windows) is or for (Mac)  <code>SceneBuilder.app</code> , which is most likely in your Applications folder, and choose your file and click Apply and Close to finish.</li>\n</ol>\n<p>Now when you add any FXML file to your app (File &gt; New &gt; Other &gt; JavaFX &gt; New FXML Document) you can open the file up in Scene Builder by right clicking your FXML file and choose Scene Builder to open the file for creating / editing / viewing!</p>\n<p><img data-src=\"https://i.loli.net/2020/12/05/vJUeR4ZGB1cMYQX.png\" alt=\"2.png\" /></p>\n<h2 id=\"basic-layout-panes\"><a class=\"anchor\" href=\"#basic-layout-panes\">#</a> Basic Layout panes</h2>\n<p>Layout panes in JavaFX let you manage the placement controls and shapes that appear in your scenes. Don't forget that a layout pane is itself a node, so you can nest layout panes within other layout panes to create complicated layouts.</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>HBox</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">HBox</span> hbox1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HBox</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// sets initial spacing</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hbox1<span class=\"token punctuation\">.</span><span class=\"token function\">getChildren</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>btn1<span class=\"token punctuation\">,</span> btn2<span class=\"token punctuation\">,</span> btn3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>hbox1<span class=\"token punctuation\">.</span><span class=\"token function\">setAlignment</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Pos</span><span class=\"token punctuation\">.</span>CENTER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>hbox1<span class=\"token punctuation\">.</span><span class=\"token function\">setPadding</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Insets</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>hbox1<span class=\"token punctuation\">.</span><span class=\"token function\">setSpacing</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>VBox</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">VBox</span> vbox1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VBox</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// sets initial spacing</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>vbox1<span class=\"token punctuation\">.</span><span class=\"token function\">getChildren</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>btn1<span class=\"token punctuation\">,</span> btn2<span class=\"token punctuation\">,</span> btn3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>vbox1<span class=\"token punctuation\">.</span><span class=\"token function\">setAlignment</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Pos</span><span class=\"token punctuation\">.</span>CENTER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>vbox1<span class=\"token punctuation\">.</span><span class=\"token function\">setPadding</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Insets</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>vbox1<span class=\"token punctuation\">.</span><span class=\"token function\">setSpacing</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>FlowPane</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">FlowPane</span> flow1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FlowPane</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>flow1<span class=\"token punctuation\">.</span><span class=\"token function\">getChildren</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>btn1<span class=\"token punctuation\">,</span> btn2<span class=\"token punctuation\">,</span> btn3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>flow1<span class=\"token punctuation\">.</span><span class=\"token function\">setAlignment</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Pos</span><span class=\"token punctuation\">.</span>CENTER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>flow1<span class=\"token punctuation\">.</span><span class=\"token function\">setOrientation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Orientation</span><span class=\"token punctuation\">.</span>VERTICAL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>flow1<span class=\"token punctuation\">.</span><span class=\"token function\">setVgap</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>flow1<span class=\"token punctuation\">.</span><span class=\"token function\">setHgap</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>flow1<span class=\"token punctuation\">.</span><span class=\"token function\">setPrefWrapLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>BorderPane</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">BorderPane</span> border1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BorderPane</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>border1<span class=\"token punctuation\">.</span><span class=\"token function\">setCenter</span><span class=\"token punctuation\">(</span>btn1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>border1<span class=\"token punctuation\">.</span><span class=\"token function\">setTop</span><span class=\"token punctuation\">(</span>btn2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>border1<span class=\"token punctuation\">.</span><span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span>btn3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>border1<span class=\"token punctuation\">.</span><span class=\"token function\">setBottom</span><span class=\"token punctuation\">(</span>btn4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>border1<span class=\"token punctuation\">.</span><span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span>btn5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"basic-controls\"><a class=\"anchor\" href=\"#basic-controls\">#</a> Basic Controls</h2>\n<p>JavaFX defines a plethora of controls that you use to interact with the user. The most commonly used are Label, Button, TextField, CheckBox, and RadioButton.</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Label</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Label</span> lbl <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Label</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is a label\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Button</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Button</span> btn <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Button</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Click Me!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>btn<span class=\"token punctuation\">.</span><span class=\"token function\">setOnAction</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Click\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>TextField</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">TextField</span> txtInput <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Prompt Text\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> input <span class=\"token operator\">=</span> txtInput<span class=\"token punctuation\">.</span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>CheckBox</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">CheckBox</span> chkOption <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CheckBox</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Check Box Text\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>chkOption<span class=\"token punctuation\">.</span><span class=\"token function\">isSelected</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Option is selected\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>RadioButton (with ToggleGroup)</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">RadioButton</span> rdo1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RadioButton</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Option 1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">RadioButton</span> rdo2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RadioButton</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Option 2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>rdo1<span class=\"token punctuation\">.</span><span class=\"token function\">setSelected</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">ToggleGroup</span> options <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ToggleGroup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>options<span class=\"token punctuation\">.</span><span class=\"token function\">getToggles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>rdo1<span class=\"token punctuation\">,</span> rdo2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rdo1<span class=\"token punctuation\">.</span><span class=\"token function\">isSelected</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Option 1 is selected\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"demo\"><a class=\"anchor\" href=\"#demo\">#</a> Demo</h2>\n<h3 id=\"switch\"><a class=\"anchor\" href=\"#switch\">#</a> Switch</h3>\n<p>uses lambda functions to trigger events.<br />\nTrigger app from  <code>TwoScene.java</code>  file.<br />\nIncludes programmatic CSS features and lambda functions.</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>TwoScene.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">application</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>application<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Application</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>event<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ActionEvent</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scene</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span>control<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Button</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span>control<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Label</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FlowPane</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>stage<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Modality</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>stage<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Stage</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TwoScene</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Application</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token class-name\">Button</span> btnscene1<span class=\"token punctuation\">,</span> btnscene2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token class-name\">Label</span> lblscene1<span class=\"token punctuation\">,</span> lblscene2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token class-name\">FlowPane</span> pane1<span class=\"token punctuation\">,</span> pane2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token class-name\">Scene</span> scene1<span class=\"token punctuation\">,</span> scene2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token class-name\">Stage</span> thestage<span class=\"token punctuation\">,</span> stage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Stage</span> primaryStage<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token comment\">// thestage=primaryStage;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token comment\">// can now use the stage in other methods</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token comment\">// make things to put on panes</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tbtnscene1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Button</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Click to go to Other Scene\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\tbtnscene2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Button</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Click to go back to First Scene\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token comment\">// btnscene1.setStyle(\"-fx-font: 24 arial;\");</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\tbtnscene1<span class=\"token punctuation\">.</span><span class=\"token function\">setOnAction</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">-></span> <span class=\"token class-name\">ButtonClicked</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\tbtnscene2<span class=\"token punctuation\">.</span><span class=\"token function\">setOnAction</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">-></span> <span class=\"token class-name\">ButtonClicked</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\tlblscene1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Label</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Scene 1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\tlblscene2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Label</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Scene 2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token comment\">// make 2 Panes</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\tpane1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FlowPane</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\tpane2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FlowPane</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\tpane1<span class=\"token punctuation\">.</span><span class=\"token function\">setVgap</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\tpane2<span class=\"token punctuation\">.</span><span class=\"token function\">setVgap</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token comment\">// set background color of each Pane</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\tpane1<span class=\"token punctuation\">.</span><span class=\"token function\">setStyle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-fx-background-color: tan;-fx-padding: 10px;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\tpane2<span class=\"token punctuation\">.</span><span class=\"token function\">setStyle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-fx-background-color: red;-fx-padding: 10px;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token comment\">// add everything to panes</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\tpane1<span class=\"token punctuation\">.</span><span class=\"token function\">getChildren</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>lblscene1<span class=\"token punctuation\">,</span> btnscene1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\tpane2<span class=\"token punctuation\">.</span><span class=\"token function\">getChildren</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>lblscene2<span class=\"token punctuation\">,</span> btnscene2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token comment\">// make 2 scenes from 2 panes</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\tscene1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scene</span><span class=\"token punctuation\">(</span>pane1<span class=\"token punctuation\">,</span> <span class=\"token number\">225</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\tscene2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scene</span><span class=\"token punctuation\">(</span>pane2<span class=\"token punctuation\">,</span> <span class=\"token number\">225</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\tstage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\tstage<span class=\"token punctuation\">.</span><span class=\"token function\">setScene</span><span class=\"token punctuation\">(</span>scene2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\tstage<span class=\"token punctuation\">.</span><span class=\"token function\">initModality</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Modality</span><span class=\"token punctuation\">.</span>APPLICATION_MODAL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\tprimaryStage<span class=\"token punctuation\">.</span><span class=\"token function\">setTitle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\tprimaryStage<span class=\"token punctuation\">.</span><span class=\"token function\">setScene</span><span class=\"token punctuation\">(</span>scene1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\tprimaryStage<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">ButtonClicked</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ActionEvent</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> btnscene2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t\tstage<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\t\tstage<span class=\"token punctuation\">.</span><span class=\"token function\">showAndWait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t<span class=\"token comment\">/* alt. coding</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t * if (e.getSource()==btnscene1) thestage.setScene(scene2); else</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t * thestage.setScene(scene1);</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t */</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t<span class=\"token function\">launch</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"login\"><a class=\"anchor\" href=\"#login\">#</a> Login</h3>\n<p>jump from scene to scene upon a successful login.<br />\nIncludes Button UI event.<br />\nTrigger  <code>LoginDemoApplication.java</code>  file.</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>LoginDemoApplication.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">login</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>application<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Application</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scene</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>stage<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Stage</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">login<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LoginManager</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/** Main application class for the login demo application */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginDemoApplication</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Application</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">launch</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Stage</span> stage<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token class-name\">Scene</span> scene <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scene</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">StackPane</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token class-name\">LoginManager</span> loginManager <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LoginManager</span><span class=\"token punctuation\">(</span>scene<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    loginManager<span class=\"token punctuation\">.</span><span class=\"token function\">showLoginScreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    stage<span class=\"token punctuation\">.</span><span class=\"token function\">setScene</span><span class=\"token punctuation\">(</span>scene<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    stage<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>LoginManager.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">login</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>fxml<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FXMLLoader</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Parent</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scene</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/** Manages control flow for logins */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginManager</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Scene</span> scene<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">LoginManager</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Scene</span> scene<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>scene <span class=\"token operator\">=</span> scene<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t * Callback method invoked to notify that a user has been authenticated. Will</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t * show the main application screen.</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">authenticated</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> sessionID<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token function\">showMainView</span><span class=\"token punctuation\">(</span>sessionID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t * Callback method invoked to notify that a user has logged out of the main</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t * application. Will show the login application screen.</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">logout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token function\">showLoginScreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">showLoginScreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t<span class=\"token class-name\">FXMLLoader</span> loader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FXMLLoader</span><span class=\"token punctuation\">(</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"login.fxml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\tscene<span class=\"token punctuation\">.</span><span class=\"token function\">setRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Parent</span><span class=\"token punctuation\">)</span> loader<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t<span class=\"token class-name\">LoginController</span> controller <span class=\"token operator\">=</span> loader<span class=\"token punctuation\">.</span><span class=\"token function\">getController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\tcontroller<span class=\"token punctuation\">.</span><span class=\"token function\">initManager</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\tex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">showMainView</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> sessionID<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\t<span class=\"token class-name\">FXMLLoader</span> loader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FXMLLoader</span><span class=\"token punctuation\">(</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mainview.fxml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\tscene<span class=\"token punctuation\">.</span><span class=\"token function\">setRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Parent</span><span class=\"token punctuation\">)</span> loader<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t\t<span class=\"token class-name\">MainViewController</span> controller <span class=\"token operator\">=</span> loader<span class=\"token punctuation\">.</span><span class=\"token function\">getController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t\tcontroller<span class=\"token punctuation\">.</span><span class=\"token function\">initSessionID</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> sessionID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t\tex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>LoginController.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">login</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>fxml<span class=\"token punctuation\">.</span></span>FXML<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span>control<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/** Controls the login screen */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token annotation punctuation\">@FXML</span> <span class=\"token keyword\">private</span> <span class=\"token class-name\">TextField</span> user<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token annotation punctuation\">@FXML</span> <span class=\"token keyword\">private</span> <span class=\"token class-name\">TextField</span> password<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token annotation punctuation\">@FXML</span> <span class=\"token keyword\">private</span> <span class=\"token class-name\">Button</span> loginButton<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token comment\">// public void initialize() &#123;&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initManager</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">LoginManager</span> loginManager<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t   loginButton<span class=\"token punctuation\">.</span><span class=\"token function\">setOnAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t    \t  <span class=\"token class-name\">String</span> sessionID <span class=\"token operator\">=</span> <span class=\"token function\">authorize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sessionID <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t            loginManager<span class=\"token punctuation\">.</span><span class=\"token function\">authenticated</span><span class=\"token punctuation\">(</span>sessionID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   * Check authorization credentials.</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   * </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   * If accepted, return a sessionID for the authorized session</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   * otherwise, return null.</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   */</span>   </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">authorize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">return</span> </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token string\">\"open\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">\"sesame\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">.</span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token operator\">?</span> <span class=\"token function\">generateSessionID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> sessionID <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">generateSessionID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    sessionID<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"xyzzy - session \"</span> <span class=\"token operator\">+</span> sessionID<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>MainViewController.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">login</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>fxml<span class=\"token punctuation\">.</span></span>FXML<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span>control<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Button</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span>control<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Label</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/** Controls the main application screen */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainViewController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token annotation punctuation\">@FXML</span> <span class=\"token keyword\">private</span> <span class=\"token class-name\">Button</span> logoutButton<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token annotation punctuation\">@FXML</span> <span class=\"token keyword\">private</span> <span class=\"token class-name\">Label</span>  sessionLabel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initSessionID</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">LoginManager</span> loginManager<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> sessionID<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t sessionLabel<span class=\"token punctuation\">.</span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span>sessionID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     logoutButton<span class=\"token punctuation\">.</span><span class=\"token function\">setOnAction</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">-></span>loginManager<span class=\"token punctuation\">.</span><span class=\"token function\">logout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>login.fxml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token prolog\">&lt;?import java.lang.*?></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token prolog\">&lt;?import java.util.*?></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token prolog\">&lt;?import javafx.geometry.*?></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token prolog\">&lt;?import javafx.scene.control.*?></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token prolog\">&lt;?import javafx.scene.layout.*?></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token prolog\">&lt;?import javafx.scene.paint.*?></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>StackPane</span> <span class=\"token attr-name\">prefWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>231.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>fx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://javafx.com/fxml<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">fx:</span>controller</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>login.LoginController<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>children</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>StackPane</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>children</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>VBox</span> <span class=\"token attr-name\">spacing</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>children</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>GridPane</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>              <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>children</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Label</span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Username:<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">GridPane.columnIndex</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">GridPane.rowIndex</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Label</span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Password:<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">GridPane.columnIndex</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">GridPane.rowIndex</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TextField</span> <span class=\"token attr-name\"><span class=\"token namespace\">fx:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>user<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">promptText</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Use <span class=\"token entity named-entity\" title=\"&quot;\">&amp;quot;</span>open<span class=\"token entity named-entity\" title=\"&quot;\">&amp;quot;</span> to login<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>open<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">GridPane.columnIndex</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">GridPane.rowIndex</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TextField</span> <span class=\"token attr-name\"><span class=\"token namespace\">fx:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">promptText</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Use <span class=\"token entity named-entity\" title=\"&quot;\">&amp;quot;</span>sesame<span class=\"token entity named-entity\" title=\"&quot;\">&amp;quot;</span> to login<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sesame<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">GridPane.columnIndex</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">GridPane.rowIndex</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>              <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>children</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>              <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>columnConstraints</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ColumnConstraints</span> <span class=\"token attr-name\">hgrow</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SOMETIMES<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">maxWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>148.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">minWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prefWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>109.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ColumnConstraints</span> <span class=\"token attr-name\">hgrow</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SOMETIMES<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">maxWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>228.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">minWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prefWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>189.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>              <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>columnConstraints</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>              <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rowConstraints</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>RowConstraints</span> <span class=\"token attr-name\">minHeight</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prefHeight</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>30.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">vgrow</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SOMETIMES<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>RowConstraints</span> <span class=\"token attr-name\">minHeight</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prefHeight</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>30.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">vgrow</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SOMETIMES<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>              <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>rowConstraints</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>GridPane</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>StackPane</span> <span class=\"token attr-name\">prefHeight</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>-1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prefWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>-1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>              <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>children</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Button</span> <span class=\"token attr-name\"><span class=\"token namespace\">fx:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>loginButton<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alignment</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>CENTER<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">defaultButton</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">mnemonicParsing</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Login<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">StackPane.alignment</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>CENTER_RIGHT<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>              <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>children</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>StackPane</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>children</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>VBox</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>children</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>StackPane</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>children</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>padding</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Insets</span> <span class=\"token attr-name\">bottom</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">left</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">right</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">top</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>padding</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>StackPane</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>mainview.fxml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token prolog\">&lt;?import java.lang.*?></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token prolog\">&lt;?import java.util.*?></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token prolog\">&lt;?import javafx.geometry.*?></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token prolog\">&lt;?import javafx.scene.control.*?></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token prolog\">&lt;?import javafx.scene.layout.*?></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token prolog\">&lt;?import javafx.scene.paint.*?></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>StackPane</span> <span class=\"token attr-name\">prefWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>231.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>fx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://javafx.com/fxml<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">fx:</span>controller</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>login.MainViewController<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>children</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>StackPane</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>children</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>VBox</span> <span class=\"token attr-name\">spacing</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>children</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>GridPane</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>              <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>children</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Label</span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Session ID:<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">GridPane.columnIndex</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">GridPane.rowIndex</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Label</span> <span class=\"token attr-name\"><span class=\"token namespace\">fx:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sessionLabel<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Undefined<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">GridPane.columnIndex</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">GridPane.rowIndex</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>              <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>children</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>              <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>columnConstraints</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ColumnConstraints</span> <span class=\"token attr-name\">hgrow</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SOMETIMES<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">maxWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>148.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">minWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prefWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>109.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ColumnConstraints</span> <span class=\"token attr-name\">hgrow</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SOMETIMES<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">maxWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>228.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">minWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prefWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>189.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>              <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>columnConstraints</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>              <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rowConstraints</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>RowConstraints</span> <span class=\"token attr-name\">minHeight</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prefHeight</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>30.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">vgrow</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SOMETIMES<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>RowConstraints</span> <span class=\"token attr-name\">minHeight</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prefHeight</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>30.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">vgrow</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SOMETIMES<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>              <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>rowConstraints</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>GridPane</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>StackPane</span> <span class=\"token attr-name\">prefHeight</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>-1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prefWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>-1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>              <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>children</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>loginButton<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">fx:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>logoutButton<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alignment</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>CENTER<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">defaultButton</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">mnemonicParsing</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Logout<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">StackPane.alignment</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>CENTER_RIGHT<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>              <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>children</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>StackPane</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>children</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>VBox</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>children</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>StackPane</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>children</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>padding</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Insets</span> <span class=\"token attr-name\">bottom</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">left</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">right</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">top</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>padding</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>StackPane</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"fxmenus\"><a class=\"anchor\" href=\"#fxmenus\">#</a> FXMenus</h3>\n<p>Two packages! Use of Controller, SceneBuilder.<br />\nIncludes menu click events.<br />\nRun either  <code>Main.java</code>  file from either package.</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Main.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">application</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>application<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Application</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>property<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ReadOnlyDoubleProperty</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>event<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ActionEvent</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>event<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EventHandler</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Group</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scene</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span>control<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Menu</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span>control<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MenuBar</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span>control<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MenuItem</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span>paint<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>stage<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Stage</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> * Example of creating menus in JavaFX.</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"18\"></td><td><pre> * @author me</pre></td></tr><tr><td data-num=\"19\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Application</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    * Manually build menu bar with included menus for this demonstration.</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    * </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    * @param menuWidthProperty Width to be bound to menu bar width.</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    * @return Menu Bar with menus included.</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">MenuBar</span> <span class=\"token function\">buildMenuBarWithMenus</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">ReadOnlyDoubleProperty</span> menuWidthProperty<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token keyword\">final</span> <span class=\"token class-name\">MenuBar</span> menuBar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MenuBar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token comment\">// Prepare left-most 'File' drop-down menu</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token keyword\">final</span> <span class=\"token class-name\">Menu</span> fileMenu <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Menu</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"File\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      fileMenu<span class=\"token punctuation\">.</span><span class=\"token function\">getItems</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MenuItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Open\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>       </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      menuBar<span class=\"token punctuation\">.</span><span class=\"token function\">getMenus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>fileMenu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token comment\">// Prepare 'Examples' drop-down menu</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      <span class=\"token keyword\">final</span> <span class=\"token class-name\">Menu</span> examplesMenu <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Menu</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JavaFX Menu Examples\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      examplesMenu<span class=\"token punctuation\">.</span><span class=\"token function\">getItems</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MenuItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Text Example\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      menuBar<span class=\"token punctuation\">.</span><span class=\"token function\">getMenus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>examplesMenu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>      fileMenu<span class=\"token punctuation\">.</span><span class=\"token function\">setOnAction</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">EventHandler</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ActionEvent</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>          <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ActionEvent</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>              <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Opening Database Connection...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"52\"></td><td><pre>      <span class=\"token comment\">// bind width of menu bar to width of associated stage</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>      menuBar<span class=\"token punctuation\">.</span><span class=\"token function\">prefWidthProperty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>menuWidthProperty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>      <span class=\"token keyword\">return</span> menuBar<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    * Start of JavaFX application demonstrating menu support.</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    * </pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    * @param stage Primary stage.</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>   <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">Stage</span> stage<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t  stage<span class=\"token punctuation\">.</span><span class=\"token function\">setTitle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Programmatic Menu 1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>      <span class=\"token keyword\">final</span> <span class=\"token class-name\">Group</span> rootGroup <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Group</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>      <span class=\"token keyword\">final</span> <span class=\"token class-name\">Scene</span> scene <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scene</span><span class=\"token punctuation\">(</span>rootGroup<span class=\"token punctuation\">,</span> <span class=\"token number\">800</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>WHEAT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>      <span class=\"token keyword\">final</span> <span class=\"token class-name\">MenuBar</span> menuBar <span class=\"token operator\">=</span> <span class=\"token function\">buildMenuBarWithMenus</span><span class=\"token punctuation\">(</span>stage<span class=\"token punctuation\">.</span><span class=\"token function\">widthProperty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>      rootGroup<span class=\"token punctuation\">.</span><span class=\"token function\">getChildren</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>menuBar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>      stage<span class=\"token punctuation\">.</span><span class=\"token function\">setScene</span><span class=\"token punctuation\">(</span>scene<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>      stage<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    * Main executable function for running examples.</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    * </pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    * @param arguments Command-line arguments: none expected.</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arguments<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>      <span class=\"token class-name\">Application</span><span class=\"token punctuation\">.</span><span class=\"token function\">launch</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>menuController.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">application</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>application<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Application</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>fxml<span class=\"token punctuation\">.</span></span>FXML<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>fxml<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FXMLLoader</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scene</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span>control<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Menu</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span>control<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MenuItem</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AnchorPane</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>stage<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Stage</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> menuController <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Application</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token annotation punctuation\">@FXML</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Menu</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token annotation punctuation\">@FXML</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">MenuItem</span> <span class=\"token class-name\">Close</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t * JavaFX application demonstrating menu that was created via Scene Builder.</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t * </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t * @param stage</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t *            Primary stage.</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t * @throws IOException</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Stage</span> stage<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token class-name\">FXMLLoader</span> loader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FXMLLoader</span><span class=\"token punctuation\">(</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/application/main.fxml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token class-name\">AnchorPane</span> root <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">AnchorPane</span><span class=\"token punctuation\">)</span> loader<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\tstage<span class=\"token punctuation\">.</span><span class=\"token function\">setTitle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SceneBuilder Menu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token class-name\">Scene</span> scene <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scene</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\tstage<span class=\"token punctuation\">.</span><span class=\"token function\">setScene</span><span class=\"token punctuation\">(</span>scene<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\tstage<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">closeOut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token comment\">// body</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Close item event action\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token comment\">// TODO Auto-generated method stub</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token function\">launch</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>main.fxml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token prolog\">&lt;?import java.lang.*?></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token prolog\">&lt;?import javafx.scene.control.*?></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token prolog\">&lt;?import javafx.scene.layout.*?></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>AnchorPane</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ap<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">maxHeight</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>-Infinity<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">maxWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>-Infinity<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">minHeight</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>-Infinity<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">minWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>-Infinity<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prefHeight</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>400.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prefWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>600.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://javafx.com/javafx/8.0.40<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>fx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://javafx.com/fxml/1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">fx:</span>controller</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>application.menuController<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>children</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>MenuBar</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myMenu<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>menus</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Menu</span> <span class=\"token attr-name\"><span class=\"token namespace\">fx:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>File<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">mnemonicParsing</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>File<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>items</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>              <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>MenuItem</span> <span class=\"token attr-name\"><span class=\"token namespace\">fx:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Close<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">mnemonicParsing</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onAction</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#closeOut<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Close<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>items</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Menu</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Menu</span> <span class=\"token attr-name\">mnemonicParsing</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Edit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>items</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>              <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>MenuItem</span> <span class=\"token attr-name\">mnemonicParsing</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Delete<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>items</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Menu</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Menu</span> <span class=\"token attr-name\">mnemonicParsing</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Sleep<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>              <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>items</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>MenuItem</span> <span class=\"token attr-name\">mnemonicParsing</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Now<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>              <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>items</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Menu</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>menus</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>MenuBar</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Label</span> <span class=\"token attr-name\">layoutX</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>253.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">layoutY</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>139.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Welcome!<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>children</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>AnchorPane</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"fxtablesb\"><a class=\"anchor\" href=\"#fxtablesb\">#</a> FXTableSB</h3>\n<p>for rendering a  <code>Table View</code>  in SB.<br />\nIncludes a controller file.<br />\nTrigger  <code>Main.java</code>  file.</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Main.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">application</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>application<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Application</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>fxml<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FXMLLoader</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Parent</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scene</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>stage<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Stage</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Application</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Stage</span> stage<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">Parent</span> root <span class=\"token operator\">=</span> <span class=\"token class-name\">FXMLLoader</span><span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FXMLDocument.fxml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">Scene</span> scene <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scene</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        stage<span class=\"token punctuation\">.</span><span class=\"token function\">setScene</span><span class=\"token punctuation\">(</span>scene<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        stage<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token function\">launch</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>FXMLDocumentController.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">application</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span>URL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResourceBundle</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>property<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SimpleStringProperty</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>collections<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FXCollections</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>collections<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ObservableList</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>event<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ActionEvent</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>fxml<span class=\"token punctuation\">.</span></span>FXML<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>fxml<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Initializable</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span>control<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Label</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span>control<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TableColumn</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span>control<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TableView</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span>control<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TextField</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span>control<span class=\"token punctuation\">.</span>cell<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PropertyValueFactory</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FXMLDocumentController</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Initializable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token annotation punctuation\">@FXML</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Label</span> label<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token annotation punctuation\">@FXML</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">TableView</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> table<span class=\"token punctuation\">;</span><span class=\"token comment\">// = new TableView&lt;Person>();</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token annotation punctuation\">@FXML</span> <span class=\"token keyword\">private</span> <span class=\"token class-name\">TableColumn</span> firstNameCol <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token annotation punctuation\">@FXML</span> <span class=\"token keyword\">private</span> <span class=\"token class-name\">TableColumn</span> lastNameCol <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token annotation punctuation\">@FXML</span> <span class=\"token keyword\">private</span> <span class=\"token class-name\">TableColumn</span> emailCol <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token annotation punctuation\">@FXML</span> <span class=\"token class-name\">TextField</span> addFirstName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token annotation punctuation\">@FXML</span> <span class=\"token class-name\">TextField</span> addLastName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token annotation punctuation\">@FXML</span> <span class=\"token class-name\">TextField</span> addEmail<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ObservableList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> data</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token operator\">=</span> <span class=\"token class-name\">FXCollections</span><span class=\"token punctuation\">.</span><span class=\"token function\">observableArrayList</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jacob\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Smith\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jacob.smith@example.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Isabella\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Johnson\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"isabella.johnson@example.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ethan\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Williams\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ethan.williams@example.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Emma\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Jones\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"emma.jones@example.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Michael\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Brown\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"michael.brown@example.com\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token annotation punctuation\">@FXML</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleButtonAction</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ActionEvent</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You clicked me!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        data<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                addFirstName<span class=\"token punctuation\">.</span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                addLastName<span class=\"token punctuation\">.</span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                addEmail<span class=\"token punctuation\">.</span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        addFirstName<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        addLastName<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        addEmail<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">URL</span> url<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ResourceBundle</span> rb<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token comment\">// TODO</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        firstNameCol<span class=\"token punctuation\">.</span><span class=\"token function\">setMinWidth</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        lastNameCol<span class=\"token punctuation\">.</span><span class=\"token function\">setMinWidth</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        emailCol<span class=\"token punctuation\">.</span><span class=\"token function\">setMinWidth</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        table<span class=\"token punctuation\">.</span><span class=\"token function\">getItems</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAll</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        firstNameCol<span class=\"token punctuation\">.</span><span class=\"token function\">setCellValueFactory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PropertyValueFactory</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"firstName\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        lastNameCol<span class=\"token punctuation\">.</span><span class=\"token function\">setCellValueFactory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PropertyValueFactory</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lastName\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        emailCol<span class=\"token punctuation\">.</span><span class=\"token function\">setCellValueFactory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PropertyValueFactory</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"email\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">SimpleStringProperty</span> firstName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">SimpleStringProperty</span> lastName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">SimpleStringProperty</span> email<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> lName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> email<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleStringProperty</span><span class=\"token punctuation\">(</span>fName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastName <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleStringProperty</span><span class=\"token punctuation\">(</span>lName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>email <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleStringProperty</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getFirstName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            <span class=\"token keyword\">return</span> firstName<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setFirstName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            firstName<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>fName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getLastName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            <span class=\"token keyword\">return</span> lastName<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setLastName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            lastName<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>fName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getEmail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            <span class=\"token keyword\">return</span> email<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setEmail</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>            email<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>fName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>FXMLDocument.fxml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token prolog\">&lt;?import java.lang.*?></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token prolog\">&lt;?import java.util.*?></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token prolog\">&lt;?import javafx.scene.*?></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token prolog\">&lt;?import javafx.scene.control.*?></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token prolog\">&lt;?import javafx.scene.layout.*?></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>AnchorPane</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>AnchorPane<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prefHeight</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>380.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prefWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>462.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>fx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://javafx.com/fxml/1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://javafx.com/javafx/8<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">fx:</span>controller</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>application.FXMLDocumentController<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>children</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Button</span> <span class=\"token attr-name\"><span class=\"token namespace\">fx:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">layoutX</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>325.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">layoutY</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>324.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onAction</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#handleButtonAction<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Click Me!<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Label</span> <span class=\"token attr-name\"><span class=\"token namespace\">fx:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>label<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">layoutX</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>126<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">layoutY</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>120<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">minHeight</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>16<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">minWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>69<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TableView</span> <span class=\"token attr-name\"><span class=\"token namespace\">fx:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>table<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">layoutX</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>26.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">layoutY</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>29.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prefHeight</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>221.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prefWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>411.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>columns</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TableColumn</span> <span class=\"token attr-name\"><span class=\"token namespace\">fx:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>firstNameCol<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prefWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>75.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>First Name<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TableColumn</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TableColumn</span> <span class=\"token attr-name\"><span class=\"token namespace\">fx:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lastNameCol<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prefWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>75.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Last Name<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TableColumn</span> <span class=\"token attr-name\"><span class=\"token namespace\">fx:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>emailCol<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prefWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>75.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Email<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>columns</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TableView</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TextField</span> <span class=\"token attr-name\"><span class=\"token namespace\">fx:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>addFirstName<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">layoutX</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>26.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">layoutY</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>284.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prefHeight</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>25.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prefWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>81.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">promptText</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>First Name<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TextField</span> <span class=\"token attr-name\"><span class=\"token namespace\">fx:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>addLastName<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">layoutX</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>121.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">layoutY</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>284.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prefHeight</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>25.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prefWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>89.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">promptText</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Last Name<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TextField</span> <span class=\"token attr-name\"><span class=\"token namespace\">fx:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>addEmail<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">layoutX</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>222.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">layoutY</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>284.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">promptText</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Email<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>children</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>AnchorPane</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"javafxtableview\"><a class=\"anchor\" href=\"#javafxtableview\">#</a> JAVAFXTableView</h3>\n<p>for rendering a  <code>JTable</code>  style output.<br />\nIncludes customized CSS file  <code>styles.css</code> .<br />\nTrigger  <code>DynamicTable.java</code>  file.</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>DynamicTable.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">apps</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResultSet</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>atomic<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AtomicLong</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">connection<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DBConnect</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>application<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Application</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>application<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Platform</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>property<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SimpleStringProperty</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ObservableValue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>collections<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FXCollections</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>collections<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ObservableList</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scene</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span>control<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TableColumn</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span>control<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TableColumn</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">CellDataFeatures</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span>control<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TableView</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>stage<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Stage</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Callback</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DynamicTable</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Application</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre> </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">// TABLE VIEW AND DATA OBJECT CREATIONS</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rawtypes\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">ObservableList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ObservableList</span><span class=\"token punctuation\">></span></span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rawtypes\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">TableView</span> tableview<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">// CONNECTION DATABASE</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rawtypes\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">buildData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token class-name\">DBConnect</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DBConnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\tdata <span class=\"token operator\">=</span> <span class=\"token class-name\">FXCollections</span><span class=\"token punctuation\">.</span><span class=\"token function\">observableArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t<span class=\"token class-name\">Connection</span> conn <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t<span class=\"token comment\">// SQL FOR SELECTING DATA</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\t<span class=\"token class-name\">String</span> SQL <span class=\"token operator\">=</span> <span class=\"token string\">\"SELECT id,name, address from jpapa_bank\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t<span class=\"token comment\">// ResultSet object</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\t<span class=\"token class-name\">ResultSet</span> rs <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span><span class=\"token function\">createStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span>SQL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\t<span class=\"token comment\">/**********************************</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\t * TABLE COLUMN ADDED DYNAMICALLY *</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t **********************************/</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> rs<span class=\"token punctuation\">.</span><span class=\"token function\">getMetaData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getColumnCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// We are using non property style for making dynamic table</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">TableColumn</span> col <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TableColumn</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">.</span><span class=\"token function\">getMetaData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getColumnName</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t\t\t<span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t\t\t * Build an ObservableList for column headings as you iterate thru meta data</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t\t\t * setup callback Api for column retrievals, works with call method to return</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t\t\t * heading names</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t\t\t */</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\t\tcol<span class=\"token punctuation\">.</span><span class=\"token function\">setCellValueFactory</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t\t\t\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">Callback</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CellDataFeatures</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ObservableList</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ObservableValue</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t\t\t\t\t\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">ObservableValue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CellDataFeatures</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ObservableList</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> param<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t\t\t\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleStringProperty</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t\t\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t\t\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// add each column name to tableview object</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t\t\ttableview<span class=\"token punctuation\">.</span><span class=\"token function\">getColumns</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// display column names to console as they are added to table dynamically</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Column [\"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">\"] added [\"</span> <span class=\"token operator\">+</span> rs<span class=\"token punctuation\">.</span><span class=\"token function\">getMetaData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getColumnName</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t\t<span class=\"token comment\">/********************************</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t\t * Data added to ObservableList dynamically *</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t\t ********************************/</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t\t<span class=\"token keyword\">int</span> ridx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// track a row index to display to console added rows to table</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// Iterate Row</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">ObservableList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> row <span class=\"token operator\">=</span> <span class=\"token class-name\">FXCollections</span><span class=\"token punctuation\">.</span><span class=\"token function\">observableArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> rs<span class=\"token punctuation\">.</span><span class=\"token function\">getMetaData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getColumnCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t\t\t\t<span class=\"token comment\">// Iterate Column, grab data</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t\t\t\t\trow<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Row [\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>ridx<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"] added \"</span> <span class=\"token operator\">+</span> row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t\t\tdata<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t\t\t<span class=\"token comment\">// automatically adjust width of columns depending on their content</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t\t\ttableview<span class=\"token punctuation\">.</span><span class=\"token function\">setColumnResizePolicy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t\t\t<span class=\"token class-name\">Platform</span><span class=\"token punctuation\">.</span><span class=\"token function\">runLater</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token function\">customResize</span><span class=\"token punctuation\">(</span>tableview<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t\t\t<span class=\"token comment\">// add data to tableview object</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t\t\ttableview<span class=\"token punctuation\">.</span><span class=\"token function\">setItems</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error on Building Data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">customResize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TableView</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> view<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t\t<span class=\"token class-name\">AtomicLong</span> width <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t\tview<span class=\"token punctuation\">.</span><span class=\"token function\">getColumns</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>col <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t\t\twidth<span class=\"token punctuation\">.</span><span class=\"token function\">addAndGet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> col<span class=\"token punctuation\">.</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\t<span class=\"token keyword\">double</span> tableWidth <span class=\"token operator\">=</span> view<span class=\"token punctuation\">.</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tableWidth <span class=\"token operator\">></span> width<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t\t\tview<span class=\"token punctuation\">.</span><span class=\"token function\">getColumns</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>col <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t\t\t\tcol<span class=\"token punctuation\">.</span><span class=\"token function\">setPrefWidth</span><span class=\"token punctuation\">(</span>col<span class=\"token punctuation\">.</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>tableWidth <span class=\"token operator\">-</span> width<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> view<span class=\"token punctuation\">.</span><span class=\"token function\">getColumns</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t<span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rawtypes\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Stage</span> stage<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t\t<span class=\"token comment\">// Instantiate TableView object</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t\ttableview <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TableView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t\t<span class=\"token function\">buildData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t\t<span class=\"token comment\">// Main Scene</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t\t<span class=\"token class-name\">Scene</span> scene <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scene</span><span class=\"token punctuation\">(</span>tableview<span class=\"token punctuation\">,</span> <span class=\"token number\">800</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\tscene<span class=\"token punctuation\">.</span><span class=\"token function\">getStylesheets</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"styles.css\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toExternalForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\tstage<span class=\"token punctuation\">.</span><span class=\"token function\">setScene</span><span class=\"token punctuation\">(</span>scene<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t\tstage<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t<span class=\"token comment\">// MAIN EXECUTOR</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>\t\t<span class=\"token function\">launch</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre></pre></td></tr><tr><td data-num=\"130\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight css\"><figcaption data-lang=\"CSS\"><span>styles.css</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.root</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">-fx-font-size</span><span class=\"token punctuation\">:</span> 14pt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">-fx-font-family</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Courier New\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">-fx-base</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgb</span><span class=\"token punctuation\">(</span>132<span class=\"token punctuation\">,</span> 202<span class=\"token punctuation\">,</span> 248<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">-fx-background</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgb</span><span class=\"token punctuation\">(</span>225<span class=\"token punctuation\">,</span> 220<span class=\"token punctuation\">,</span> 203<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token selector\">.highlightedRow</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token property\">-fx-background-color</span><span class=\"token punctuation\">:</span> brown<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token property\">-fx-background-insets</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">,</span> 1<span class=\"token punctuation\">,</span> 2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token property\">-fx-background</span><span class=\"token punctuation\">:</span> -fx-accent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token property\">-fx-text-fill</span><span class=\"token punctuation\">:</span> -fx-selection-bar-text<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>DBConnect.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">connection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DBConnect</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">// Code database URL</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> DB_URL <span class=\"token operator\">=</span> <span class=\"token string\">\"jdbc:mysql://www.papademas.net:3307/510fp?autoReconnect=true&amp;useSSL=false\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// Database credentials</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> USER <span class=\"token operator\">=</span> <span class=\"token string\">\"fp510\"</span><span class=\"token punctuation\">,</span> PASS <span class=\"token operator\">=</span> <span class=\"token string\">\"510\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Connection</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>DB_URL<span class=\"token punctuation\">,</span> USER<span class=\"token punctuation\">,</span> PASS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"refs\"><a class=\"anchor\" href=\"#refs\">#</a> Refs</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5vcmFjbGUuY29tL3RlY2huZXR3b3JrL2phdmEvamF2YXNlL292ZXJ2aWV3L2phdmFmeC1vdmVydmlldy0yMTU4NjIwLmh0bWw=\">http://www.oracle.com/technetwork/java/javase/overview/javafx-overview-2158620.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2RvY3Mub3JhY2xlLmNvbS9qYXZhc2UvOC9qYXZhc2UtY2xpZW50dGVjaG5vbG9naWVzLmh0bQ==\">http://docs.oracle.com/javase/8/javase-clienttechnologies.htm</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YWZ4LzIvb3ZlcnZpZXcvamZ4cHViLW92ZXJ2aWV3Lmh0bQ==\">https://docs.oracle.com/javafx/2/overview/jfxpub-overview.htm</span></p>\n<p>(Master-Detail view)</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlLm1ha2VyeS5jaC9saWJyYXJ5L2phdmFmeC10dXRvcmlhbC8=\">https://code.makery.ch/library/javafx-tutorial/</span></p>\n<p>Dialogs (various popup boxes)!</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2NvZGUubWFrZXJ5LmNoL2Jsb2cvamF2YWZ4LWRpYWxvZ3Mtb2ZmaWNpYWwv\">http://code.makery.ch/blog/javafx-dialogs-official/</span></p>\n<p>FX Chart City!!!</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2RvY3Mub3JhY2xlLmNvbS9qYXZhc2UvOC9qYXZhZngvdXNlci1pbnRlcmZhY2UtdHV0b3JpYWwvY2hhcnRzLmh0bQ==\">http://docs.oracle.com/javase/8/javafx/user-interface-tutorial/charts.htm</span></p>\n<p>Totally cool text features</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlLzgvamF2YWZ4L3VzZXItaW50ZXJmYWNlLXR1dG9yaWFsL3RleHQtc2V0dGluZ3MuaHRt\">https://docs.oracle.com/javase/8/javafx/user-interface-tutorial/text-settings.htm</span></p>\n<p>FX layouts</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YWZ4LzIvbGF5b3V0L2J1aWx0aW5fbGF5b3V0cy5odG0jQ0hER0hDREc=\">https://docs.oracle.com/javafx/2/layout/builtin_layouts.htm#CHDGHCDG</span></p>\n<p>Simply CSS!</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5ndWlnYXJhZ2UuY29tLzIwMTYvMDIvamF2YWZ4LWFuZC1jc3Mv\">http://www.guigarage.com/2016/02/javafx-and-css/</span></p>\n<h1 id=\"lab\"><a class=\"anchor\" href=\"#lab\">#</a> Lab</h1>\n<ul>\n<li>\n<p>PROJECT<br />\nBank record loan generation report</p>\n</li>\n<li>\n<p>Objective<br />\nTo write a program with a MVC  <code>simulated</code>  approach that performs a Loan analysis from class objects created in lab #2.</p>\n</li>\n</ul>\n<h2 id=\"project-description\"><a class=\"anchor\" href=\"#project-description\">#</a> PROJECT DESCRIPTION</h2>\n<p>Bank of IIT now needs your help in deciphering whom from its records should be exclusive to premium loans versus those offered micro or less premium loans.<br />\n 现在，IIT 银行需要您的帮助才能确定哪些人是其记录中的专有贷款，而不是那些提供了小额或更少保费贷款的人。</p>\n<p>Use a database to store then present Loan analysis information from your data BankRecords objects you worked on in prior labs.<br />\n 使用数据库来存储，然后显示您在先前实验中工作过的数据 BankRecords 对象中的贷款分析信息。</p>\n<h2 id=\"project-details\"><a class=\"anchor\" href=\"#project-details\">#</a> Project Details</h2>\n<p>For this lab you will continue using your current project src folder files created for labs 2 &amp; 3 and you'll create the following packages &amp; their containments in an MVC style as follows:<br />\n 对于本实验，您将继续使用为实验 2 和 3 创建的当前项目 src 文件夹文件，并将以 MVC 样式创建以下程序包及其包含，如下所示：</p>\n<ul>\n<li>\n<p>Package:  <code>models</code> <br />\nFile  <code>DbConnect</code> : will allow an object to connect / close a database connection.<br />\n 将允许对象连接 / 关闭数据库连接。<br />\nFile  <code>DaoModel</code> : where Dao stands for Data Access Object, defines CRUD (Create Read Update Delete) like operations.<br />\nDao 代表数据访问对象，它定义 CRUD（创建读取更新删除）之类的操作。</p>\n</li>\n<li>\n<p>Package:  <code>controllers</code> <br />\nFile  <code>LoanProcessing</code> : acts as a controller or &quot;driver&quot; file (i.e., includes main function) to run database CRUD methods and fires up some resulting output.<br />\n 充当控制器或 “驱动程序” 文件（即包含主要功能），以运行数据库 CRUD 方法并触发一些结果输出。</p>\n</li>\n<li>\n<p>Package:  <code>views</code> <br />\nFile  <code>LoanView</code> : shows JTable output.<br />\n 显示 JTable 输出。</p>\n</li>\n</ul>\n<p>To start working with a database you will need a JDBC driver to allow for any connectivity within your app.<br />\n 要开始使用数据库，您将需要一个 JDBC 驱动程序以允许应用程序内的任何连接。</p>\n<p>To include a driver for your MySQL database, you need to create a folder called libs within your project root. The MySQL driver for JDBC connections packages in the form of a jar file which you can download here:<br />\n 要包括 MySQL 数据库的驱动程序，您需要在项目根目录中创建一个名为 libs 的文件夹。 JDBC 连接的 MySQL 驱动程序以 jar 文件的形式打包，您可以在此处下载：</p>\n<p>You will find a JDBC driver for connecting to a MySQL database located here:<br />\n 您将在以下位置找到用于连接到 MySQL 数据库的 JDBC 驱动程序：<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXYubXlzcWwuY29tL2Rvd25sb2Fkcy9jb25uZWN0b3Ivai8=\">https://dev.mysql.com/downloads/connector/j/</span></p>\n<p>Depending on your OS you will need to download a windows zip file or a tar file if you are a Mac/Linux user. I usually just choose 'Platform Independent' for Mac/Windows from the pull down menu as shown next and then choose to download the ZIP Archive version.<br />\n 如果您是 Mac / Linux 用户，则根据您的操作系统，您将需要下载 Windows zip 文件或 tar 文件。 我通常只从下图所示的下拉菜单中为 Mac / Windows 选择 “Platform Independent”，然后选择下载 ZIP 存档版本。</p>\n<p><img data-src=\"https://i.loli.net/2020/11/14/qJ7el5TLIYhnHOs.png\" alt=\"\" /></p>\n<p>Click the  <code>download</code>  button given your choice at the right hand side, and you will be taken to a page to begin your download. Go to the bottom of the page and click on the  <code>No thanks, just start my download link</code> . Unzip or untar the downloaded file and locate the needed and &quot;latest&quot; .jar file ( mysql-connector-java-8.0.22.jar ) in the unzipped foldder and <ins>copy</ins> it into your <strong>libs</strong> folder.<br />\n 点击右侧给出的 “下载” 按钮，您将被带到一个页面开始下载。 转到页面底部，然后单击 “不，谢谢，只需启动我的下载链接”。 解压缩下载的文件，然后在解压缩的文件夹中找到所需的 “最新” .jar 文件（mysql-connector-java-8.0.22.jar），然后将其复制到您的 libs 文件夹中。</p>\n<p><ins>Next</ins> include the jar file in your Build Path, by right clicking on your project folder and then choose <strong>Build Path &gt; Configure Build Path....</strong><br />\n 接下来，通过右键单击您的项目文件夹，将 jar 文件包含在 “构建路径” 中，然后选择 “构建路径”&gt;“配置构建路径...”。</p>\n<p>Once the dialog box opens make sure to click on the <strong>Libraries</strong> tab then click<br />\n 对话框打开后，请确保单击 “库” 选项卡，然后单击<br />\n<strong> Add JARs…</strong><br />\n 添加 JAR ...</p>\n<p><img data-src=\"https://i.loli.net/2020/11/14/JjH4RBu3aEQdPDv.png\" alt=\"\" /></p>\n<p>Drill down to the libs folder within your project and then choose the jar file to add.<br />\nClick  <code>OK</code>  to commit. Then click  <code>Apply and Close</code> . Snapshot follows.<br />\n 深入到项目中的 libs 文件夹，然后选择要添加的 jar 文件。<br />\n单击确定进行提交。 然后单击 “应用并关闭”。 快照如下。</p>\n<p><img data-src=\"https://i.loli.net/2020/11/14/ust7rZzBoFiEfmV.png\" alt=\"\" /></p>\n<h3 id=\"project-work\"><a class=\"anchor\" href=\"#project-work\">#</a> Project work</h3>\n<p>Create the following packages and corresponding files and include the helper code provided as follows (note- if some assignment statements in the spec continue to wrap to another line, you may want to adjust your source editor to include the assignment onto one line).<br />\n 创建以下软件包和相应的文件，并包括如下提供的帮助程序代码（注意 - 如果规范中的某些赋值语句继续换行到另一行，则可能需要调整源代码编辑器以将赋值包括在一行中）。</p>\n<blockquote>\n<p>Okay for a slight workaround if necessary!  <ins>IF</ins> you <ins>DO NOT</ins> have a package name for your project files thus far (i.e., it shows current as the default package), let’s go ahead and create one to make it possible for importation needs so file objects can be used!  So again if your current  <code>src</code>  folder shows as follows<br />\n 如有必要，请稍作解决！ 如果到目前为止您的项目文件都没有软件包名称（即，它将当前显示为默认软件包），那就继续创建一个可以满足导入需求的软件包，以便可以使用文件对象！ 如果您当前的 <code>src</code>  文件夹显示如下<br />\n<img data-src=\"https://i.loli.net/2020/11/14/rGHvbzgCoQOpw9e.png\" alt=\"\" /></p>\n</blockquote>\n<blockquote>\n<p>you need to create a package and <ins>move all</ins> files from your default package into your new package. To add in a new package, right click on your source folder  <code>src</code>  and choose <strong>New &gt; Package</strong>. Name your package  <code>records</code> . Leave the default setting. Choose Finish to complete this step. Then highlight all your files currentlly in your default package, right click on them and choose <strong>Refactor &gt; Move....</strong> Click on your chosen destination ( <code>records</code>  package) and press OK.<br />\n 您需要创建一个程序包，并将所有文件从默认程序包移至新程序包。 要添加新包，请右键单击源文件夹（src），然后选择<strong> New &gt; Package</strong>。 包命名为 <code>records</code> 。 保留默认设置。 选择完成以完成此步骤。 然后在默认包中当前突出显示所有文件，右键单击它们，然后选择<strong> Refactor &gt; Move....</strong>。单击您选择的目标位置（ <code>records</code>  包），然后按 OK。<br />\n<img data-src=\"https://i.loli.net/2020/11/14/CmBGEQoMXfhqi7Z.png\" alt=\"\" /><br />\nVoila, all your moved files will now have  <code>package records;</code>  automatically added to each file heading! Plus your <ins>default package</ins> is now blown away as shown below.<br />\n 瞧，您所有移动的文件现在都将具有 <code>package records;</code>  自动添加到每个文件的标题！ 另外，您的默认包现在被删除，如下所示。</p>\n</blockquote>\n<blockquote>\n<p>Note also if you already have had a package name for your project work, you can refactor the name to  <code>records</code> . Keep it as files from it will automatically be imported in with other packages when time comes!<br />\n 还请注意，如果您已经为项目工作使用了包名称，则可以将该名称重构为 <code>records</code> 。 保留它，因为到时文件将自动与其他软件包一起导入！<br />\n<img data-src=\"https://i.loli.net/2020/11/14/oLFy9UpNhO7mdV6.png\" alt=\"\" /></p>\n</blockquote>\n<h3 id=\"models-package\"><a class=\"anchor\" href=\"#models-package\">#</a>  <code>models</code>  Package</h3>\n<p>Now to continue with your code work, right click on your source folder  <code>models</code>  and choose <strong>New &gt; Package</strong>. Name your package  <code>models</code> . Leave the default setting. Choose Finish to complete the step.<br />\n 现在继续执行代码工作，右键单击源文件夹 <code>models</code> ，然后选择<strong> New &gt; Package</strong>。 包命名为 <code>models</code> 。 保留默认设置。 选择完成以完成该步骤。</p>\n<p>Next, right click on your <ins>new package</ins> (i.e.,  <code>models</code> ) and create a class. Name your class  <code>DBConnect</code>  and copy in the following code to allow connections to the papaserver.<br />\n 接下来，右键单击您的新包（即 <code>models</code> ），然后创建一个类。 将您的类命名为 <code>DBConnect</code> ，并复制以下代码以允许连接到 papaserver。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>DBConnect.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">models</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DBConnect</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// Code database URL</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> DB_URL <span class=\"token operator\">=</span> <span class=\"token string\">\"jdbc:mysql://www.papademas.net:3307/510labs?autoReconnect=true&amp;useSSL=false\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// Database credentials</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> USER <span class=\"token operator\">=</span> <span class=\"token string\">\"db510\"</span><span class=\"token punctuation\">,</span> PASS <span class=\"token operator\">=</span> <span class=\"token string\">\"510\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Connection</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>DB_URL<span class=\"token punctuation\">,</span> USER<span class=\"token punctuation\">,</span> PASS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Note that any remaining helper code below will <ins>not</ins> include imports or any package names for brevity, so <ins>please make sure to add them in</ins> (<strong>Source &gt; Organize Imports</strong>)! Note when you choose  <code>Organize Imports</code> , <ins>automatically</ins> any imports for <ins>any</ins> of your new packages will automatically be included as well!<br />\n 请注意，以下任何剩余的帮助程序代码都将不包含导入或简短的软件包名称，因此请确保将其添加到（<strong>Source &gt; Organize Imports</strong>）中！ 请注意，当您选择 <code>Organize Imports</code>  时，也会自动包括任何新软件包的任何导入！</p>\n<p>Also note that if and when you copy code in, you may get some underlying errors, until you <ins>include any necessary import statements</ins>.<br />\n 还要注意，当您复制代码时，在包含任何必要的 <code>import</code>  语句之前，可能会遇到一些潜在的错误。</p>\n<p>Also <em>further</em> note, when <em>choosing</em> imports for db operations from <ins>source</ins> <span class=\"red\">classes</span>, if you're prompted for choosing from more than one option, choose from the  <code>java.sql</code> , package and then the subpackage(s) in the list.<br />\n 另请注意，当从源类中选择数据库操作的导入时，如果系统提示您从多个选项中进行选择，请从列表中的 <code>java.sql</code> ，包和子包中进行选择。</p>\n<p>Ex.<br />\n<img data-src=\"https://i.loli.net/2020/11/14/71EjiLKmeP6hpsC.png\" alt=\"\" /></p>\n</blockquote>\n<p>In the  <code>models</code>  package add in another class named  <code>DaoModel</code>  and code it as follows:<br />\n 在 <code>models</code>  包中，添加另一个名为 <code>DaoModel</code>  的类，并将其编码如下：</p>\n<ul>\n<li>Include the following class fields, constructor<br />\n 包括以下类字段，构造函数</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>DaoModel.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//Declare DB objects </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token class-name\">DBConnect</span> conn <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token class-name\">Statement</span> stmt <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">// constructor</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">DaoModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//create db object instance</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\tconn <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DBConnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>Include a method to create a database table called  <code>createTable</code> .  <code>createTable</code>  merely creates a table when the method is called. Include the fields  <code>pid</code> ,  <code>id</code> ,  <code>income</code>  and  <code>pep</code>  when building your table setup. A PRIMARY KEY, which ensures record uniqueness is included for your build for the pid field which is shown below.<br />\n 包括一种创建名为 <code>createTable</code>  的数据库表的方法。  <code>createTable</code>  仅在被调用时创建一个表。 建立表格设置时，包含字段 <code>pid</code> ， <code>id</code> ， <code>income</code>  和 <code>pep</code> 。 如下所示，在 <code>pid</code>  字段的构建中包含了一个 <code>PRIMARY KEY</code> ，它确保记录的唯一性。</li>\n</ul>\n<blockquote>\n<p>Note when creating a table it is  <code>IMPERATIVE</code>  to include the following name: 请注意，在创建表时，必须包括以下名称：<br />\n <code>yourFirstinitial_First4LettersOfYourLastName_tab</code></p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// CREATE TABLE METHOD</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">createTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token comment\">// Open a connection</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Connecting to database to create Table...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Connected database successfully...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token comment\">// Execute create query</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Creating table in given database...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tstmt <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">createStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t <span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> <span class=\"token string\">\"CREATE TABLE yourTableName_tab \"</span> <span class=\"token operator\">+</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t              <span class=\"token string\">\"(pid INTEGER not NULL AUTO_INCREMENT, \"</span> <span class=\"token operator\">+</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t  \t        <span class=\"token string\">\" id VARCHAR(10), \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t\t  <span class=\"token string\">\" income numeric(8,2), \"</span> <span class=\"token operator\">+</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t\t  <span class=\"token string\">\" pep VARCHAR(3), \"</span> <span class=\"token operator\">+</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t  <span class=\"token string\">\" PRIMARY KEY ( pid ))\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tstmt<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Created table in given database...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tconn<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//close db connection </span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> se<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// Handle errors for JDBC</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tse<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Notice carefully that  <code>comments</code>  are put in code as well the display of relevant information to the console. <span class=\"purple\">For future methods, continue this way on your own.</span><br />\n 请注意，注释已放入代码中，并且在控制台中显示了相关信息。 对于将来的方法，请自行继续这种方式。</p>\n</blockquote>\n<ul>\n<li>Include a method to insert records called  <code>insertRecords()</code> .</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// INSERT INTO METHOD</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insertRecords</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BankRecords</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> robjs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token comment\">// Execute a query</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Inserting records into the table...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\tstmt <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">createStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token comment\">// Include all object data to the database table</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> robjs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t<span class=\"token comment\">// finish string assignment below to insert all array object data </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t<span class=\"token comment\">// (id, income, pep) into your database table</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\tsql <span class=\"token operator\">=</span> <span class=\"token string\">\"                   \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\tstmt<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tconn<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> se<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> se<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token comment\">// INSERT INTO METHOD</span></pre></td></tr></table></figure><p>Finish coding the above sql string with an insert statement where commented.<br />\n 使用注释的 insert 语句完成对以上 sql 字符串的编码。</p>\n<p>Example insert statement follows ( note space separation in string for statement clarity, also single vs. double quote marks! ):<br />\n 下面是示例 insert 语句（为清楚起见，请注意字符串之间的空格分隔，也包括单引号和双引号！）：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sql <span class=\"token operator\">=</span> <span class=\"token string\">\"INSERT INTO yourTableName_tab(field 1,field 2, field n) \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>       <span class=\"token string\">\"VALUES (' \"</span><span class=\"token operator\">+</span>value <span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token string\">\" ', ' \"</span><span class=\"token operator\">+</span>value <span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token string\">\" ', ' \"</span><span class=\"token operator\">+</span>value n<span class=\"token operator\">+</span><span class=\"token string\">\" ' )\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>Note for brevity purposes, future starter code will mostly EXCLUDE try / catch blocks. Add in your own try / catch blocks were applicable.<br />\n 为简便起见，请注意，以后的 starter code 将排除 try /catch 块。 添加您自己的 try /catch 块是适用的。</p>\n</blockquote>\n<ul>\n<li>Include a method to retrieve records for display called  <code>retrieveRecords()</code> .</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">ResultSet</span> <span class=\"token function\">retrieveRecords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token class-name\">ResultSet</span> rs <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tstmt <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">createStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> <span class=\"token string\">\"SELECT * from yourTableName_tab\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\trs <span class=\"token operator\">=</span> stmt<span class=\"token punctuation\">.</span><span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tconn<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">return</span> rs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"methods-breakdown\"><a class=\"anchor\" href=\"#methods-breakdown\">#</a> Methods breakdown</h4>\n<p><code>insertRecords(BankRecords [] arrayName)</code>  will allow for the <ins>array of  <code>BankRecord</code>  objects</ins>, to be passed to your method which will allow for the insertion of <ins>all</ins> the  <code>id</code> ,  <code>income</code>  and  <code>pep</code>  data from your  <code>BankRecords</code>  array (or <em>whatever</em> you named it) into your database table when called.<br />\n <code>insertRecords(BankRecords [] arrayName)</code>  方法以一个 BankRecord 对象数组作为参数，将参数中的所有 <code>id</code> ,  <code>income</code>  and  <code>pep</code>  数据插入到数据库中。</p>\n<p><code>retrieveRecords()</code>  will <ins>return</ins> a  <code>ResultSet</code>  <ins>object</ins> used for creating output. The result set contains record data including your  <code>id</code> ,  <code>income</code>  and  <code>pep</code>  table fields.<br />\n <code>retrieveRecords()</code>  将返回用于输出的 ResultSet 对象。 结果集为包括 <code>id</code> ,  <code>income</code>  and  <code>pep</code>  表字段的记录数据。</p>\n<p><strong>Code tweak</strong>: Make sure to <ins>sort</ins> the  <code>pep</code>  field in descending order to allow for premium loan candidates to appear first in the record set for reporting purposes (i.e., those with data values of “YES”). The resultset query string to build can be something like:<br />\n 代码调整：确保按降序对 <code>pep</code>  字段进行排序，以使保费贷款候选者在报告目的记录集中（即数据值为 “是” 的那些）首先出现。 要构建的结果集查询字符串可以类似于：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token string\">\"select pid, id,income, pep from yourTableName_tab order by pep desc\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>As a quick note:</p>\n<ul>\n<li>make sure to <ins>always close out</ins> of your connections and any statements when through with any processing!<br />\n 快速说明：在进行任何处理时，请确保始终关闭连接和所有语句！</li>\n<li>Make sure to include error trapping using  <code>SQLException</code>  handling for all your database operations and connection logic.<br />\n 确保为所有数据库操作和连接逻辑包括 SQLException 处理的错误捕获。</li>\n<li>Again, include messages to the console when your methods trigger. Ex. Table created, inserting records into database, etc.<br />\n 同样，当方法触发时，将消息输出到控制台。 例如 创建表，将记录插入数据库等</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>A super great resource to assist you with all your JDBC-CRUD operations for your methods can be found at this site: <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy50dXRvcmlhbHNwb2ludC5jb20vamRiYy8=\">http://www.tutorialspoint.com/jdbc/</span>, as well as the Chapter 22 PowerPoint from Gaddis.<br />\n 可以在以下站点找到一个超级有用的资源，可以为您的方法提供所有 JDBC-CRUD 操作的帮助，以及来自 Gaddis 的 Chapter 22 PowerPoint。<br />\nRemember though to phrase coding the best you can using your own object names, method naming and variable names, including coding syntax and even comments, if referencing any material from tutorialspoint, etc. so your lab work is unique.<br />\n 请记住，虽然最好用短语编码，但是如果引用了 tutorialspoint 的任何材料，则可以使用自己的对象名称，方法命名和变量名称（包括编码语法甚至注释）来使用，因此您的 lab 工作是独一无二的。</p>\n</blockquote>\n<h3 id=\"controllers-package\"><a class=\"anchor\" href=\"#controllers-package\">#</a>  <code>controllers</code>  Package</h3>\n<p>Next in the same manner as you created your  <code>models</code>  package, create a package called  <code>controllers</code>  and include a class called  <code>LoanProcessing</code>  for your package. Code your class file as follows.<br />\n 接下来，以与创建 <code>models</code>  包相同的方式，创建一个名为 <code>controllers</code>  的程序包，包含一个名为 <code>LoanProcessing</code>  的类。 编写您的类文件，如下所示</p>\n<p>For your  <code>LoanProcessing</code>  source file make sure first to extend  <code>BankRecords</code> .</p>\n<p>Simply follow thru with the following object creations and method calls in  <code>main</code> .</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>LoanProcessing.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">BankRecords</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BankRecords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>br<span class=\"token punctuation\">.</span><span class=\"token function\">readData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">DaoModel</span> dao <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DaoModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>dao<span class=\"token punctuation\">.</span><span class=\"token function\">createTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>dao<span class=\"token punctuation\">.</span><span class=\"token function\">insertRecords</span><span class=\"token punctuation\">(</span>robjs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// perform inserts</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">ResultSet</span> rs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>rs <span class=\"token operator\">=</span> dao<span class=\"token punctuation\">.</span><span class=\"token function\">retrieveRecords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">LoanView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">runView</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>Note you will error out on the  <code>extends</code>  clause and with the  <code>DaoModel dao</code>  opening line and the  <code>new LoanView().runView(rs);</code>  line of code added above, until you include appropriate imports and the LoanView class which will be performed next.  Go ahead and allow for your  <code>robjs</code>  array to be changed to a  <code>protected</code>  access mode as well.</p>\n</blockquote>\n<h4 id=\"main-code-breakdown\"><a class=\"anchor\" href=\"#main-code-breakdown\">#</a> Main code breakdown</h4>\n<p>Included in  <code>main()</code>  is your  <code>readData()</code>  method call which will process your  <code>BankRecord</code>  objects.<br />\n <code>main()</code>  中调用 <code>readData()</code>  方法，处理 <code>BankRecord</code>  对象。<br />\nThen the code <ins>instantiates</ins> a  <code>DaoModel</code>  object and triggers your  <code>createTable()</code>  method, your  <code>insertRecords(your BankRecords array object)</code>  method and your  <code>retrieveRecords()</code>  method in that order.<br />\n 然后，实例化一个 <code>DaoModel</code>  对象，并按此顺序触发 <code>createTable()</code> 、 <code>insertRecords(your BankRecords array object)</code>  和 <code>retrieveRecords()</code>  方法。<br />\nOf course you can comment out your  <code>createTable</code>  /  <code>insertRecords</code>  method call lines once you've accomplished that, to test how your output statements appear. Logic for that follows shortly.<br />\n 当然，完成后，可以注释掉 <code>createTable</code>  /  <code>insertRecords</code>  方法的调用行，以测试输出语句的显示方式。 逻辑很快就会出现。</p>\n<p>Once you have <ins>retrieved</ins> a recordset, your code will call a  <code>runView</code>  method from the  <code>LoanView</code>  class to print out all the records from the recordset, to a Java window which contains a  <code>JTable</code>  in a nice columnar format included with heading names for  <code>pid</code> ,  <code>id</code> ,  <code>income</code>  and  <code>pep</code>  and a nice title for the report!<br />\n 检索到记录集后，从 <code>LoanView</code>  类中调用 <code>runView</code>  方法，以将记录集中的所有记录打印到 Java 窗口。该窗口包含一个漂亮的列格式的 JTable，其中包含标题 pid，id， income 和 pep，以及标题！</p>\n<h3 id=\"views-package\"><a class=\"anchor\" href=\"#views-package\">#</a>  <code>views</code>  Package</h3>\n<p>Lastly now create a package named  <code>views</code>  and include a class called  <code>LoanView</code> . Code LoanView's  <code>runView</code>  method as follows (make sure to include appropriate imports)<br />\n 最后，创建一个名为 <code>views</code>  的包，并包括一个名为 <code>LoanView</code>  的类。编写 <code>runView</code>  方法（确保包含适当的导入）如下。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>LoanView.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">runView</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResultSet</span> rs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">// instantiate vector objects to hold column/row data for JTable</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token class-name\">Vector</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Vector</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Vector</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token class-name\">Vector</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> column <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token class-name\">ResultSetMetaData</span> metaData <span class=\"token operator\">=</span> rs<span class=\"token punctuation\">.</span><span class=\"token function\">getMetaData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> columns <span class=\"token operator\">=</span> metaData<span class=\"token punctuation\">.</span><span class=\"token function\">getColumnCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token comment\">// get column names from table!</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> cols <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> columns<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\tcols <span class=\"token operator\">=</span> metaData<span class=\"token punctuation\">.</span><span class=\"token function\">getColumnName</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\tcolumn<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>cols<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token comment\">// get row data from table!</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t<span class=\"token class-name\">Vector</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> row <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>columns<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> columns<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\trow<span class=\"token punctuation\">.</span><span class=\"token function\">addElement</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">.</span><span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\tdata<span class=\"token punctuation\">.</span><span class=\"token function\">addElement</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token class-name\">DefaultTableModel</span> model <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultTableModel</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> column<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token class-name\">JTable</span> table <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JTable</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token class-name\">JFrame</span> frame <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JFrame</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Loan Details\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\tframe<span class=\"token punctuation\">.</span><span class=\"token function\">setSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">700</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\tframe<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">JScrollPane</span><span class=\"token punctuation\">(</span>table<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\tframe<span class=\"token punctuation\">.</span><span class=\"token function\">setDefaultCloseOperation</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\tframe<span class=\"token punctuation\">.</span><span class=\"token function\">pack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\tframe<span class=\"token punctuation\">.</span><span class=\"token function\">setVisible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\trs<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//close ResultSet instance </span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"code-breakdown\"><a class=\"anchor\" href=\"#code-breakdown\">#</a> Code breakdown</h4>\n<p>To view the output in a nice table view, a  <code>JTable</code>  object is created to take in rows and columns (column names retrieved from generated metadata) dynamically from your  <code>ResultSet</code>  (passed through the  <code>runView</code>  method's parameter), which stores the data each as a  <code>Vector</code>  which becomes displayed in a  <code>JFrame</code>  which is part of Java's Swing API.<br />\n 为了在漂亮的表格视图中查看输出，创建了一个 JTable 对象，以从 ResultSet（通过 runView 方法传递的参数）动态地获取行和列（从生成的元数据检索的列名），该数据集将每个数据存储为一个 Vector，显示在 Java 的 Swing API 的 JFrame 中。</p>\n<p>Now before running your code from your  <code>LoanProcessing</code>  main file, go back into your  <code>LoanProcessing</code>  file and import the needed package/class name to clear your error as noted before. To finish, run your  <code>LoanProcessing</code>  source file to complete your lab work and observe your output.<br />\n 现在，从 LoanProcessing 主文件运行代码之前，请回到 LoanProcessing 文件并导入所需的包 / 类名称，以清除错误（如前所述）。 最后，运行 LoanProcessing 源文件以完成实验工作并观察输出。</p>\n<h2 id=\"extra-credit-options\"><a class=\"anchor\" href=\"#extra-credit-options\">#</a> Extra Credit options</h2>\n<ul>\n<li>Include SQL Prepared statements when inserting records (+5 points)<br />\n 插入记录时包含 SQL 预处理语句</li>\n<li>Show console output of Loan Analysis Report detailed data + a report title (+5 points)<br />\n 显示 “贷款分析报告” 详细信息的控制台输出 + 报告标题</li>\n</ul>\n<p>Or you for extra credit you may choose the following option<br />\n 或者，您可以选择以下选项来获得额外的积分，</p>\n<ul>\n<li>Serialize and deserialize  <code>BankRecord</code>  objects using the  <code>java.util.Map</code>  class. (+10 points)<br />\n 使用 java.util.Map 类序列化和反序列化 BankRecord 对象。<br />\nName your serializable file  <code>bankrecords.ser</code> .<br />\n 将您的可序列化文件命名为 bankrecords.ser。<br />\nMake your application sleep for 5 seconds between the processes.<br />\n 使您的应用程序在过程之间休眠 5 秒钟。<br />\nDisplay to the console, the time difference between the serialization and deserialization processes. <br />\n在控制台显示，序列化、反序列化过程的时间差。</li>\n</ul>\n<blockquote>\n<p>Include a zip file of <ins>all</ins> your project source code (new and old), your  <code>.csv</code>  file and a seperate file of your snapshots of your <ins>console at runtime</ins> which must include a <ins>table creation</ins> message, an <ins>insertion message</ins> and a snapshot of your  <code>JTable</code>  showing the first few rows of your record results into a Word doc file into BB for credit. Include all your source code as well into your Word doc file. If you have any extra credit, snapshot that as well and label your extra snapshot(s) accordingly.  Sample displays of output follows…</p>\n</blockquote>\n<h2 id=\"sample-run\"><a class=\"anchor\" href=\"#sample-run\">#</a> Sample run</h2>\n<p><img data-src=\"https://i.loli.net/2020/11/15/eso34QmnY8B7GiO.png\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/11/15/ikKLtywHmnA41ZT.png\" alt=\"\" /></p>\n<h2 id=\"code\"><a class=\"anchor\" href=\"#code\">#</a> code</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>LoanProcessing.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">controllers</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResultSet</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">models<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DaoModel</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">records<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BankRecords</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">views<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LoanView</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoanProcessing</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BankRecords</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token number\">1L</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token class-name\">BankRecords</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BankRecords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    br<span class=\"token punctuation\">.</span><span class=\"token function\">readData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nSleep for 5 seconds...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">deserialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token class-name\">DaoModel</span> dao <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DaoModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      dao<span class=\"token punctuation\">.</span><span class=\"token function\">createTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      dao<span class=\"token punctuation\">.</span><span class=\"token function\">insertRecords</span><span class=\"token punctuation\">(</span>robjs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token class-name\">ResultSet</span> rs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      rs <span class=\"token operator\">=</span> dao<span class=\"token punctuation\">.</span><span class=\"token function\">retrieveRecords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nCreating records table...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token keyword\">new</span> <span class=\"token class-name\">LoanView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">runView</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Records table has been shown.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>    </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    start <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Serializing BankRecord objects...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">BankRecords</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">BankRecords</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\">//Adding elements to HashMap</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> robjs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>      map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>          <span class=\"token class-name\">FileOutputStream</span> fos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bankrecords.ser\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>          <span class=\"token class-name\">ObjectOutputStream</span> oos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span>fos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         </pre></td></tr><tr><td data-num=\"58\"></td><td><pre>          oos<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>          oos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>          fos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>          <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Serialized data is saved in bankrecords.ser successfully.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>          e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deserialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Deserializing bankrecords.ser...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>          <span class=\"token class-name\">FileInputStream</span> fis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bankrecords.ser\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>          <span class=\"token class-name\">ObjectInputStream</span> ois <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span>fis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>          ois<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>          ois<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>          fis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>          <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Deserialized bankrecords.ser successfully.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>          <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nThe time difference between the serialization and deserialization processes: \"</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                    <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"ms\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>          e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>      e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>DaoModel.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">models</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PreparedStatement</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResultSet</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Statement</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">records<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BankRecords</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DaoModel</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">//Declare DB objects </span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token class-name\">DBConnect</span> conn <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token class-name\">Statement</span> stmt <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token class-name\">PreparedStatement</span> pstmt <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token class-name\">String</span> table_name <span class=\"token operator\">=</span> <span class=\"token string\">\"xxxx_lab4\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token comment\">// constructor</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">DaoModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//create db object instance</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    conn <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DBConnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token comment\">// CREATE TABLE METHOD</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">createTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token comment\">// Open a connection</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Connecting to database to create Table...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token class-name\">Connection</span> cc <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Connected database successfully...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token comment\">// Execute create query</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nCreating table in given database...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      stmt <span class=\"token operator\">=</span> cc<span class=\"token punctuation\">.</span><span class=\"token function\">createStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> <span class=\"token string\">\"CREATE TABLE \"</span> <span class=\"token operator\">+</span> table_name <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                    <span class=\"token string\">\"(pid INTEGER not NULL AUTO_INCREMENT, \"</span> <span class=\"token operator\">+</span> </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                  <span class=\"token string\">\" id VARCHAR(10), \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token string\">\" income numeric(8,2), \"</span> <span class=\"token operator\">+</span> </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token string\">\" pep VARCHAR(3), \"</span> <span class=\"token operator\">+</span> </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>          <span class=\"token string\">\" PRIMARY KEY ( pid ), UNIQUE( id ))\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      stmt<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"46\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Created table in given database...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"48\"></td><td><pre>      conn<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//close db connection </span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> se<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// Handle errors for JDBC</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>se<span class=\"token punctuation\">.</span><span class=\"token function\">getErrorCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1050</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Created table in given database...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>      <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        se<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token comment\">// INSERT INTO METHOD</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insertRecords</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BankRecords</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> robjs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token class-name\">Connection</span> cc <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    cc<span class=\"token punctuation\">.</span><span class=\"token function\">setAutoCommit</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>      <span class=\"token comment\">// Execute a query</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nInserting records into the table...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"66\"></td><td><pre>      <span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> <span class=\"token string\">\"INSERT INTO \"</span> <span class=\"token operator\">+</span> table_name <span class=\"token operator\">+</span> <span class=\"token string\">\"(id, income, pep) VALUES (?, ?, ?) ON DUPLICATE KEY UPDATE income=income\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>      pstmt <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>      <span class=\"token comment\">// Include all object data to the database table</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> robjs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token comment\">// finish string assignment below to insert all array object data </span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token comment\">// (id, income, pep) into your database table       </span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        pstmt<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        pstmt<span class=\"token punctuation\">.</span><span class=\"token function\">setDouble</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getIncome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        pstmt<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getPep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        pstmt<span class=\"token punctuation\">.</span><span class=\"token function\">addBatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"79\"></td><td><pre>      <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> pstmt<span class=\"token punctuation\">.</span><span class=\"token function\">executeBatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"81\"></td><td><pre>      cc<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"83\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token string\">\" Records inserted!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"85\"></td><td><pre>      pstmt<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>      cc<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//close db connection </span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> se<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// Handle errors for JDBC</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>      cc<span class=\"token punctuation\">.</span><span class=\"token function\">rollback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>      se<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"93\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">ResultSet</span> <span class=\"token function\">retrieveRecords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token class-name\">ResultSet</span> rs <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nQuerying records from the database...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"98\"></td><td><pre>      stmt <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">createStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>      <span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> <span class=\"token string\">\"SELECT pid, id, income, pep from \"</span> <span class=\"token operator\">+</span> table_name <span class=\"token operator\">+</span> <span class=\"token string\">\" order by pep desc\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>      rs <span class=\"token operator\">=</span> stmt<span class=\"token punctuation\">.</span><span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"103\"></td><td><pre>      conn<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> se<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>      se<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    <span class=\"token keyword\">return</span> rs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>DBConnect.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">models</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DBConnect</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// Code database URL</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> DB_URL <span class=\"token operator\">=</span> <span class=\"token string\">\"jdbc:mysql://www.xxxxx.net:3307/510labs?autoReconnect=true&amp;useSSL=false&amp;rewriteBatchedStatements=true\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// Database credentials</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> USER <span class=\"token operator\">=</span> <span class=\"token string\">\"db\"</span><span class=\"token punctuation\">,</span> PASS <span class=\"token operator\">=</span> <span class=\"token string\">\"1213\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Connection</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>DB_URL<span class=\"token punctuation\">,</span> USER<span class=\"token punctuation\">,</span> PASS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>BankRecords.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">records</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">File</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Serializable</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BankRecords</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Client</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">//setup static objects for IO processing</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token number\">1L</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">//array of BankRecords objects</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">BankRecords</span> robjs<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BankRecords</span><span class=\"token punctuation\">[</span><span class=\"token number\">600</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">//arraylist to hold spreadsheet rows &amp; columns</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">//instance fields</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> sex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> region<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> income<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> married<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> children<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> car<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> save_act<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> current_act<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> mortgage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> pep<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">readData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">BufferedReader</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">//initialize reader object and set file path to root of project</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bank-Detail.csv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token class-name\">String</span> line<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token comment\">//read each record in csv file</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>line <span class=\"token operator\">=</span> br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token comment\">//parse each record in csv file by a comma ( , )</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token comment\">//into a list stored in the arraylist-> Arrays</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                array<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"There was a problem loading the file\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token function\">processData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//call function for processing record data</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">processData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token comment\">//create index for array while iterating thru arraylist</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token keyword\">int</span> idx<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token comment\">//create for each loop to cycle thru arraylist of values </span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token comment\">//and PASS that data into your record objects' setters </span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> rowData<span class=\"token operator\">:</span> array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token comment\">//initialize array of objects</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            robjs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BankRecords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token comment\">//call setters below and populate them, item by item</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            robjs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//get 1st column</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            robjs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//get 2nd column</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            robjs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setSex</span><span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            robjs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setRegion</span><span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            robjs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setIncome</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseDouble</span><span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            robjs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setMarried</span><span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            robjs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setChildren</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            robjs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setCar</span><span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            robjs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setSave_act</span><span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            robjs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setCurrent_act</span><span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            robjs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setMortgage</span><span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            robjs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setPep</span><span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token comment\">/*continue processing arraylist item values into each array object -> robjs[] by index*/</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            idx<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token comment\">//printData();  //call function to print objects held in memory       </span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token comment\">//1. Set appropriate headings for displaying first 25 records</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token comment\">//2. Create for loop and print each record objects instance data </span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token comment\">//3. Within for loop use appropriate formatting techniques to print out record detail  </span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token comment\">//Set heading</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"First 25 Client details:\\n\\n%-10s\\t%-10s\\t%-10s\\t%-10s\\t%-10s\\t%-10s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ID\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Age\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Sex\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Region\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Income\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Mortgage\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">25</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"98\"></td><td><pre>            <span class=\"token class-name\">String</span> s<span class=\"token operator\">=</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%-10s\\t%-10d\\t%-10s\\t%-10s\\t%-10.2f\\t%-10s\"</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"99\"></td><td><pre>                    robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRegion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getIncome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMortgage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>   </pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>     * @return the id</pre></td></tr><tr><td data-num=\"107\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"112\"></td><td><pre>     * @param id the id to set</pre></td></tr><tr><td data-num=\"113\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"118\"></td><td><pre>     * @return the age</pre></td></tr><tr><td data-num=\"119\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        <span class=\"token keyword\">return</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"124\"></td><td><pre>     * @param age the age to set</pre></td></tr><tr><td data-num=\"125\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"130\"></td><td><pre>     * @return the sex</pre></td></tr><tr><td data-num=\"131\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getSex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>        <span class=\"token keyword\">return</span> sex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"136\"></td><td><pre>     * @param sex the sex to set</pre></td></tr><tr><td data-num=\"137\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setSex</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> sex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sex <span class=\"token operator\">=</span> sex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"142\"></td><td><pre>     * @return the region</pre></td></tr><tr><td data-num=\"143\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getRegion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>        <span class=\"token keyword\">return</span> region<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"148\"></td><td><pre>     * @param region the region to set</pre></td></tr><tr><td data-num=\"149\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setRegion</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> region<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>region <span class=\"token operator\">=</span> region<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"154\"></td><td><pre>     * @return the income</pre></td></tr><tr><td data-num=\"155\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">getIncome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>        <span class=\"token keyword\">return</span> income<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"160\"></td><td><pre>     * @param income the income to set</pre></td></tr><tr><td data-num=\"161\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setIncome</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> income<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>income <span class=\"token operator\">=</span> income<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"166\"></td><td><pre>     * @return the married</pre></td></tr><tr><td data-num=\"167\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getMarried</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>        <span class=\"token keyword\">return</span> married<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"172\"></td><td><pre>     * @param married the married to set</pre></td></tr><tr><td data-num=\"173\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setMarried</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> married<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>married <span class=\"token operator\">=</span> married<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"178\"></td><td><pre>     * @return the children</pre></td></tr><tr><td data-num=\"179\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getChildren</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>        <span class=\"token keyword\">return</span> children<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"184\"></td><td><pre>     * @param children the children to set</pre></td></tr><tr><td data-num=\"185\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setChildren</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> children<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> children<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"190\"></td><td><pre>     * @return the car</pre></td></tr><tr><td data-num=\"191\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>        <span class=\"token keyword\">return</span> car<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"196\"></td><td><pre>     * @param car the car to set</pre></td></tr><tr><td data-num=\"197\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setCar</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> car<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>car <span class=\"token operator\">=</span> car<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"202\"></td><td><pre>     * @return the save_act</pre></td></tr><tr><td data-num=\"203\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getSave_act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>        <span class=\"token keyword\">return</span> save_act<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"208\"></td><td><pre>     * @param save_act the save_act to set</pre></td></tr><tr><td data-num=\"209\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setSave_act</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> save_act<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>save_act <span class=\"token operator\">=</span> save_act<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"214\"></td><td><pre>     * @return the current_act</pre></td></tr><tr><td data-num=\"215\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getCurrent_act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>        <span class=\"token keyword\">return</span> current_act<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"219\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"220\"></td><td><pre>     * @param current_act the current_act to set</pre></td></tr><tr><td data-num=\"221\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setCurrent_act</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> current_act<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"223\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>current_act <span class=\"token operator\">=</span> current_act<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"224\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"226\"></td><td><pre>     * @return the mortgage</pre></td></tr><tr><td data-num=\"227\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"228\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getMortgage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"229\"></td><td><pre>        <span class=\"token keyword\">return</span> mortgage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"230\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"231\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"232\"></td><td><pre>     * @param mortgage the mortgage to set</pre></td></tr><tr><td data-num=\"233\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"234\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setMortgage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> mortgage<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"235\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mortgage <span class=\"token operator\">=</span> mortgage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"236\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"237\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"238\"></td><td><pre>     * @return the pep</pre></td></tr><tr><td data-num=\"239\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"240\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getPep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"241\"></td><td><pre>        <span class=\"token keyword\">return</span> pep<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"242\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"243\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"244\"></td><td><pre>     * @param pep the pep to set</pre></td></tr><tr><td data-num=\"245\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"246\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setPep</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> pep<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"247\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pep <span class=\"token operator\">=</span> pep<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"248\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>   </pre></td></tr><tr><td data-num=\"249\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Client.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">records</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Client</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">readData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//read file detail</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">processData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//process file detail</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//print file detail</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>LoanView.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">views</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResultSet</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResultSetMetaData</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Vector</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>swing<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JFrame</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>swing<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JScrollPane</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>swing<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JTable</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>swing<span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DefaultTableModel</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoanView</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">runView</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResultSet</span> rs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// instantiate vector objects to hold column/row data for JTable</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token class-name\">Vector</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Vector</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Vector</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token class-name\">Vector</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> column <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token class-name\">ResultSetMetaData</span> metaData <span class=\"token operator\">=</span> rs<span class=\"token punctuation\">.</span><span class=\"token function\">getMetaData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token keyword\">int</span> columns <span class=\"token operator\">=</span> metaData<span class=\"token punctuation\">.</span><span class=\"token function\">getColumnCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token comment\">// get column names from table!</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token class-name\">String</span> cols <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> columns<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        cols <span class=\"token operator\">=</span> metaData<span class=\"token punctuation\">.</span><span class=\"token function\">getColumnName</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        column<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>cols<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token comment\">// get row data from table!</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">Vector</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> row <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>columns<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> columns<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>          row<span class=\"token punctuation\">.</span><span class=\"token function\">addElement</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">.</span><span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        data<span class=\"token punctuation\">.</span><span class=\"token function\">addElement</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token class-name\">DefaultTableModel</span> model <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultTableModel</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> column<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token class-name\">JTable</span> table <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JTable</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token class-name\">JFrame</span> frame <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JFrame</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Loan Details\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      frame<span class=\"token punctuation\">.</span><span class=\"token function\">setSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">700</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      frame<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">JScrollPane</span><span class=\"token punctuation\">(</span>table<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      frame<span class=\"token punctuation\">.</span><span class=\"token function\">setDefaultCloseOperation</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>      frame<span class=\"token punctuation\">.</span><span class=\"token function\">pack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>      frame<span class=\"token punctuation\">.</span><span class=\"token function\">setVisible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      rs<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//close ResultSet instance </span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>","tags":["计算机科学","Master of Software Engineering","ITMD 510. Object-Oriented App Develop","Java"]},{"id":"https://shoka.lostyu.me/computer-science/mse/itmd-510/week-11/","url":"https://shoka.lostyu.me/computer-science/mse/itmd-510/week-11/","title":"Week 11. Java Database Connectivity","date_published":"2020-11-08T08:11:12.000Z","content_html":"<h1 id=\"notes\"><a class=\"anchor\" href=\"#notes\">#</a> Notes</h1>\n<h2 id=\"passing-an-sql-statement-to-the-dbms\"><a class=\"anchor\" href=\"#passing-an-sql-statement-to-the-dbms\">#</a> Passing an SQL Statement to the DBMS</h2>\n<p>Once you have established a connection, you must get a reference to a  <code>Statement</code>  object before you can issue SQL statements to the DBMS</p>\n<ul>\n<li>A  <code>Statement</code>  object has an  <code>executeQuery</code>  method that returns a <ins>reference</ins> to a  <code>ResultSet</code>  object</li>\n<li>A  <code>ResultSet</code>  object contains the <ins>results</ins> of the query</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Connection</span> conn <span class=\"token operator\">=</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>DB_URL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Statement</span> stmt <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span><span class=\"token function\">createStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">String</span> sqlStatement <span class=\"token operator\">=</span> <span class=\"token string\">\"SELECT Description FROM Coffee\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">ResultSet</span> result <span class=\"token operator\">=</span> stmt<span class=\"token punctuation\">.</span><span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span>sqlStatement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"getting-a-row-from-the-resultset-object\"><a class=\"anchor\" href=\"#getting-a-row-from-the-resultset-object\">#</a> Getting a Row from the ResultSet Object</h3>\n<ul>\n<li>\n<p>A  <code>ResultSet</code>  object has an internal <ins>cursor</ins></p>\n<ul>\n<li>Points to a specific row in the  <code>ResultSet</code></li>\n<li>The row to which it points is the  <code>current</code>  row</li>\n<li>Initially positioned just before the first row</li>\n<li>Can be moved from row to row to examine all rows<br />\n<img data-src=\"https://i.loli.net/2020/11/15/NvFKquzEPVAOtZy.png\" alt=\"\" /></li>\n</ul>\n</li>\n<li>\n<p>A  <code>ResultSet</code>  object's next method  <code>result.next();</code>  moves the cursor to the next row in the  <code>ResultSet</code></p>\n<ul>\n<li>moves to first row in a newly created  <code>ResultSet</code></li>\n<li>moves to the next row each time it is called<br />\n<img data-src=\"https://i.loli.net/2020/11/15/YEXCB21xOAfhM7w.png\" alt=\"\" /></li>\n</ul>\n</li>\n<li>\n<p>A  <code>ResultSet</code>  object's next method returns a Boolean value</p>\n<ul>\n<li><code>true</code>  if successfully moved to the next row</li>\n<li><code>false</code>  if there are no more rows</li>\n</ul>\n</li>\n<li>\n<p>A while loop can be used to move through all the rows of a newly created  <code>ResultSet</code></p>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">// Process the current row.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"getting-columns-in-a-resultset-object\"><a class=\"anchor\" href=\"#getting-columns-in-a-resultset-object\">#</a> Getting Columns in a ResultSet Object</h3>\n<ul>\n<li>You use one of the  <code>ResultSet</code>  object's  <code>get</code>  methods to retrieve the contents of a specific column in the current row.</li>\n<li>Can pass an argument for <ins>either</ins> the column number or the column name</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Description\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">getDouble</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ProdNum\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://i.loli.net/2020/11/15/CP8dHcEF3L6lifJ.png\" alt=\"\" /></p>\n<h2 id=\"inserting-rows-with-jdbc\"><a class=\"anchor\" href=\"#inserting-rows-with-jdbc\">#</a> Inserting rows with JDBC</h2>\n<p>To issue an  <code>INSERT</code>  statement, you must get a reference to a  <code>Statement</code>  object</p>\n<ul>\n<li>The  <code>Statement</code>  object has an  <code>executeUpdate</code>  method</li>\n<li>Accepts a string containing the SQL INSERT statement as an argument</li>\n<li>Returns an  <code>int</code>  value for the number of rows inserted</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> sqlStatement <span class=\"token operator\">=</span> <span class=\"token string\">\"INSERT INTO Coffee \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                      <span class=\"token string\">\"(ProdNum, Price, Description)\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                      <span class=\"token string\">\" VALUES \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                      <span class=\"token string\">\"('22-001', 8.65, 'Honduran Dark')\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> rows <span class=\"token operator\">=</span> stmt<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span>sqlStatement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>rows</code>  should contain the  <code>value 1</code> , indicating that one row was inserted</p>\n<h2 id=\"updating-rows-with-jdbc\"><a class=\"anchor\" href=\"#updating-rows-with-jdbc\">#</a> Updating Rows with JDBC</h2>\n<p>To issue an  <code>UPDATE</code>  statement, you must get a reference to a  <code>Statement</code>  object</p>\n<ul>\n<li>The  <code>Statement</code>  object has an  <code>executeUpdate</code>  method</li>\n<li>Accepts a string containing the SQL  <code>UPDATE</code>  statement as an argument</li>\n<li>Returns an  <code>int</code>  value for the number of rows affected</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Example</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> sqlStatement <span class=\"token operator\">=</span> <span class=\"token string\">\"UPDATE Coffee \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                      <span class=\"token string\">\"SET Price = 9.95\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                      <span class=\"token string\">\" WHERE \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                      <span class=\"token string\">\"Description = 'Brazilian Decaf'\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> rows <span class=\"token operator\">=</span> stmt<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span>sqlStatement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><code>rows</code>  indicates the number of rows that were changed</li>\n</ul>\n<h2 id=\"deleting-rows-with-jdbc\"><a class=\"anchor\" href=\"#deleting-rows-with-jdbc\">#</a> Deleting Rows with JDBC</h2>\n<p>To issue a  <code>DELETE</code>  statement, you must get a reference to a  <code>Statement</code>  object</p>\n<ul>\n<li>The  <code>Statement</code>  object has an  <code>executeUpdate</code>  method</li>\n<li>Accepts a string containing the SQL  <code>DELETE</code>  statement as an argument</li>\n<li>Returns an  <code>int</code>  value for the number of rows that were deleted</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Example</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> sqlStatement <span class=\"token operator\">=</span> <span class=\"token string\">\"DELETE FROM Coffee \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t       <span class=\"token string\">\"WHERE ProdNum = '20-001'\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> rows <span class=\"token operator\">=</span> stmt<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span>sqlStatement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><code>rows</code>  indicates the number of rows that were deleted</li>\n</ul>\n<h2 id=\"creating-a-new-database-with-java-db\"><a class=\"anchor\" href=\"#creating-a-new-database-with-java-db\">#</a> Creating a New Database with Java DB</h2>\n<p>The  <code>;create=true</code>  attribute creates a new database when appended to the database URL</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">\"jdbc:derby:EntertainmentDB;create=true\"</span></pre></td></tr></table></figure><ul>\n<li>Creates an empty database named  <code>EntertainmentDB</code></li>\n<li>The  <code>CREATE TABLE</code>  statement can be used to create tables</li>\n<li>Java DB creates a folder with the name of the database on your system</li>\n<li>Delete the database folder to delete the database</li>\n</ul>\n<h2 id=\"scrollable-result-sets\"><a class=\"anchor\" href=\"#scrollable-result-sets\">#</a> Scrollable Result Sets</h2>\n<p>By default, a ResultSet object is created with a read-only concurrency level and the cursor is limited to forward movement</p>\n<p>A scrollable result set can be created with the overloaded version of the  <code>Connection</code>  object's  <code>createStatement</code>  method</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>conn<span class=\"token punctuation\">.</span><span class=\"token function\">createStatement</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> concur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><code>type</code>  is a constant for the scrolling type</li>\n<li><code>concur</code>  is a constant for the concurrency level</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Example</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Statement</span> stmt <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   conn<span class=\"token punctuation\">.</span><span class=\"token function\">createStatement</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResultSet</span><span class=\"token punctuation\">.</span>TYPE_SCROLL_INSENSITIVE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                        <span class=\"token class-name\">ResultSet</span><span class=\"token punctuation\">.</span>CONCUR_READ_ONLY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>Creates a scrollable result set that is read-only and insensitive to database changes</li>\n</ul>\n<h3 id=\"the-resultset-scrolling-types\"><a class=\"anchor\" href=\"#the-resultset-scrolling-types\">#</a> The ResultSet Scrolling Types</h3>\n<ul>\n<li>\n<p><code>ResultSet.TYPE_FORWARD_ONLY</code></p>\n<ul>\n<li>Default scrolling type</li>\n<li>Cursor moves forward only</li>\n</ul>\n</li>\n<li>\n<p><code>ResultSet.TYPE_SCROLL_INSENSITIVE</code></p>\n<ul>\n<li>Cursor moves both forward and backward</li>\n<li>Changes made to the database do not appear</li>\n</ul>\n</li>\n<li>\n<p><code>ResultSet.TYPE_SCROLL_SENSITIVE</code></p>\n<ul>\n<li>Cursor moves both forward and backward</li>\n<li>Changes made to the database appear as soon as they are made</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"the-resultset-concurrency-levels\"><a class=\"anchor\" href=\"#the-resultset-concurrency-levels\">#</a> The ResultSet Concurrency Levels</h3>\n<ul>\n<li>\n<p><code>ResultSet.CONCUR_READ_ONLY</code></p>\n<ul>\n<li>Default concurrency level</li>\n<li>Read-only version of data from the database</li>\n<li>Cannot change database by altering result set</li>\n</ul>\n</li>\n<li>\n<p><code>ResultSet.CONCUR_UPDATEABLE</code></p>\n<ul>\n<li>Result set is updateable</li>\n<li>Changes can be made to the result set and saved to the database</li>\n<li>Uses methods that allow changes to be made to the database without issuing SQL statements</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"resultset-navigation-methods\"><a class=\"anchor\" href=\"#resultset-navigation-methods\">#</a> ResultSet Navigation Methods</h2>\n<ul>\n<li>\n<p><code>first()</code> <br />\nMoves the cursor to the first row</p>\n</li>\n<li>\n<p><code>last()</code> <br />\nMoves the cursor to the last row</p>\n</li>\n<li>\n<p><code>next()</code> <br />\nMoves the cursor to the next row</p>\n</li>\n<li>\n<p><code>previous()</code> <br />\nMoves the cursor to the previous row</p>\n</li>\n<li>\n<p><code>relative(rows)</code> <br />\nMoves the cursor the number specified by the  <code>rows</code>  argument relative to the current row</p>\n<ul>\n<li>A positive  <code>rows</code>  value will move the cursor forward</li>\n<li>A negative  <code>rows</code>  value will move the cursor backward</li>\n</ul>\n</li>\n<li>\n<p><code>absolute(rows)</code> <br />\nMoves the cursor to the row number specified by the  <code>rows</code>  argument</p>\n<ul>\n<li>A  <code>rows</code>  value of 1 will move the cursor to the first row</li>\n<li>A  <code>rows</code>  value of 2 will move cursor to the second row</li>\n<li>And so on until the last row</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"determining-the-number-of-rows-in-a-result-set\"><a class=\"anchor\" href=\"#determining-the-number-of-rows-in-a-result-set\">#</a> Determining the Number of Rows in a Result Set</h3>\n<p>ResultSet navigation methods can be used to determine the number of rows in a result set</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Example</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">last</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\t\t    <span class=\"token comment\">// Move to the last row</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> numRows <span class=\"token operator\">=</span> resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">getRow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Get the last row's number and store the value</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t    <span class=\"token comment\">// Move back to the first row</span></pre></td></tr></table></figure><h2 id=\"result-set-metadata\"><a class=\"anchor\" href=\"#result-set-metadata\">#</a> Result Set Metadata</h2>\n<ul>\n<li>\n<p>Metadata refers to data that describes other data</p>\n</li>\n<li>\n<p>A  <code>ResultSet</code>  object has metadata that describes a result set</p>\n</li>\n<li>\n<p>Can be used to determine many things about a result set</p>\n<ul>\n<li>Number of columns</li>\n<li>Column names</li>\n<li>Column data types</li>\n<li>And much more</li>\n</ul>\n</li>\n<li>\n<p>Useful for submitting SQL queries in applications</p>\n</li>\n<li>\n<p><code>ResultSetMetaData</code>  is an interface in the  <code>java.sql</code>  package</p>\n</li>\n<li>\n<p>The  <code>getMetaData</code>  method of a  <code>ResultSet</code>  object returns a reference to a  <code>ResultSetMetaData</code>  object.</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ResultSetMetaData</span> meta <span class=\"token operator\">=</span> resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">getMetaData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>Creates a ResultSetMetaData object reference variable named meta</li>\n</ul>\n<h3 id=\"a-few-resultsetmetadata-methods\"><a class=\"anchor\" href=\"#a-few-resultsetmetadata-methods\">#</a> A Few  <code>ResultSetMetaData</code>  Methods</h3>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>int getColumnCount()</code></td>\n<td>Returns the number of columns in the result set.</td>\n</tr>\n<tr>\n<td><code>String getColumnName(int col)</code></td>\n<td>Returns the name of the column specified by the integer  <code>col</code> . The first column is column 1.</td>\n</tr>\n<tr>\n<td><code>String getColumnTypeName(int col)</code></td>\n<td>Returns the name of the data type of the column specified by the integer  <code>col</code> . The first column is column 1. The data type name returned is the database-specific SQL data type.</td>\n</tr>\n<tr>\n<td><code>int getColumnDisplaySize(int col)</code></td>\n<td>Returns the display width, in characters, of the column specified by the integer  <code>col</code> . The first column is column 1.</td>\n</tr>\n<tr>\n<td><code>String getTableName(int col)</code></td>\n<td>Returns the name of the table associated with the column specified by the integer  <code>col</code> . The first column is column 1.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"the-jtable-class\"><a class=\"anchor\" href=\"#the-jtable-class\">#</a> The  <code>JTable</code>  Class</h2>\n<p>The  <code>JTable</code>  class is a Swing component that displays data in a two-dimensional table</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Jtable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> rowData<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> colNames<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li><code>rowData</code>  is a two-dimensional array of objects\n<ul>\n<li>Contains data that will be displayed in the table</li>\n<li>Each row becomes a row of data in the table</li>\n<li>Each column becomes a column of data in the table</li>\n<li><code>JTable</code>  calls  <code>toString</code>  method of each object to get values</li>\n</ul>\n</li>\n<li><code>colNames</code>  is a one-dimensional array of objects\n<ul>\n<li>Contains the column names to display</li>\n<li><code>JTable</code>  calls  <code>toString</code>  method of each object to get value</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"setting-up-a-simple-jtable-component\"><a class=\"anchor\" href=\"#setting-up-a-simple-jtable-component\">#</a> Setting Up a Simple JTable Component</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> colNames <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"Name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Telephone\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> rowData <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"Jean\"</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">\"555-2222\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"Tim\"</span><span class=\"token punctuation\">,</span>   <span class=\"token string\">\"555-1212\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"Matt\"</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">\"555-9999\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"Rose\"</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">\"555-4545\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"Geri\"</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">\"555-5214\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"Shawn\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"555-7821\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"Renee\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"555-9640\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"Joe\"</span><span class=\"token punctuation\">,</span>   <span class=\"token string\">\"555-8657\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token class-name\">JTable</span> myTable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JTable</span><span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">,</span> colNames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token class-name\">JScrollPane</span> scrollPane <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JScrollPane</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JTable</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://i.loli.net/2020/11/15/d9WPNufSVvlmgpI.png\" alt=\"\" /></p>\n<ul>\n<li>The figure shows an example of how the table appears in a frame</li>\n</ul>\n<h3 id=\"displaying-query-results-in-a-jtable\"><a class=\"anchor\" href=\"#displaying-query-results-in-a-jtable\">#</a> Displaying Query Results in a JTable</h3>\n<p><img data-src=\"https://i.loli.net/2020/11/15/f9yg1wdB2CsochT.png\" alt=\"\" /><br />\nThis window appears first<br />\nThe user enters a  <code>SELECT</code>  statement and clicks the  <code>Submit</code>  button</p>\n<p><img data-src=\"https://i.loli.net/2020/11/15/U4RCLgNdBzOWimq.png\" alt=\"\" /><br />\nThis window appears next<br />\nIt displays the results in a  <code>Jtable</code>  component</p>\n<h2 id=\"jdbc-auto-commit-mode\"><a class=\"anchor\" href=\"#jdbc-auto-commit-mode\">#</a> JDBC Auto Commit Mode</h2>\n<ul>\n<li>By default, the JDBC Connection class operates in auto commit mode.</li>\n<li>In auto commit mode\n<ul>\n<li>All updates that are made to the database are made permanent as soon as they are executed.</li>\n</ul>\n</li>\n<li>When auto commit mode is turned off\n<ul>\n<li>Changes do not become permanent until a commit command is executed</li>\n<li>A rollback command can be used to undo changes</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"jdbc-transaction-methods\"><a class=\"anchor\" href=\"#jdbc-transaction-methods\">#</a> JDBC Transaction Methods</h2>\n<ul>\n<li>\n<p>To turn auto commit mode off</p>\n<ul>\n<li>Call the  <code>Connection</code>  class's  <code>setAutoCommit</code>  method</li>\n<li>Pass the argument  <code>false</code></li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>conn<span class=\"token punctuation\">.</span><span class=\"token function\">setAutoCommit</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>To execute a commit command</p>\n<ul>\n<li>Call the  <code>Connection</code>  class's  <code>commit</code>  method</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>conn<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>To execute a rollback command</p>\n<ul>\n<li>Call the  <code>Connection</code>  class's  <code>rollback</code>  method</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>conn<span class=\"token punctuation\">.</span><span class=\"token function\">rollback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Example</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>conn<span class=\"token punctuation\">.</span><span class=\"token function\">setAutoCommit</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// Attempt the transaction</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">// Update the inventory records.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tstmt<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span>updateStatement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// Add the order to the UnpaidOrder table.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tstmt<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span>insertStatement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">// Commit all these updates.</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tconn<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// The commit method is called in the try block</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> ex<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// Roll back the changes.</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tconn<span class=\"token punctuation\">.</span><span class=\"token function\">rollback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">// The rollback method is called in the catch block</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"stored-procedures\"><a class=\"anchor\" href=\"#stored-procedures\">#</a> Stored Procedures</h2>\n<ul>\n<li>Many commercial database systems allow you to create SQL statements and store them in the DBMS itself</li>\n<li>These SQL statements are called  <code>stored procedures</code>\n<ul>\n<li>Can be executed by other applications using the DBMS</li>\n<li>Ideal for SQL statements that are used often in a variety of applications</li>\n<li>Usually execute faster than SQL statements that are submitted from applications outside the DBMS</li>\n</ul>\n</li>\n<li>Each DBMS has its own syntax for creating a stored procedure in SQL</li>\n<li>To execute a stored procedure, you must create a  <code>CallableStatement</code>  object</li>\n<li><code>CallableStatement</code>  is an interface in the  <code>java.sql</code>  package</li>\n<li>To create a  <code>CallableStatement</code>  object, you call the  <code>Connection</code>  class's  <code>prepareCall</code>  statement</li>\n</ul>\n<h2 id=\"jdbc-dates\"><a class=\"anchor\" href=\"#jdbc-dates\">#</a> JDBC Dates</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PreparedStatement</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Statement</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JDBCDates</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// instance fields - db objects</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token class-name\">Connection</span> connect <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token class-name\">Statement</span> statement <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Connection</span> <span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token comment\">// Setup the connection with the DB</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\tconnect <span class=\"token operator\">=</span> <span class=\"token class-name\">DriverManager</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jdbc:mysql://www.papademas.net:3307/mydb?autoReconnect=true&amp;useSSL=false\"</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t\t\t\t\t<span class=\"token operator\">+</span> <span class=\"token string\">\"&amp;user=dbuser&amp;password=db1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> connect<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">createTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token comment\">// set up SQL Query table creation string</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> createDateTable <span class=\"token operator\">=</span> <span class=\"token string\">\"CREATE TABLE jp_dates(id INT AUTO_INCREMENT PRIMARY KEY, startDate DATETIME)\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t<span class=\"token comment\">//*******create table</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\tstatement <span class=\"token operator\">=</span> <span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">createStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\tstatement<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span>createDateTable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Created table in given database...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\t<span class=\"token comment\">//*******end create table</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t<span class=\"token comment\">// close connection/statement objects</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\tstatement<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\tconnect<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addRecs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token comment\">// objects for SQL Query inserts</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token class-name\">PreparedStatement</span> ps <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">PreparedStatement</span><span class=\"token punctuation\">)</span> <span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t\t\t               <span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Insert into jp_dates(startDate) values(?)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\tjava<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span><span class=\"token class-name\">Timestamp</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span><span class=\"token class-name\">Timestamp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span><span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\tps<span class=\"token punctuation\">.</span><span class=\"token function\">setTimestamp</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\tps<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t<span class=\"token comment\">//or alternatively</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\tstatement = getConnection().createStatement();</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\tint result = statement</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t \t\t.executeUpdate(\"Insert into jp_dates(startDate) values(now())\");</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t */</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Record inserted into given database...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t<span class=\"token function\">createTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t<span class=\"token function\">addRecs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"db-exercise\"><a class=\"anchor\" href=\"#db-exercise\">#</a> DB Exercise</h1>\n<h2 id=\"java-database-connectivity-jdbc\"><a class=\"anchor\" href=\"#java-database-connectivity-jdbc\">#</a> Java Database Connectivity (JDBC)</h2>\n<ol>\n<li>\n<p>Create a <strong>Java Project</strong> and name it  <code>CoffeeConnect</code> .</p>\n</li>\n<li>\n<p>Download the jar file accompanying this exercise from Blackboard. mysql-connector-java-8.0.22.zip</p>\n<ol>\n<li>\n<p>Create a folder in your project folder called  <code>libs</code> .</p>\n</li>\n<li>\n<p>Copy the jar file into your  <code>libs</code>  folder.</p>\n</li>\n<li>\n<p>Right click on your project folder and choose <strong>Build Path &gt; Configure Build Path…</strong><br />\n<img data-src=\"https://i.loli.net/2020/11/15/Ag5KwurGPq3BeiD.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>Click on <strong>Libraries</strong> tab then <strong>Modulepath</strong>, then the <strong>Add JARs…</strong> button<br />\n<img data-src=\"https://i.loli.net/2020/11/15/RowN8nYpzPqcKmh.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>At the pop up expand your  <code>Coffee_Connect</code>  folder and expand your  <code>libs</code>  folder. Choose your jar file and press OK.<br />\n<img data-src=\"https://i.loli.net/2020/11/15/pVYqr3hwiLQFyd5.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>Click Apply and Close to exit.</p>\n</li>\n</ol>\n</li>\n<li>\n<p>Download the  <code>Dao</code>  java file accompanying this exercise from Blackboard, and copy and paste the file into your  <code>src</code>  folder. Do the same for the  <code>TableViewer</code>  file as well.</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Dao.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PreparedStatement</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResultSet</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Statement</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// Code database URL</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> DB_URL <span class=\"token operator\">=</span> <span class=\"token string\">\"jdbc:mysql://www.papademas.net:3307/510labs?autoReconnect=true&amp;useSSL=false\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// Database credentials</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> USER <span class=\"token operator\">=</span> <span class=\"token string\">\"db510\"</span><span class=\"token punctuation\">,</span> PASS <span class=\"token operator\">=</span> <span class=\"token string\">\"510\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token class-name\">Statement</span> stmt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Connection</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>DB_URL<span class=\"token punctuation\">,</span> USER<span class=\"token punctuation\">,</span> PASS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Dao</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t<span class=\"token comment\">// initialize any objects here</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\tstmt <span class=\"token operator\">=</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">createStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> menuItems <span class=\"token operator\">=</span> <span class=\"token string\">\"1.Create table\\n2.Insert recs\\n3.Update recs\\n4.Delete recs\\n5.View Recs (Console)\\n6.View Recs (Window)\\n7.Exit\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>menuItems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">createTables</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token comment\">// finish implementing...</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">updates</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> desc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> SQL <span class=\"token operator\">=</span> <span class=\"token string\">\"Update papa_coffee SET prod_desc = ? WHERE id = ?\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token comment\">// use prepared statement</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">PreparedStatement</span> pstmt <span class=\"token operator\">=</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span>SQL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\tpstmt<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> desc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\tpstmt<span class=\"token punctuation\">.</span><span class=\"token function\">setInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\tpstmt<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deletes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token comment\">// finish implementing...</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">inserts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t<span class=\"token comment\">// create an insert statement</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Inserting records...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t\t<span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// sleep for 3 seconds</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t\tsql <span class=\"token operator\">=</span> <span class=\"token string\">\"Insert Into papa_coffee(prod_name,prod_desc,prod_price)\"</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t\t\t\t<span class=\"token operator\">+</span> <span class=\"token string\">\" values('J Papa''s','Strong Brew',29.55)\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t\t<span class=\"token comment\">// execute query for insert(s)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\t\tstmt <span class=\"token operator\">=</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">createStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\t\tstmt<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t\t<span class=\"token comment\">// System.out.println(\"Records inserted\");</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">retrieveRecords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t\t\t<span class=\"token comment\">// get record data from result set object</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t\t<span class=\"token class-name\">ResultSet</span> rs <span class=\"token operator\">=</span> stmt<span class=\"token punctuation\">.</span><span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Select * from papa_coffee\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">int</span> id <span class=\"token operator\">=</span> rs<span class=\"token punctuation\">.</span><span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">String</span> desc <span class=\"token operator\">=</span> rs<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prod_desc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">double</span> price <span class=\"token operator\">=</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseDouble</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prod_price\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// print records to console</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Id : \"</span> <span class=\"token operator\">+</span> id <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t  Desc. : \"</span> <span class=\"token operator\">+</span> desc <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t  Price: \"</span> <span class=\"token operator\">+</span> price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t\t\trs<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">retrieveRecords2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\t\t<span class=\"token comment\">// get record data from result set object</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t\t\t<span class=\"token class-name\">ResultSet</span> rs <span class=\"token operator\">=</span> stmt<span class=\"token punctuation\">.</span><span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Select * from papa_coffee\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">TableViewer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">runView</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// display records in window</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t\t\trs<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">Dao</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t\t<span class=\"token class-name\">Scanner</span> sc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t\t<span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t\t\t<span class=\"token function\">menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t\t\t<span class=\"token keyword\">int</span> choice <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t\t\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>choice<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span> <span class=\"token function\">createTables</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t\t\t\t<span class=\"token function\">inserts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t\t\t\t<span class=\"token function\">updates</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Nova Coffee\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// delete some id</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// deletes(id);</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\t\t\t\t<span class=\"token function\">retrieveRecords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\t\t\t\t<span class=\"token function\">retrieveRecords2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">7</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bye for now!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>TableViewer.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResultSet</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResultSetMetaData</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Vector</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>swing<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JFrame</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>swing<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JScrollPane</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>swing<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JTable</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>swing<span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DefaultTableModel</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TableViewer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">runView</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResultSet</span> rs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token comment\">// instantiate vector objects to hold column/row data for JTable</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token class-name\">Vector</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Vector</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Vector</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token class-name\">Vector</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> column <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t<span class=\"token class-name\">ResultSetMetaData</span> metaData <span class=\"token operator\">=</span> rs<span class=\"token punctuation\">.</span><span class=\"token function\">getMetaData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t<span class=\"token keyword\">int</span> columns <span class=\"token operator\">=</span> metaData<span class=\"token punctuation\">.</span><span class=\"token function\">getColumnCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t<span class=\"token comment\">// get column names from table!</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t<span class=\"token class-name\">String</span> cols <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> columns<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t\tcols <span class=\"token operator\">=</span> metaData<span class=\"token punctuation\">.</span><span class=\"token function\">getColumnName</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t\tcolumn<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>cols<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t<span class=\"token comment\">// get row data from table!\t\t\t\t</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">Vector</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> row <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>columns<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> columns<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t\t\trow<span class=\"token punctuation\">.</span><span class=\"token function\">addElement</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">.</span><span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t\tdata<span class=\"token punctuation\">.</span><span class=\"token function\">addElement</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\t<span class=\"token class-name\">DefaultTableModel</span> model <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultTableModel</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> column<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\t<span class=\"token class-name\">JTable</span> table <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JTable</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\t<span class=\"token class-name\">JFrame</span> frame <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JFrame</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Record Details\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\tframe<span class=\"token punctuation\">.</span><span class=\"token function\">setSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">700</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\tframe<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">JScrollPane</span><span class=\"token punctuation\">(</span>table<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\tframe<span class=\"token punctuation\">.</span><span class=\"token function\">setDefaultCloseOperation</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\tframe<span class=\"token punctuation\">.</span><span class=\"token function\">pack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\tframe<span class=\"token punctuation\">.</span><span class=\"token function\">setVisible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\t<span class=\"token comment\">// rs.close(); //close ResultSet instance </span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Your package should resemble something like this below.<br />\n<img data-src=\"https://i.loli.net/2020/11/15/c5fMHu7VqZFRsbB.png\" alt=\"\" /></p>\n<p>Run your app from the  <code>Dao.java</code>  file and work some of the CRUD operations!</p>\n<p>Modify all references to your own table names in to your Dao file you created in the first DB Exercise #1.</p>\n","tags":["计算机科学","Master of Software Engineering","ITMD 510. Object-Oriented App Develop","Java","Database"]},{"id":"https://shoka.lostyu.me/computer-science/mse/itmd-534/lecture-7/","url":"https://shoka.lostyu.me/computer-science/mse/itmd-534/lecture-7/","title":"Lecture 7. Information Visualization","date_published":"2020-11-06T07:29:08.000Z","content_html":"<h1 id=\"storyboards\"><a class=\"anchor\" href=\"#storyboards\">#</a> Storyboards</h1>\n<h2 id=\"why\"><a class=\"anchor\" href=\"#why\">#</a> Why</h2>\n<ul>\n<li>\n<p>We've collected data from real users and from competitive products<br />\n 我们已经从真实用户和竞争产品中收集了数据</p>\n</li>\n<li>\n<p>We've determined the Mental Models our users have by developing Personas<br />\n 我们通过开发 Personas 来确定用户拥有的心理模型</p>\n</li>\n<li>\n<p>We have a good idea of the Scenarios of use that our users will attempt<br />\n 我们对用户会尝试的使用场景有很好的了解</p>\n</li>\n<li>\n<p>It's pretty tempting to go find a computer and start building something!<br />\n 很容易找到计算机并开始构建东西！</p>\n</li>\n<li>\n<p>We stop thinking conceptually and start thinking pragmatically<br />\n 我们停止从概念上思考，开始进行务实思考</p>\n</li>\n<li>\n<p>We focus on the software tool's constraints instead of the problem's constraints<br />\n 我们专注于软件工具的约束，而不是问题的约束</p>\n</li>\n<li>\n<p>We pay attention to painstaking details (colors, font sizes, pixels) instead of overarching concepts (users, goals, needs)<br />\n 我们注重细节（颜色，字体大小，像素），而不是总体概念（用户，目标，需求）</p>\n</li>\n</ul>\n<h2 id=\"storyboard-overview\"><a class=\"anchor\" href=\"#storyboard-overview\">#</a> Storyboard overview</h2>\n<ul>\n<li>\n<p>Borrowed from the film/animation/comic industries<br />\n 从电影 / 动画 / 漫画行业借来的</p>\n<ul>\n<li>One panel = One Scene<br />\n 一个面板 = 一个场景</li>\n<li>Presented to a group of people<br />\n 介绍给一群人</li>\n<li>Gauge their reactions, understanding<br />\n 衡量他们的反应，理解</li>\n<li>Takes time up front, saves time later<br />\n 提前安排时间，以后节省时间</li>\n</ul>\n</li>\n<li>\n<p>Intended to visualize our scenarios<br />\n 旨在可视化我们的方案</p>\n</li>\n<li>\n<p>Provide a mechanism to gracefully move from conceptual design to screen design<br />\n 提供从概念设计到屏幕设计的优雅过渡机制</p>\n</li>\n<li>\n<p>Allow us to make mistakes early, in paper (cheap and quick), instead of later, in software (expensive and tedious)<br />\n 让我们尽早在纸上（便宜又快速）犯错误，而不是以后在软件上（昂贵而乏味）犯错误。</p>\n</li>\n<li>\n<p>Getting feedback from the users early in the process<br />\n 在此过程的早期就获得用户的反馈</p>\n<ul>\n<li>In initial tests to gauge user reaction<br />\n 在初步测试中评估用户反应</li>\n<li>In study of customers to match with their ideas<br />\n 研究客户以符合他们的想法</li>\n<li>To rapidly design interfaces from interaction with potential users<br />\n 通过与潜在用户的互动来快速设计界面</li>\n<li>To clearly articulate an idea with clients or management<br />\n 与客户或管理层明确表达一个想法</li>\n</ul>\n</li>\n<li>\n<p>Help with the design process<br />\n 帮助设计过程</p>\n<ul>\n<li>The individual steps of a design are made clear by this process<br />\n 通过此过程可以明确设计的各个步骤</li>\n<li>Complex interactions can be broken into multiple screens if the complexity is displayed by the storyboard process<br />\n 如果情节提要过程显示复杂性，则可以将复杂的交互分为多个屏幕</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"storyboarding\"><a class=\"anchor\" href=\"#storyboarding\">#</a> Storyboarding</h2>\n<p>分镜头脚本设计</p>\n<p class=\"gallery\"><img data-src=\"https://i.loli.net/2020/11/06/wuBdgTQKUsa9Cly.jpg\" alt=\"\" title=\"gas pump\" /><br />\n<img data-src=\"https://i.loli.net/2020/11/06/WyHMxZXcGn2RowD.jpg\" alt=\"\" title=\"grocery app\" /><br />\n<img data-src=\"https://i.loli.net/2020/11/06/uHoy4skVm7x8FG5.jpg\" alt=\"\" title=\"my muse\" /></p>\n<ul>\n<li>Storyboard drawings do not need to be perfect.<br />\n 情节提要板图纸不一定是完美的。</li>\n<li>The purpose of a storyboard is to get an idea across to a potential user.<br />\n 故事板的目的是将想法传达给潜在用户。</li>\n<li>In fact, if the drawings are of poor quality –it is better for the use of explaining an activity.<br />\n 实际上，如果图纸质量较差–最好用于解释活动。</li>\n<li>Perfectly finished drawings distract the observer to the color, accuracy etc. of the drawing rather than the interaction process.<br />\n 完美完成的工程图，使观察者分散到工程图的颜色、准确性等方面，而不是交互过程。</li>\n</ul>\n<p><img data-src=\"https://i.loli.net/2020/11/06/Yw7ylUdB2MR1qiF.jpg\" alt=\"\" title=\"Credits: university of Edinburgh\" /></p>\n<h1 id=\"information-visualization\"><a class=\"anchor\" href=\"#information-visualization\">#</a> Information Visualization</h1>\n<p>Data Explosion</p>\n<ul>\n<li>Society is getting more and more complex\n<ul>\n<li>There is just simply more stuff</li>\n</ul>\n</li>\n<li>Computers, internet and web give people access to an incredible amount of data\n<ul>\n<li>news, sports, financial, purchases, etc.</li>\n</ul>\n</li>\n<li>We are in an age where we have become dependent on data. Some call it the age of big data.</li>\n</ul>\n<p>Data Overload</p>\n<ul>\n<li>Confound: How to make use of the data\n<ul>\n<li>How do we make sense of the data</li>\n<li>How do we harness data in decision making processes</li>\n<li>How do we avoid being overwhelmed<br />\n<img data-src=\"https://i.loli.net/2020/11/17/4d6XwEDRGcxYShy.jpg\" alt=\"\" /></li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://i.loli.net/2020/11/18/86ZJt9NS2gFaoQL.jpg\" alt=\"\" title=\"The Problem\" /></p>\n<p>Human Vision</p>\n<ul>\n<li>Highest Bandwidth Sense</li>\n<li>Fast, Parallel</li>\n<li>Pattern Recognition</li>\n<li>Pre-attentive</li>\n<li>Extends memory and cognitive capacity</li>\n<li>People think visually</li>\n<li>Our challenge is to transform data into information –preferably visual</li>\n</ul>\n<h2 id=\"why-2\"><a class=\"anchor\" href=\"#why-2\">#</a> Why</h2>\n<p>Because of the way the human brain processes information, using charts or graphs to visualize large amounts of complex data is easier than poring over spreadsheets or reports.<br />\n 由于人脑处理信息的方式，使用图表或图形来可视化大量复杂数据要比遍历电子表格或报告容易。</p>\n<p>Data visualization is a quick, easy way to convey concepts in a universal manner –and you can experiment with different scenarios by making slight adjustments.<br />\n 数据可视化是一种快速，轻松地以通用方式传达概念的方法 - 您可以通过稍作调整来尝试不同的方案。</p>\n<p>A visualization is a form of external cognition. Just like writing down a column of numbers helps you add them, drawing a picture of data in the right way helps you see patterns and relationships that would otherwise be invisible. Your perceptual system contributes to the thinking process when your data is visualized.<br />\n 可视化是外部认知的一种形式。 就像写下一列数字可以帮助您添加数字一样，以正确的方式绘制数据图也可以帮助您查看原本不可见的模式和关系。 当您的数据可视化时，您的感知系统有助于思考过程。</p>\n<h2 id=\"what\"><a class=\"anchor\" href=\"#what\">#</a> What</h2>\n<ul>\n<li>Often thought of as a process for making graphic or image<br />\n 通常被认为是制作图形或图像的过程</li>\n<li>Really it is a cognitive process<br />\n 确实是一个认知过程\n<ul>\n<li>Form a mental image of something<br />\n 形成事物的心理形象</li>\n<li>Internalize an understanding<br />\n 内化理解</li>\n</ul>\n</li>\n<li>The purpose of visualization is insight not pictures<br />\n 可视化的目的是洞察力而不是图片\n<ul>\n<li>Insight: decision making, discovery, explanation<br />\n 洞察力：决策，发现，解释</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"how\"><a class=\"anchor\" href=\"#how\">#</a> How</h2>\n<ul>\n<li>Motivation<br />\n 动机\n<ul>\n<li>Why we visualize, historical examples<br />\n 为什么我们想像历史例子</li>\n</ul>\n</li>\n<li>Using space well<br />\n 善用空间\n<ul>\n<li>Scatter plots, tree maps, tag clouds<br />\n 散点图，树图，标签云</li>\n</ul>\n</li>\n<li>Interactivity<br />\n 交互性\n<ul>\n<li>Overview, zoom and filter, details on demand<br />\n 概述，缩放和过滤，按需提供详细信息</li>\n</ul>\n</li>\n<li>Toolkits for visualization<br />\n 可视化工具包</li>\n</ul>\n<h3 id=\"main-idea\"><a class=\"anchor\" href=\"#main-idea\">#</a> Main Idea</h3>\n<ul>\n<li>\n<p>Visuals help us think<br />\n 视觉帮助我们思考</p>\n<ul>\n<li>Provide a frame of reference, a temporary storage area<br />\n 提供一个参考系，一个临时存储区</li>\n<li>Seeing is believing<br />\n 眼见为实</li>\n<li>A picture is worth a thousand words<br />\n 一张图片值一千字</li>\n</ul>\n</li>\n<li>\n<p>External cognition aid<br />\n 外部认知辅助</p>\n<ul>\n<li>Role of external world in thinking and reason<br />\n 外部世界在思想和理性中的作用</li>\n<li>An illustrative example<br />\n 示例</li>\n</ul>\n</li>\n<li>\n<p>Information visualization<br />\n 信息可视化</p>\n<ul>\n<li>Items, entities, things which do not have a direct physical correspondence<br />\n 没有直接物理对应关系的项目，实体，事物</li>\n<li>Notion of abstractness of entities is important<br />\n 实体的抽象性概念很重要</li>\n<li>Examples: baseball statistics, stock trends, political data etc.<br />\n 例如：棒球统计，股票趋势，政治数据等。</li>\n</ul>\n</li>\n<li>\n<p>Analyze<br />\n 分析</p>\n<ul>\n<li>Think with your perceptual system<br />\n 思考您的感知系统</li>\n<li>Play with the data to understand it<br />\n 玩数据以了解它</li>\n</ul>\n</li>\n<li>\n<p>Present<br />\n 现在</p>\n<ul>\n<li>Convey information to others<br />\n 向他人传达信息</li>\n<li>Collaborate<br />\n 合作</li>\n<li>Highlight important facts<br />\n 突出重要事实</li>\n<li>Make a decision<br />\n 作出决定</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"examples\"><a class=\"anchor\" href=\"#examples\">#</a> Examples</h2>\n<h3 id=\"challenger-explosion\"><a class=\"anchor\" href=\"#challenger-explosion\">#</a> Challenger Explosion</h3>\n<p>The cause of the explosion was a breached O-ring in one of its rocket boosters. The O-ring failed because temperatures were well below freezing when the shuttle launched, and the material of the O-ring wasn't resilient enough to maintain the seal.</p>\n<p><img data-src=\"https://i.loli.net/2020/11/18/fMpegIl4A2L7r9x.jpg\" alt=\"\" /></p>\n<p>Some of the information used in the decision was presented this way. <strong>Tables are a form of visualization, but a weak one.</strong> They don't exploit all the capabilities of our visual systems to perceive and to think; they don't exploit all the dimensions of our visual systems.</p>\n<p><img data-src=\"https://i.loli.net/2020/11/18/rbLDFU2fTeBnlHM.jpg\" alt=\"\" /></p>\n<p>Here's another way to present it (a reproduction of a visualization that was actually used in the decision-making process before the Challenger launch). Each pair of rockets represents an actual pair of rockets (A and B) launched on a prior shuttle mission (SRM, numbered 1 to 24).</p>\n<p>The launches are ordered by air temperature at launch (written sideways on the top of the rocket).</p>\n<p><img data-src=\"https://i.loli.net/2020/11/18/7SX3r62JRTuZDUg.jpg\" alt=\"\" /></p>\n<p>Here is Edward Tufte'sredesign of the visualization, showing the same data. First, it dramatically simplifies the display, doing away with the rocket pictures in favor of much stronger visibility of the essential information (temperature and O-ring damage). Second, it changes the x-position from merely showing the ordering of the temperature variable, and instead uses it to show temperature in a quantitative way. These changes have a dramatic effect on the story told by the display, especially when we add the additional piece of information that the current temperature (when the decision makers were considering the launch) was well below freezing –far to the left on the graph.</p>\n<h2 id=\"summary\"><a class=\"anchor\" href=\"#summary\">#</a> Summary</h2>\n<ul>\n<li>\n<p>A good infovizprovides three things<br />\n 一个好的信息提供了三件事</p>\n<ul>\n<li>Overview<br />\n 概述</li>\n<li>Zoom and Filter<br />\n 缩放和滤镜</li>\n<li>Details on demand<br />\n 按需详情</li>\n<li>In a graphical user interface, the user can interact with and change the visualization with the above criteria<br />\n 在图形用户界面中，用户可以按照上述条件与可视化进行交互并更改可视化</li>\n</ul>\n</li>\n<li>\n<p>Provide an overview that lets the user see all the data, get a big picture view of what's where, and see important relationships at a glance<br />\n 提供概述，使用户可以查看所有数据，大范围查看概况，并一目了然地查看重要关系</p>\n</li>\n<li>\n<p>Provide the ability to zoom and filter the visualization, so that the user can reduce the (probably overwhelming) overview down to a subset of the data that they want to study more carefully<br />\n 提供缩放和过滤可视化效果的功能，以便用户可以将（可能是压倒性的）概览缩小到他们想要更仔细研究的数据子集</p>\n</li>\n<li>\n<p>Provide more details on demand. Hovering over a point displays its title. Clicking on a point brings up a more detailed, probably more textual representation of a data item<br />\n 按需提供更多详细信息。 将鼠标悬停在一个点上会显示其标题。 单击某个点将显示数据项的更详细，可能更多的文本表示形式</p>\n</li>\n</ul>\n<h1 id=\"internationalization-and-localization\"><a class=\"anchor\" href=\"#internationalization-and-localization\">#</a> Internationalization and Localization</h1>\n<h2 id=\"why-3\"><a class=\"anchor\" href=\"#why-3\">#</a> Why</h2>\n<blockquote>\n<p>Note: These are in addition to all the previous recommendations / guidelines<br />\n 注意：这些是以前所有建议 / 准则的补充</p>\n</blockquote>\n<ul>\n<li>Used in more than one country<br />\n 在多个国家使用</li>\n<li>Not just language translation<br />\n 不仅仅是语言翻译</li>\n<li>English versions of products may be used all over the world<br />\n 产品的英文版本可能在世界范围内使用</li>\n<li>Reviews of products may mention international usability issues<br />\n 产品评论可能会提及国际可用性问题</li>\n<li>All web sites are globally accessible<br />\n 所有网站均可全球访问</li>\n<li>Providing multiple language versions<br />\n 提供多种语言版本</li>\n<li>Making the English version more accessible<br />\n 使英语版本更易于使用</li>\n</ul>\n<h2 id=\"what-2\"><a class=\"anchor\" href=\"#what-2\">#</a> What</h2>\n<dl>\n<dt>Internationalization 国际化</dt>\n<dd>One design that can be used world-wide<br />\n 一种可以在世界范围内使用的设计</dd>\n<dt>Localization 本地化</dt>\n<dd>Different designs customized to different languages<br />\n 针对不同语言定制的不同设计</dd>\n</dl>\n<p>Essentially, internationalization separates the language-specific parts of the interface from the rest of the code, so that those parts can be easily replaced<br />\n 本质上，国际化将接口的语言特定部分与其余代码分开，以便可以轻松替换这些部分</p>\n<p>The process of making a user interface ready for translation is called internationalization<br />\n 使用户界面准备好进行翻译的过程称为 internationalization 国际化</p>\n<p>Actually doing this translation for a particular language and culture is called localization.<br />\n 实际上，针对特定语言和文化的翻译称为 localization 本地化。</p>\n<h2 id=\"how-2\"><a class=\"anchor\" href=\"#how-2\">#</a> How</h2>\n<ul>\n<li>\n<p>Not just translating the interface<br />\n 不只是翻译界面</p>\n<ul>\n<li>Web sites may have different content<br />\n 网站可能具有不同的内容\n<ul>\n<li>e.g. German yahoo has &quot;Sports&quot; on front tab, compared to US Yahoo &quot;Finance&quot;<br />\n与美国雅虎&quot; 财务 &quot;相比，德国雅虎的前置标签为&quot; 体育 &quot;</li>\n<li>And different icons for sports:<br />\n 以及不同的运动图标：</li>\n</ul>\n</li>\n<li>Different sizes of language may require redesign<br />\n 语言的不同大小可能需要重新设计\n<ul>\n<li>But automatic layout can help<br />\n 但是自动布局可以帮助</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Indicate content that is not translated <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5raXQuZWR1\">www.kit.edu</span><br />\n 指示未翻译的内容</p>\n</li>\n<li>\n<p>When there is a choice of language<br />\n 有语言选择时</p>\n<ul>\n<li>Don't use flags to indicate language: <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5ydXNzZWxsLW5ld3Rvbi5pdC8=\">http://www.russell-newton.it/</span><br />\n 不要使用标记来表示语言\n<ul>\n<li>US vs. Canada vs. England<br />\n 美国 vs. 加拿大 vs. 英国</li>\n</ul>\n</li>\n<li>Use language's own name for itself (ENGLISH, ESPAÑOL)<br />\n 自行使用语言的名称</li>\n<li>Good place for pictures of text (if fonts aren't loaded)<br />\n 文本图片的好地方（如果未加载字体）</li>\n</ul>\n</li>\n<li>\n<p>First page in default language, so, many won't need extra click<br />\n 首页使用默认语言，因此，许多页面不需要额外的点击</p>\n<ul>\n<li>Make links for other languages easy to find (e.g., <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5rbnRvLm9yLmtyLw==\">www.knto.or.kr/</span>)<br />\n 使其他语言的链接易于查找</li>\n<li>Not: <span class=\"exturl\" data-url=\"aHR0cDovL3RoYWkudG91cmlzbXRoYWlsYW5kLm9yZy9ob21l\">http://thai.tourismthailand.org/home</span></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"translation\"><a class=\"anchor\" href=\"#translation\">#</a> Translation</h3>\n<p>Every piece of text that might be shown to the user is a potential candidate for translation, like menu items and button labels and also text drawn with stroke drawing calls, and text embedded in pixel images<br />\n 可能会向用户显示的每条文本都是潜在的翻译候选对象，例如菜单项和按钮标签，以及通过描边绘制调用绘制的文本，以及嵌入像素图像中的文本</p>\n<p>Translation can easily change the size or aspect ratio of the text; German labels tend to be much longer than English ones, for example<br />\n 翻译可以轻松更改文本的大小或长宽比； 例如，德国标签往往比英语标签长</p>\n<p>Error messages also need to be translated, of course –which is another reason not to expose internal system names in error messages<br />\n 当然，错误消息也需要翻译 - 这是另一个不在错误消息中公开内部系统名称的原因</p>\n","tags":["计算机科学","Master of Software Engineering","ITMD 534. Human Computer Interaction","人机交互"]},{"id":"https://shoka.lostyu.me/computer-science/mse/itmd-534/lecture-6/","url":"https://shoka.lostyu.me/computer-science/mse/itmd-534/lecture-6/","title":"Lecture 6. Aesthetics in HCI","date_published":"2020-10-29T08:09:18.000Z","content_html":"<h1 id=\"aesthetics-in-hci\"><a class=\"anchor\" href=\"#aesthetics-in-hci\">#</a> Aesthetics in HCI</h1>\n<p>人机交互中的美学</p>\n<p>Traditional emphasis on usability is now giving way to include user experience as a measure of good UI design.<br />\n 传统上对可用性的强调正逐渐让位，包括用户体验在内，作为衡量良好 UI 设计的方法。</p>\n<h2 id=\"various-movements-in-art\"><a class=\"anchor\" href=\"#various-movements-in-art\">#</a> Various Movements in Art</h2>\n<p>各种艺术运动</p>\n<table>\n<tbody>\n<tr>\n<td>Greek and Roman</td>\n<td>希腊和罗马</td>\n</tr>\n<tr>\n<td>Medieval</td>\n<td>中世纪</td>\n</tr>\n<tr>\n<td>Renaissance</td>\n<td>文艺复兴</td>\n</tr>\n<tr>\n<td>Baroque</td>\n<td>巴洛克式</td>\n</tr>\n<tr>\n<td>Neo Classical</td>\n<td>新古典</td>\n</tr>\n<tr>\n<td>Realism</td>\n<td>现实主义</td>\n</tr>\n<tr>\n<td>Impressionism</td>\n<td>印象派</td>\n</tr>\n<tr>\n<td>Cubism</td>\n<td>立体主义</td>\n</tr>\n<tr>\n<td>Abstract Art</td>\n<td>抽象艺术</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"golden-proportions-黄金比例\"><a class=\"anchor\" href=\"#golden-proportions-黄金比例\">#</a> Golden Proportions 黄金比例</h1>\n<p>Golden proportions are found both in nature and in man-made structures<br />\n 在自然界和人造结构中都可以找到黄金比例</p>\n<ul>\n<li>Studies have shown that humans have a preference for Golden Proportions<br />\n 研究表明，人类偏爱黄金比例</li>\n<li>Golden proportions consist of the golden ratio and are closely related to Fibonacci sequence<br />\n 黄金比例由黄金分割率组成，与斐波那契数列密切相关\n<ul>\n<li>The golden ratio is one where the ratio of the smaller segment to the larger segment is the same as the larger segment to the sum of both segments.<br />\n 黄金分割率是较小部分与较大部分之比，与较大部分与两个部分之和之比相同的比率。</li>\n<li>The golden proportion is a visual representation of the golden number (Φ) which is approximately 1.618<br />\n 黄金比例是黄金分割数（Φ）的视觉表示，约为 1.618</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://i.loli.net/2020/11/03/S14kUx3MvL5TuHO.jpg\" alt=\"\" title=\"Courtesy: bypeople.com\" /></p>\n<h2 id=\"fibonacci-sequence-斐波那契数列\"><a class=\"anchor\" href=\"#fibonacci-sequence-斐波那契数列\">#</a> Fibonacci Sequence 斐波那契数列</h2>\n<p>The golden ratio is closely connected to Fibonacci sequence<br />\n 黄金比例与斐波那契数列紧密相关</p>\n<ul>\n<li>Fibonacci sequence begins by definition with the numbers 0, 1 and then each successive number in the sequence is the sum of the previous two numbers<br />\n 斐波那契数列的定义是从数字 0、1 开始，然后序列中的每个连续数字都是前两个数字的和<br />\n <code>0,1,1,2,3,5,8,13,21,34,55.....</code></li>\n<li>If you take any number in the sequence and divide it by the previous number the result approximates Phi or the golden ratio<br />\n 如果将序列中的任何数字除以前一个数字，则结果近似为 Φ 或黄金比例<br />\n <code>13/8 = 1.625</code>   <code>21/13 - 1.615</code>   <code>34/21 - 1.619</code>   <code>55/34 = 1.6176</code></li>\n<li>This sequence is found all around us in nature<br />\n 在自然界中发现了这个序列</li>\n</ul>\n<p class=\"gallery\"><img data-src=\"https://i.loli.net/2020/11/03/sGWNKhtoE3r5U4B.jpg\" alt=\"\" title=\"Courtesy: Flickr.com\" /><br />\n<img data-src=\"https://i.loli.net/2020/11/03/ZQIU3uTdcFag6A8.jpg\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/11/03/491l3pMzdKZLYU2.jpg\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/11/03/my2UeGdPM5g7cjv.jpg\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/11/03/RfJdPyhAepOzT1q.jpg\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/11/03/KDiGv6k3zUmSWE1.jpg\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/11/03/cY4oLsjWgX2TKH8.jpg\" alt=\"\" /></p>\n<h2 id=\"golden-ratio-and-the-rule-of-third-黄金分割率与三分法则\"><a class=\"anchor\" href=\"#golden-ratio-and-the-rule-of-third-黄金分割率与三分法则\">#</a> Golden Ratio and the rule of third 黄金分割率与三分法则</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj05Q2lTM1NVNGxrMCZhbXA7YWJfY2hhbm5lbD1TZWVrZXI=\">Video: The Golden Ratio vs. The Rule of Thirds</span></p>\n<p><div class=\"video-container\"><iframe src=\"https://www.youtube.com/embed/9CiS3SU4lk0\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe></div></p>\n<h2 id=\"example\"><a class=\"anchor\" href=\"#example\">#</a> Example</h2>\n<p><img data-src=\"https://i.loli.net/2020/11/03/RaTQNoCEX673sLu.jpg\" alt=\"\" title=\"Courtesy: tympanus.net\" /></p>\n<p>MmDesign uses the principle of the golden rectangle for the dominant image on its site.<br />\nMmDesign 在其网站的主要图像上使用金色矩形的原理。</p>\n<p>Not only is the image striking, it has the perfect harmonic shape.<br />\n 图像不仅引人注目，而且具有完美的谐波形状。</p>\n<p>The golden rectangle is not just for site design but can be used to create balanced parts throughout a site.<br />\n 黄金矩形不仅用于站点设计，还可以用于在整个站点中创建平衡零件。</p>\n<p><img data-src=\"https://i.loli.net/2020/11/03/RwDa8AJTzKgFPXs.jpg\" alt=\"\" title=\"Courtesy: webdesign.tutplus.com\" /></p>\n<p>The screenshot above shows how the layoutlargely comprises previous client work.<br />\n 上面的屏幕截图显示了布局如何主要包括以前的客户端工作。</p>\n<p>It also features a block of content about the agency itselfand a navigation bar in the center of the screen.<br />\n 它还具有关于代理机构本身的内容块以及屏幕中心的导航栏。</p>\n<p>The contact button, as shown also uses the golden mean as a grid system to organize the layout in a unique way.<br />\n 如图所示，接触按钮还使用黄金分割作为网格系统，以独特的方式组织布局。</p>\n<h1 id=\"layout-design-版图设计\"><a class=\"anchor\" href=\"#layout-design-版图设计\">#</a> Layout Design 版图设计</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1OOFRRZkUxcUtlRSZhbXA7YWJfY2hhbm5lbD1TYXRvcmlHcmFwaGljcw==\">Master LAYOUT &amp; COMPOSITION Design - Why Layout Is SO IMPORTANT</span></p>\n<p><div class=\"video-container\"><iframe src=\"https://www.youtube.com/embed/N8TQfE1qKeE\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe></div></p>\n<h1 id=\"gestalt-theory-格式塔理论\"><a class=\"anchor\" href=\"#gestalt-theory-格式塔理论\">#</a> Gestalt Theory 格式塔理论</h1>\n<p>This is a theory of understanding form in its unified whole.<br />\n 这是一种理解理论，它是一个统一的整体。</p>\n<p>Developed in the Berlin School of experimental psychology, it deals with the capability of human perception to generate forms out of seemingly unconnected lines and shapes.<br />\n 它是由柏林实验心理学学院开发的，旨在处理人类感知能力，以看似无关的线条和形状生成形式。</p>\n<p>It supports the idea that the whole is more than the sum of its parts.<br />\n 它支持这样的想法，即整体不仅仅是其各个部分的总和。</p>\n<ul>\n<li>Closure 闭合</li>\n<li>Similarity 相似</li>\n<li>Good Continuation 良好的延续性</li>\n<li>Proximity 邻近</li>\n<li>Good Form 良好的形式</li>\n<li>Object and background 对象和背景</li>\n</ul>\n<h2 id=\"closure-闭合\"><a class=\"anchor\" href=\"#closure-闭合\">#</a> Closure 闭合</h2>\n<p>Closure is the key for an observer to decipher shapes and forms in a picture with various lines and shapes.<br />\n 闭合是观察者解密具有各种线条和形状的图片中的形状和形式的关键。</p>\n<p>The human brain tends to fill up missing lines to build up a shape that is familiar to it.<br />\n 人脑往往会填补缺失的线条，以建立自己熟悉的形状。</p>\n<p>In the figure below the invisible lines form a triangle.<br />\n 在下图中，看不见的线形成一个三角形。</p>\n<p class=\"gallery\"><img data-src=\"https://i.loli.net/2020/11/05/lRd6TzcVx1GMAeW.png\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/11/05/12QPgFZIEpw5scr.jpg\" alt=\"\" /></p>\n<h2 id=\"similarity-相似\"><a class=\"anchor\" href=\"#similarity-相似\">#</a> Similarity 相似</h2>\n<p>Perception of patterns depends on characteristics of the shapes, size, color etc. in the visual field.<br />\n 模式的感知取决于视野中形状，大小，颜色等的特征。</p>\n<p>Human brain has a tendency of building patterns based on similarities.<br />\n 人脑倾向于建立基于相似性的模式。</p>\n<p class=\"gallery\"><img data-src=\"https://i.loli.net/2020/11/05/y7IDvoWrsB6x29P.png\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/11/05/L8JFG4KEDWXlcw2.jpg\" alt=\"\" /></p>\n<h2 id=\"good-continuation-良好的延续性\"><a class=\"anchor\" href=\"#good-continuation-良好的延续性\">#</a> Good Continuation 良好的延续性</h2>\n<p>This principle describes the tendency of the eye to follow a line or curve and continue in the same direction.<br />\n 该原理描述了，眼睛遵循直线或曲线，并朝同一方向延伸的趋势。</p>\n<p>It can be used effectively in guiding the eye to a desired location.<br />\n 它可以有效地用于将眼睛引导到所需位置。</p>\n<p>In the figure below the dots appear to form a line and the eye continues to follow it through the square and an imaginary line is inferred<br />\n 在下图中，点似乎形成一条线，并且眼睛继续跟随它穿过正方形，并推断出一条假想线。</p>\n<p class=\"gallery\"><img data-src=\"https://i.loli.net/2020/11/05/7e8zcfMUpduP3as.png\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/11/05/c8CfpMoH6vLjzwt.jpg\" alt=\"\" /></p>\n<h2 id=\"proximity-接近\"><a class=\"anchor\" href=\"#proximity-接近\">#</a> Proximity 接近</h2>\n<p>When we see a collection of objects, the objects that are close together form a group in our mind.<br />\n 当我们看到对象的集合时，彼此靠近的对象在我们的脑海中形成了一个群体。</p>\n<p>Even if the objects are dissimilar – the fact that they are close to each other will evoke this sense of a group.<br />\n 即使对象不同，它们彼此靠近的事实也会唤起这种群体感。</p>\n<p>In the figure below, this principle is highlighted.<br />\n 在下图中，突出显示了此原理。</p>\n<p class=\"gallery\"><img data-src=\"https://i.loli.net/2020/11/05/6sQdz8JWZpgYuNt.png\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/11/05/uqaw8k3Zzr2c4FT.jpg\" alt=\"\" /></p>\n<h2 id=\"good-form-好的形式\"><a class=\"anchor\" href=\"#good-form-好的形式\">#</a> Good Form 好的形式</h2>\n<p>Humans tend to organize an image in a regular, orderly, symmetric and simple form.<br />\n 人类倾向于以规则，有序，对称和简单的形式来组织图像。</p>\n<p>The principle of <strong>Pragnanz</strong> encompasses all the gestalt principles to create a perception of the whole.<br />\nPragnanz 原则涵盖了所有格式塔原理，从而营造出整体感。</p>\n<p>When a complicated set of images are presented, the human mind tries to simplify them by keeping fewer elements and building an image closer to symmetry.<br />\n 当呈现一组复杂的图像时，人的大脑试图通过减少元素数量，并构建更接近对称的图像来简化它们。</p>\n<p class=\"gallery\"><img data-src=\"https://i.loli.net/2020/11/05/WCYqio26XhuMmO4.png\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/11/05/1YqTVmvGOBRH6Ig.jpg\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/11/05/bKulknV1rpfaOGv.jpg\" alt=\"\" title=\"Pragnanz\" /></p>\n<h2 id=\"object-and-background-对象和背景\"><a class=\"anchor\" href=\"#object-and-background-对象和背景\">#</a> Object and Background 对象和背景</h2>\n<p>The phenomenon of figure and ground was first investigated by Edgar Rubin a Danish psychologist.<br />\n 图形与背景现象最先由丹麦心理学家 Edgar Rubin 研究。</p>\n<p>It deals with the perception in a visual filed of some objects being in the foreground having dominant role and others are relegated to the background.<br />\n 它处理了视觉文件中的感知，即某些对象位于前景中并具有主导作用，而其他对象则降级为背景。</p>\n<p><img data-src=\"https://i.loli.net/2020/11/05/yB8LMIhnWUoVAEP.jpg\" alt=\"\" /></p>\n<h3 id=\"foreground-and-background-前景和背景\"><a class=\"anchor\" href=\"#foreground-and-background-前景和背景\">#</a> Foreground and Background 前景和背景</h3>\n<p>Use of shapes in layouts and design bring in the aspect of foreground and background objects.<br />\n 在布局和设计中使用形状会带来前景和背景对象的方面。</p>\n<p>The foreground shapes usually convey the main subject matter while the background is used to support the foreground.<br />\n 前景形状通常传达主要主题，而背景则用于支撑前景。</p>\n<p>By careful use of shapes, various meaning can be conveyed.<br />\n 通过仔细使用形状，可以传达各种含义。</p>\n<p><img data-src=\"https://i.loli.net/2020/11/05/PwQViKyBNu72ekO.jpg\" alt=\"\" /></p>\n<h3 id=\"simplicity-简单\"><a class=\"anchor\" href=\"#simplicity-简单\">#</a> Simplicity 简单</h3>\n<ul>\n<li>\n<p>Perfection is achieved not when there is nothing more to add but there is nothing more to take away<br />\n 当没有更多可添加，但没有其他可取的东西时，就无法实现完美。</p>\n</li>\n<li>\n<p>Simplicity does not mean the absence of any décor.<br />\n 简单并不意味着没有任何装饰。<br />\nIt only means that the décor should belong intimately to the design proper and anything foreign to it should be taken away.\t<br />\n它仅意味着装饰应与设计本身紧密相关，并且应删除所有与设计无关的内容。</p>\n</li>\n<li>\n<p>Keep it simple stupid (KISS)<br />\n 保持简单愚蠢（KISS）</p>\n</li>\n<li>\n<p>Less is more<br />\n 少即是多</p>\n</li>\n<li>\n<p>When in doubt leave it out<br />\n 如有疑问，请忽略</p>\n</li>\n</ul>\n<h4 id=\"reduction-削减\"><a class=\"anchor\" href=\"#reduction-削减\">#</a> Reduction 削减</h4>\n<p>Remove inessential elements<br />\n 删除非必要元素</p>\n<ol>\n<li>Decide what essentially needs to be conveyed by the design;<br />\n 决定设计需要传达的内容；</li>\n<li>Critically examine every element (label, control, color, font, line weight) to decide whether it serves an essential purpose<br />\n 严格检查每个元素（标签，控件，颜色，字体，线条粗细），以决定其是否满足基本目的</li>\n<li>Remove it if it isn't essential<br />\n 如果不是必需的，请将其删除</li>\n</ol>\n<p><img data-src=\"https://i.loli.net/2020/11/05/7Hli1DzvyIaBXQc.jpg\" alt=\"\" /></p>\n<h4 id=\"double-duty-双重职责\"><a class=\"anchor\" href=\"#double-duty-双重职责\">#</a> Double duty 双重职责</h4>\n<ul>\n<li>\n<p>Use regular pattern<br />\n 使用常规模式</p>\n</li>\n<li>\n<p>Limit inessential variation among elements<br />\n 限制元素之间的非本质变化</p>\n</li>\n<li>\n<p>Use the same font, color, line width, dimensions, orientation for multiple elements<br />\n 对多个元素使用相同的字体，颜色，线宽，尺寸，方向</p>\n</li>\n</ul>\n<p><img data-src=\"https://i.loli.net/2020/11/05/XFVpAfu7QB4SKDq.jpg\" alt=\"\" /></p>\n<h4 id=\"contrast-对比\"><a class=\"anchor\" href=\"#contrast-对比\">#</a> Contrast 对比</h4>\n<p>Contrast encodes information along visual dimensions<br />\n 对比度沿视觉维度编码信息</p>\n<p><img data-src=\"https://i.loli.net/2020/11/05/DYhlBs9IK4wLOMZ.jpg\" alt=\"\" /></p>\n<p>Ask yourself these questions:<br />\n 问自己以下问题：</p>\n<ul>\n<li>find all the letters on the left edge of the page (position)<br />\n 找到页面左侧（位置）的所有字母</li>\n<li>find all the red letters (hue)<br />\n 查找所有红色字母（色相）</li>\n<li>find all the K's (shape)<br />\n 找到所有的 K（形状）</li>\n</ul>\n<p>Which of these questions felt easy to answer, and which felt hard?<br />\n 以下哪个问题容易回答，哪个很难？<br />\nThe easy ones were selective visual variables.<br />\n 容易的是选择性的视觉变量。</p>\n<p><img data-src=\"https://i.loli.net/2020/11/05/YcENPgmAvtL4zXV.jpg\" alt=\"\" /></p>\n<h3 id=\"white-space-空白空间\"><a class=\"anchor\" href=\"#white-space-空白空间\">#</a> White Space 空白空间</h3>\n<ul>\n<li>Use white space for grouping instead of lines<br />\n 使用空白分组而不是线条</li>\n<li>Use margins to draw eye around design<br />\n 使用边距在设计周围吸引眼球</li>\n<li>Integrate figure and ground<br />\n 整合图形与背景\n<ul>\n<li>Object should be scaled proportionally to its background<br />\n 对象应与其背景成比例缩放</li>\n</ul>\n</li>\n<li>Don't crowd controls together<br />\n 不要挤在一起\n<ul>\n<li>Crowding creates spatial tension and inhibits scanning<br />\n 拥挤会造成空间紧张并阻碍扫描</li>\n</ul>\n</li>\n</ul>\n<p class=\"gallery\"><img data-src=\"https://i.loli.net/2020/11/05/TbEZJNzASlY1voD.jpg\" alt=\"\" title=\"Crowded Dialogue. Courtesy: Mullet and Sano\" /><br />\n<img data-src=\"https://i.loli.net/2020/11/05/JPxuHyI6S7lRXCG.jpg\" alt=\"\" title=\"Using White Space. Courtesy: Mullet and Sano\" /><br />\n<img data-src=\"https://i.loli.net/2020/11/05/Lv4HlyUOcIBiaP3.jpg\" alt=\"\" title=\"White Space avoids noise. Courtesy: Edward Tufte\" /></p>\n<h1 id=\"grids-网格\"><a class=\"anchor\" href=\"#grids-网格\">#</a> Grids 网格</h1>\n<ul>\n<li>Grids enable you to build solid structure and form into your designs<br />\n 网格能够在设计中构建坚固的结构和形式</li>\n<li>In its most basic terms, a grid system is a structure comprising a series of horizontal and vertical lines which intersect and are then used to arrange content<br />\n 从最基本的角度来说，网格系统是一种结构，包括一系列水平线和垂直线，这些线相交，然后用于布置内容</li>\n<li>Using a grid system in your designs is one way to achieve a level of consistency that would be otherwise extremely difficult to master and to portray in your designs<br />\n 在设计中使用网格系统，是达到一致性水平的一种方法，否则将很难掌握和描述您的设计</li>\n</ul>\n<p class=\"gallery\"><img data-src=\"https://i.loli.net/2020/11/05/QkL7e84dWtrVlbR.jpg\" alt=\"\" title=\"Courtesy: webdesign.tutsplus.com\" /><br />\n<img data-src=\"https://i.loli.net/2020/11/05/ObJ9qxpIZrWGvuy.jpg\" alt=\"\" title=\"The screen on the left displays better visual balance and consistency. The result is much more pleasant to look at and use. 左侧的屏幕显示出更好的视觉平衡和一致性。结果使使用和观看时更加愉悦\" /><br />\n<img data-src=\"https://i.loli.net/2020/11/05/7bAOksC3GNX4Ydg.jpg\" alt=\"\" title=\"Layout of The Atlantic magazine home page and the underlying grid. 《大西洋》杂志首页和底层网格的布局\" /></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj03WWNWelVZLUE3OCZhbXA7YWJfY2hhbm5lbD1MaW5rZWRJbkxlYXJuaW5n\">Layout and composition tutorial: Grid variations | lynda.com</span></p>\n<p><div class=\"video-container\"><iframe src=\"https://www.youtube.com/embed/7YcVzUY-A78\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe></div></p>\n<h1 id=\"typography-版式\"><a class=\"anchor\" href=\"#typography-版式\">#</a> Typography 版式</h1>\n<p>A good UI design relies heavily on the correct use of typography.<br />\n 良好的 UI 设计在很大程度上取决于字体的正确使用。</p>\n<p>Typography has its own meta-language. 印刷术有其自己的元语言。</p>\n<p>Its shapes and relationships convey meaning even before we decode the words with which they give shape and voice.<br />\n 它的形状和关系传达了意义，甚至在我们解码它们赋予形状和声音的单词之前</p>\n<p><img data-src=\"https://i.loli.net/2020/11/06/QWD8Fd4lHjsfEUS.jpg\" alt=\"\" /></p>\n<h2 id=\"form-and-counterform-形式与反形式\"><a class=\"anchor\" href=\"#form-and-counterform-形式与反形式\">#</a> Form and Counterform 形式与反形式</h2>\n<p>Every letter consists of the shape filled with ink, the form, and the shape defined by that shape, the counterform.<br />\n 每个字母都由填充有墨水的形状，形式和由该形状定义的形状（对应形式）组成。</p>\n<p>A counterform can be entirely closed, such as the interior space of the &quot;o&quot; partially open like the &quot;n&quot; or broadly open, such as the space defined by the curve and cross stroke of the &quot;f&quot;.<br />\n 配套产品可以完全封闭，例如 “o” 的内部空间。 像 “n” 一样部分打开 或宽阔的空间，例如由 “f” 的曲线和交叉笔划定义的空间</p>\n<p><img data-src=\"https://i.loli.net/2020/11/06/kr1SENMI2pUyV65.jpg\" alt=\"\" /></p>\n<h2 id=\"stems-and-bowls茎和碗\"><a class=\"anchor\" href=\"#stems-and-bowls茎和碗\">#</a> Stems and Bowls 茎和碗</h2>\n<p>The stem of a letterform is the vertical stroke.<br />\n 字母的茎是垂直笔画。</p>\n<p>The thickness of this stroke does much to define the color density of the type, that is, how much ink the letterform will express on the paper.<br />\n 此笔划的厚度在很大程度上决定了该类型的颜色密度，即该字母将在纸张上表达多少墨水。</p>\n<p>The bowls of the letterform are the rounded shapes, the geometry of the curves that make the &quot;e&quot; and &quot;o&quot; and &quot;c&quot; move to the same visual rhythm.<br />\n 字母形的碗是圆形的，曲线的几何形状使 “e”，“o” 和 “c” 移动到相同的视觉节奏。</p>\n<p><img data-src=\"https://i.loli.net/2020/11/06/uj1XrEgaQOwtABx.jpg\" alt=\"\" /></p>\n<h2 id=\"ascenders-and-descenders-上升和下降\"><a class=\"anchor\" href=\"#ascenders-and-descenders-上升和下降\">#</a> Ascenders and Descenders 上升和下降</h2>\n<p>The letters grouped together to make up a word align to four horizontal marks.<br />\n 组合在一起组成一个单词的字母与四个水平标记对齐。</p>\n<p>The most obvious mark is the <ins>baseline</ins>, the bottom of letters such as &quot;x&quot; and &quot;d&quot;.<br />\n 最明显的标记是基线，即字母的底部，例如 “x” 和 “d”。</p>\n<p>Lowercase letters have a second mark, the <ins>x height</ins>, that is, simply the height of the lowercase “x” in any font.<br />\n 小写字母有第二个标记，x 高度，即任何字体中小写字母 “x” 的高度。</p>\n<p>Variations in this height can make a font appear large or small in contrast to other fonts, independent of size.<br />\n 高度的变化会使字体与其他字体形成对比，而与字体大小无关。</p>\n<p><ins>Ascenders</ins> and <ins>descenders</ins> are those parts of the letterform that rise above the x height, such as the stem of the &quot;d&quot; or fall below the baseline, such as the stem of the &quot;p&quot; respectively.<br />\n 升序和降序分别是字母形状中上升到 x 高度以上的部分，例如 “d” 的茎，或下降到基线以下的那些部分，例如 “p” 的茎。</p>\n<p>The top of the ascender defines the top of a capital letter, the <ins>cap height</ins>.<br />\n 上升器的顶部定义了大写字母的顶部，即帽高。</p>\n<p><img data-src=\"https://i.loli.net/2020/11/06/Aa1pQ3sPyf5bSKe.png\" alt=\"\" /></p>\n<h2 id=\"readability可读性\"><a class=\"anchor\" href=\"#readability可读性\">#</a> Readability 可读性</h2>\n<ul>\n<li>\n<p>Many factors affect readability although the two main elements that make for good and readable composition are the correct proportions of type size to line (or “column”) width, and the horizontal flow created by the white space between the lines.<br />\n 尽管影响字体质量和可读性的两个主要因素是，字体大小与线条（或 “列”）宽度的正确比例，以及线条之间的空白所产生的水平流动，但许多因素都会影响可读性。</p>\n</li>\n<li>\n<p>Type that is too large for the column width limits the number of words that will fit on a line, creating uneven word spacing and excess hyphenation.<br />\n 对于列宽而言，太大的类型会限制一行中适合的单词数，从而导致单词间距不均和过多的连字符。</p>\n</li>\n<li>\n<p>Type that is too small for the column, forces the reader to move closer to the page, effectively reducing the eye span and increasing the number of saccadic movements to the end of the line. This quickly leads to fatigue.<br />\n 对于列而言，该类型太小，会迫使阅读器移近页面，从而有效地减小了眼睛的跨度，并增加了行尾扫视的次数。 这很快导致疲劳。</p>\n</li>\n</ul>\n<p class=\"gallery\"><img data-src=\"https://i.loli.net/2020/11/06/iuAlbZpEgzTSHIq.jpg\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/11/06/9GUteVDNWwyBjKf.jpg\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/11/06/2rSI7jDLOyonMsf.jpg\" alt=\"\" /></p>\n<h2 id=\"typography-in-design-设计中的版式\"><a class=\"anchor\" href=\"#typography-in-design-设计中的版式\">#</a> Typography in Design 设计中的版式</h2>\n<p>Apart from the letters themselves the spacing between letters and between lines and margin spaces make a complete statement on the use of typography in design<br />\n 除了字母本身之外，字母之间以及线条和边距空间之间的间距还完整说明了排版在设计中的使用</p>\n<p><img data-src=\"https://i.loli.net/2020/11/06/gqAQEzYiBbeuovH.jpg\" alt=\"\" /></p>\n<h3 id=\"kerning-字距\"><a class=\"anchor\" href=\"#kerning-字距\">#</a> Kerning 字距</h3>\n<ul>\n<li>\n<p>Kerning involves adjusting the spacing between two letters in a given font. Note that this is a separate issue than tracking, which adjusts the space between all letters simultaneously<br />\n 字距调整涉及调整给定字体中两个字母之间的间距。 请注意，这是与分散不同的问题，分散会同时调整所有字母之间的间距</p>\n</li>\n<li>\n<p>Notice how the uppercase &quot;D&quot; in the example below stands out significantly from the rest of the word<br />\n 请注意，以下示例中的大写字母 “D” 与其他单词相比有何突出之处</p>\n</li>\n</ul>\n<p><img data-src=\"https://i.loli.net/2020/11/06/yERbJgIO4qkYud5.jpg\" alt=\"\" /></p>\n<h3 id=\"fonts-字体\"><a class=\"anchor\" href=\"#fonts-字体\">#</a> Fonts 字体</h3>\n<ul>\n<li>\n<p>There is an inherent psychology associated with certain types of fonts<br />\n 与某些类型的字体有关的内在心理</p>\n</li>\n<li>\n<p>Compare the fonts on left with those on the right<br />\n 比较左边的字体和右边的字体</p>\n</li>\n</ul>\n<p class=\"gallery\"><img data-src=\"https://i.loli.net/2020/11/06/8qA7hPeatibExOF.jpg\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/11/06/riQWZYs1B6PSztw.jpg\" alt=\"\" /></p>\n<h3 id=\"alignment-对齐方式\"><a class=\"anchor\" href=\"#alignment-对齐方式\">#</a> Alignment 对齐方式</h3>\n<p>Creative use of typography provides the right focus on this site design.<br />\n 字体创造性使用可以正确地关注此网站设计。</p>\n<p><img data-src=\"https://i.loli.net/2020/11/06/MYTzplFN8B63JR4.jpg\" alt=\"\" /></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1PM2ZWTW0tRWYwWSZhbXA7YWJfY2hhbm5lbD1Ta2V0Y2hUb2dldGhlcg==\">Improving Web and Mobile App Typography - 5 basic guidelines</span></p>\n<p><div class=\"video-container\"><iframe src=\"https://www.youtube.com/embed/O3fVMm-Ef0Y\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe></div></p>\n<h3 id=\"font-to-help-memory-字体以帮助记忆\"><a class=\"anchor\" href=\"#font-to-help-memory-字体以帮助记忆\">#</a> Font to help Memory 字体以帮助记忆</h3>\n<ul>\n<li>\n<p>A team of researchers at Australia's Royal Melbourne Institute of Technology has come up with a new type font called Sans Forgetica.<br />\n 澳大利亚皇家墨尔本理工学院的一组研究人员提出了一种新字体，称为 Sans Forgetica。<br />\nIts purpose is to help readers remember what has been written using it.<br />\n 其目的是帮助读者记住使用它编写的内容。</p>\n</li>\n<li>\n<p>The idea behind the new font was to create a slightly more difficult reading experience, forcing the reader to absorb each word as they stare at it.<br />\n 新字体背后的想法是创造稍微困难的阅读体验，迫使读者在凝视每个单词时吸收它们。</p>\n</li>\n</ul>\n<p><img data-src=\"https://i.loli.net/2020/11/06/PcCaW2HGbv1qo5V.jpg\" alt=\"\" /></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly90ZWNoeHBsb3JlLmNvbS9uZXdzLzIwMTgtMTAtZm9udC1yZWFkc2Fucy1mb3JnZXRpY2EuaHRtbA==\">A font that helps you remember what you read—Sans Forgetica</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1DRVh6U2VodTVITSZhbXA7ZmVhdHVyZT15b3V0dS5iZSZhbXA7YWJfY2hhbm5lbD1STUlUVW5pdmVyc2l0eQ==\">Sans Forgetica | The font to remember | RMIT University</span></p>\n<p><div class=\"video-container\"><iframe src=\"https://www.youtube.com/embed/CEXzSehu5HM\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe></div></p>\n<h1 id=\"color\"><a class=\"anchor\" href=\"#color\">#</a> Color</h1>\n<ul>\n<li>We see the world via a reflective color model<br />\n 我们通过反射色模型看到世界\n<ul>\n<li>Light strikes a surface and is reflected to our eyes -- Properties of surface dictate color<br />\n 光线撞击表面并反射到我们的眼睛 -- 表面的性质决定了颜色</li>\n<li>Subtractive color model -- Cyan Magenta, Yellow primaries<br />\n 减色模型 -- 青色、洋红色，黄色原色</li>\n</ul>\n</li>\n<li>Colors on display follow the emitted model<br />\n 显示器的颜色遵循发射模型\n<ul>\n<li>Additive color model -- Red Green Blue primaries<br />\n 加色模型 -- 红色、绿色、蓝色原色</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"hsv-model\"><a class=\"anchor\" href=\"#hsv-model\">#</a> HSV Model</h2>\n<p><img data-src=\"https://i.loli.net/2020/11/06/jeYOVS7ArRaNlCp.jpg\" alt=\"\" /></p>\n<ul>\n<li>\n<p>Hue<br />\n 色相</p>\n<ul>\n<li>Basic Color, Pigment<br />\n 基本颜色，颜料</li>\n<li>Wavelength (red, green, yellow, blue)<br />\n 波长（红色，绿色，黄色，蓝色）</li>\n<li>Spectrum (VIBGYOR)<br />\n 频谱<br />\n<img data-src=\"https://i.loli.net/2020/11/06/oOaXTyiYrZuQDS2.jpg\" alt=\"\" /></li>\n</ul>\n</li>\n<li>\n<p>Saturation<br />\n 饱和度</p>\n<ul>\n<li>Relative purity, Brightness or intensity of a color<br />\n 相对纯度，颜色的亮度或强度</li>\n<li>Pastel versus strong (baby blue, sky blue, royal blue)<br />\n 柔 vs 强（浅蓝色，天蓝色，宝蓝色）<br />\n<img data-src=\"https://i.loli.net/2020/11/06/gIZ5Qj9ALErcwbm.jpg\" alt=\"\" /></li>\n</ul>\n</li>\n<li>\n<p>Value<br />\n 价值</p>\n<ul>\n<li>Lightness or darkness of a color<br />\n 颜色的明暗</li>\n<li>Amount of energy (white, light gray, dark gray, black)<br />\n 能量（白色，浅灰色，深灰色，黑色）</li>\n<li>Usually V = 0.299*R + 0.587*G + 0.114*B<br />\n<img data-src=\"https://i.loli.net/2020/11/06/rI9Bkl3DiN2La76.jpg\" alt=\"\" /></li>\n</ul>\n</li>\n<li>\n<p>Most commonly used model<br />\n 最常用的模型</p>\n</li>\n</ul>\n<h2 id=\"guidelines\"><a class=\"anchor\" href=\"#guidelines\">#</a> Guidelines</h2>\n<ul>\n<li>Display color images on black background<br />\n 在黑色背景上显示彩色图像</li>\n<li>Choose bright foreground color (white, bold green …)<br />\n 选择明亮的前景色（白色，绿色的粗体...）</li>\n<li>Avoid brown and green as background color<br />\n 避免使用棕色和绿色作为背景色</li>\n<li>Be sure foreground colors contrast in both brightness and hue with background colors<br />\n 确保前景色与背景色在亮度和色调上形成对比</li>\n<li>Use color sparingly – design b/w and then add color<br />\n 少用颜色–设计黑白，然后添加颜色</li>\n<li>Use color to draw attention, communicate organization and to establish relationships<br />\n 用颜色吸引注意力，沟通组织并建立关系</li>\n<li>Avoid using color in non-task related ways<br />\n 避免以与任务无关的方式使用颜色</li>\n</ul>\n<h2 id=\"associations\"><a class=\"anchor\" href=\"#associations\">#</a> Associations</h2>\n<table>\n<tbody>\n<tr>\n<td>\n<p>Red<br />\n 红色</p>\n</td>\n<td>\n<p>Hot, warning, aggression, love<br />\n 热，警告，侵略，爱</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>Pink<br />\n 粉红色</p>\n</td>\n<td>\n<p>Female, Cute, Cotton, Candy<br />\n 女性，可爱，棉花，糖果</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>Orange<br />\n 橙色</p>\n</td>\n<td>\n<p>Autumn, Warm, Halloween<br />\n 秋天，温暖，万圣节</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>Yellow<br />\n 黄色</p>\n</td>\n<td>\n<p>Happy, Caution, Joy<br />\n 快乐，谨慎，喜悦</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>Brown<br />\n 棕色</p>\n</td>\n<td>\n<p>Warm, Fall, Dirt, Earth<br />\n 温暖，秋天，泥土，地球</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>Green<br />\n 绿色</p>\n</td>\n<td>\n<p>Lush, Pastoral, Envy<br />\n 郁郁葱葱，田园风光，嫉妒</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>Purple<br />\n 紫色</p>\n</td>\n<td>\n<p>Royal, Sophisticated, Barney<br />\n 皇家，精致，巴尼</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"cultural-colors\"><a class=\"anchor\" href=\"#cultural-colors\">#</a> Cultural Colors</h2>\n<p><img data-src=\"https://i.loli.net/2020/11/06/wu812AmKhnDMRtB.jpg\" alt=\"\" /></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1uWDBESGQ1UU5TOCZhbXA7YWJfY2hhbm5lbD1QQlNvZmZib29r\">The Effect of Color | Off Book | PBS Digital Studios</span></p>\n<p><div class=\"video-container\"><iframe src=\"https://www.youtube.com/embed/nX0DHd5QNS8\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe></div></p>\n<h1 id=\"minimalist-design-极简设计\"><a class=\"anchor\" href=\"#minimalist-design-极简设计\">#</a> Minimalist Design 极简设计</h1>\n<ul>\n<li>&quot;Less is More&quot;<br />\n“少即是多”</li>\n<li>Identify what is really needed<br />\n 确定真正需要的</li>\n<li>If complex to explain/document, then redesign<br />\n 如果要解释 / 记录很复杂，请重新设计</li>\n<li>Concise language<br />\n 简洁的语言</li>\n<li>Avoid extraneous pictures and information<br />\n 避免多余的图片和信息\n<ul>\n<li>Fewer options and menu choices<br />\n 更少的选项和菜单选择</li>\n<li>Reduces planning time<br />\n 减少计划时间</li>\n<li>Extra options can confuse users<br />\n 额外的选项可能会使用户感到困惑</li>\n<li>Reduces manual size, etc.<br />\n 缩小手动尺寸等</li>\n<li>E.g. in XXX product: &quot;Show Actuator&quot;<br />\n 例如 在 XXX 产品中：“显示执行器”</li>\n</ul>\n</li>\n</ul>\n<p class=\"gallery\"><img data-src=\"https://i.loli.net/2020/11/06/5aruD7XoEMPHmqh.jpg\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/11/06/wJdZPluFzLacmEj.jpg\" alt=\"\" /></p>\n<p>Minimalism is a way of thinking, a process, which strips the subject down to its bare bones.<br />\n 极简主义是一种思维方式，是一个过程，可以将主体分解为裸露的骨头。</p>\n<p>Removing all these superfluous elements leaves the 'core' essentials, free from distraction.<br />\n 删除所有这些多余的元素将使 “核心” 要素免于分心。</p>\n<p>It's more than a trend or fashion, it's is one of the most significant design movements of the 20th and early 21st century.<br />\n 它不只是一种趋势或时尚，它还是 20 世纪和 21 世纪初最重要的设计运动之一。</p>\n<p class=\"gallery\"><img data-src=\"https://i.loli.net/2020/11/06/2bF45Iq7U9kOLix.jpg\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/11/06/7ohrungXk2tUMfS.jpg\" alt=\"\" /></p>\n<p>The MOMA home screen is designed with the beautiful ideas of minimalism.<br />\nMOMA 主屏幕采用极简主义的精美设计。</p>\n<p>The subtle colors and minimal titles – give it an aura of sophistication and class.<br />\n 细腻的色彩和极少的标题–赋予其精致和一流的氛围。</p>\n<p>However, the use of icons to browse various data items is impossible to remember and results in extensive searching.<br />\n 但是，使用图标浏览各种数据项是不可能记住的，并且会导致大量搜索。</p>\n<dl>\n<dt>Use color 使用颜色</dt>\n<dd>don't just go for black and white because of a self-imposed (and unnecessary) restriction.<br />\n 不仅限于黑白，因为存在自我限制（并且是不必要的）。<br />\nUse as much color as the design requires – 'too much' color could be used as a process of juxtaposition.<br />\n 根据设计需要，使用尽可能多的颜色 - “过多” 的颜色可以并置使用。<br />\nYou also shouldn't focus on leaving white space for the sake of it, since 'open' space is more critical to communicate effectively.<br />\n 同样，也不应该为此而留白空间，因为 “开放” 空间对于有效沟通至关重要。</dd>\n<dt>Think about the user 考虑用户</dt>\n<dd>To paraphrase Steve Jobs, &quot;design is how it works, not just what it looks and feels like&quot;.<br />\n 用史蒂夫・乔布斯的话解释：“设计是它的工作方式，而不仅仅是它的外观和感觉”。<br />\nWhen used correctly, minimalist techniques emphasize functionality and typography equally.<br />\n 如果使用得当，极简主义技术会同时强调功能和排版。<br />\nHaving a miniscule amount of information on a near empty page will just scare people away.<br />\n 在接近空白的页面上只有很少量的信息，只会吓跑用户。</dd>\n<dt>Embrace clarity, not chaos 拥抱清晰，不要混乱</dt>\n<dd>Don't make the mistake of thinking a minimalist design adds mystery to your brand or website, you'll just end up confusing people.<br />\n 不要误以为极简设计会给您的品牌或网站增添神秘感，最终只会使人们感到困惑。<br />\nIf people want mystery, they'll watch Sherlock; when they use a website, read a magazine or open an app, they want clarity, accessibility and intuitive functions.<br />\n 如果想要神秘，人们会看 Sherlock 的。 当他们使用网站，阅读杂志或打开应用程序时，他们想要清晰的、可访问的和直观的功能。</dd>\n</dl>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1jWkRQamQtRmM1dyZhbXA7YWJfY2hhbm5lbD1CbG9vbWJlcmdRdWlja1Rha2U=\">Brand Free: How Minimalist Design Connects People</span></p>\n<p><div class=\"video-container\"><iframe src=\"https://www.youtube.com/embed/cZDPjd-Fc5w\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe></div></p>\n<p class=\"gallery\"><img data-src=\"https://i.loli.net/2020/11/06/hyETuV8sgMJlcAH.jpg\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/11/06/h9jaHKY5yXn346P.jpg\" alt=\"\" /></p>\n","tags":["计算机科学","Master of Software Engineering","ITMD 534. Human Computer Interaction","人机交互"]},{"id":"https://shoka.lostyu.me/computer-science/mse/itmd-510/week-10/","url":"https://shoka.lostyu.me/computer-science/mse/itmd-510/week-10/","title":"Week 10. Database","date_published":"2020-10-28T07:26:32.000Z","content_html":"<h1 id=\"notes\"><a class=\"anchor\" href=\"#notes\">#</a> Notes</h1>\n<p>DATABASE MANAGEMENT SYSTEM (DBMS)</p>\n<h2 id=\"why-use-a-dbms\"><a class=\"anchor\" href=\"#why-use-a-dbms\">#</a> WHY USE A DBMS?</h2>\n<p>Storing data in traditional text or binary files has its <ins>limits</ins></p>\n<ul>\n<li>well suited for applications that store only a small amount of data</li>\n<li>not practical for applications that must store a large amount of data</li>\n<li>simple operations become cumbersome and inefficient as data increases</li>\n</ul>\n<p>A database management system (DBMS) is software that is specifically designed to work with large amounts of data in an efficient &amp; organized manner</p>\n<ul>\n<li>Data is stored using the DBMS</li>\n<li>Applications written in Java or other languages communicate with the DBMS rather than manipulate the data directly</li>\n<li>DBMS carries out instructions and sends the results back to the application</li>\n</ul>\n<h2 id=\"jdbc-provides-connectivity-to-the-dbms\"><a class=\"anchor\" href=\"#jdbc-provides-connectivity-to-the-dbms\">#</a> JDBC PROVIDES CONNECTIVITY TO THE DBMS</h2>\n<ul>\n<li>JDBC stands for Java database connectivity</li>\n<li>It is the technology that makes communication possible between the Java application and DBMS</li>\n<li>The Java API contains numerous JDBC classes that allow your Java applications to interact with a DBMS<br />\n<img data-src=\"https://i.loli.net/2020/11/15/rKPtn8wA2u17sXH.png\" alt=\"\" /></li>\n</ul>\n<h3 id=\"use-sql-to-send-commands-to-dbms\"><a class=\"anchor\" href=\"#use-sql-to-send-commands-to-dbms\">#</a> USE SQL TO SEND COMMANDS TO DBMS</h3>\n<ul>\n<li>SQL stands for structured query language</li>\n<li>A <ins>standard</ins> language for working with database management systems</li>\n<li><ins>Not</ins> used as a general programming language</li>\n<li>Consists of several <strong>key words</strong>, used to construct statements known as  <code>queries</code></li>\n<li>Statements or queries are passed from the application to the DBMS using API method calls  <code>strings</code></li>\n<li>Serve as instructions for the DBMS to carry out operations on its data</li>\n</ul>\n<h3 id=\"jdbc-needs-a-dbms\"><a class=\"anchor\" href=\"#jdbc-needs-a-dbms\">#</a> JDBC Needs a DBMS</h3>\n<p>To use JDBC to work with a database you will need a DBMS</p>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" disabled=\"true\" /><label for=\"cbx_0\"> Java DB</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_1\" disabled=\"true\" /><label for=\"cbx_1\"> Oracle</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_2\" disabled=\"true\" /><label for=\"cbx_2\"> Microsoft SQL Server</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_3\" disabled=\"true\" /><label for=\"cbx_3\"> DB2</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_4\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_4\"> MySQL</label></li>\n</ul>\n<h3 id=\"jdbc-classes-for-processing\"><a class=\"anchor\" href=\"#jdbc-classes-for-processing\">#</a> JDBC CLASSES FOR PROCESSING</h3>\n<ul>\n<li>Java comes with a standard set of JDBC classes  <code>java.sql</code>  and  <code>javax.sql</code></li>\n</ul>\n<p>Using JDBC in a Java app requires</p>\n<ol>\n<li>Get a connection to the database</li>\n<li>Pass a string containing an SQL statement to the DBMS</li>\n<li>If the SQL statement has results to send back, they will be sent back as a <ins>result set</ins></li>\n<li>When finished working with the database, <ins>close</ins> the connection</li>\n</ol>\n<h2 id=\"tables-rows-and-columns\"><a class=\"anchor\" href=\"#tables-rows-and-columns\">#</a> Tables, Rows, and Columns</h2>\n<ul>\n<li>A database management system stores data in a database</li>\n<li>A <ins>database</ins> is organized into one or more tables</li>\n<li>Each <ins>table</ins> holds a collection of related data, organized into rows and columns</li>\n<li>A <ins>row</ins> is a complete set of information (tuple) about a single item, divided into columns</li>\n<li>Each <ins>column</ins> is an individual piece of information about the item</li>\n</ul>\n<p class=\"gallery\"><img data-src=\"https://i.loli.net/2020/11/15/wFMvsBJCr13jqQV.png\" alt=\"\" title=\"Database Organization\" /><br />\n<img data-src=\"https://i.loli.net/2020/11/15/ZudDaRQw8hEk1j3.png\" alt=\"\" title=\"Parts of a Coffee Database Table\" /></p>\n<h3 id=\"column-data-types\"><a class=\"anchor\" href=\"#column-data-types\">#</a> Column Data Types</h3>\n<p>Columns in a database are assigned an SQL data type</p>\n<p>SQL data types are generally compatible with Java data types</p>\n<p><img data-src=\"https://i.loli.net/2020/11/15/xRY7eriyzIa4HdS.png\" alt=\"\" /></p>\n<p>The Coffee Table Column Data Types</p>\n<ul>\n<li>\n<p><code>Description</code>  column data type is  <code>CHAR(25)</code></p>\n<ul>\n<li>String with a fixed length of 25 characters</li>\n<li>Compatible with the  <code>String</code>  type in Java</li>\n</ul>\n</li>\n<li>\n<p><code>ProdNum</code>  column data type is  <code>CHAR(10)</code></p>\n<ul>\n<li>String with a fixed length of 10 characters</li>\n<li>Compatible with the  <code>String</code>  type in Java</li>\n</ul>\n</li>\n<li>\n<p><code>Price</code>  column data type is  <code>DOUBLE</code></p>\n<ul>\n<li>Double-precision floating-point number</li>\n<li>Compatible with the  <code>double</code>  data type in Java</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"primary-keys\"><a class=\"anchor\" href=\"#primary-keys\">#</a> Primary Keys</h3>\n<ul>\n<li>\n<p>A <strong>primary key</strong> is a column that holds a unique value for each row in a database table<br />\nIn the Coffee table,  <code>ProdNum</code>  is the primary key</p>\n<ul>\n<li>Each type of coffee has a unique product number</li>\n<li>Used to identify any coffee stored in the table</li>\n</ul>\n</li>\n<li>\n<p>A primary key <ins>can be</ins> the combination of several columns in a table</p>\n</li>\n</ul>\n<h2 id=\"the-sql-select-statement\"><a class=\"anchor\" href=\"#the-sql-select-statement\">#</a> the SQL  <code>SELECT</code>  Statement</h2>\n<p>The  <code>SELECT</code>  statement is used to <ins>retrieve</ins> the rows in a table</p>\n<ul>\n<li>\n<p><code>Columns</code>  is one or more column names</p>\n<ul>\n<li>Multiple column names are separated with a comma</li>\n<li>The  <code>*</code>  character can be used to retrieve <ins>all</ins> columns in the table</li>\n</ul>\n</li>\n<li>\n<p><code>Table</code>  is a table name</p>\n</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"><span>Examples</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> Description <span class=\"token keyword\">FROM</span> Coffee</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">SELECT</span> Description<span class=\"token punctuation\">,</span> Price <span class=\"token keyword\">FROM</span> Coffee</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> Coffee</pre></td></tr></table></figure><h3 id=\"specifying-search-criteria-with-the-where-clause\"><a class=\"anchor\" href=\"#specifying-search-criteria-with-the-where-clause\">#</a> Specifying Search Criteria with the  <code>WHERE</code>  clause</h3>\n<p>The  <code>WHERE</code>  clause can be used with the  <code>SELECT</code>  statement to specify a search criteria</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">Columns</span> <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">Table</span> <span class=\"token keyword\">WHERE</span> Criteria</pre></td></tr></table></figure><ul>\n<li><code>Criteria</code>  is a conditional expression</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"><span>Example</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> Coffee <span class=\"token keyword\">WHERE</span> Price <span class=\"token operator\">></span> <span class=\"token number\">12.00</span></pre></td></tr></table></figure><p><img data-src=\"https://i.loli.net/2020/11/15/ISVJg2nborG3ufx.png\" alt=\"\" /></p>\n<ul>\n<li><ins>Only</ins> the rows that meet the search criteria are returned in the result set</li>\n<li>A <em>result set</em> is an object that contains the results of an SQL statement</li>\n</ul>\n<h3 id=\"sql-relational-operators\"><a class=\"anchor\" href=\"#sql-relational-operators\">#</a> SQL Relational Operators</h3>\n<p>Standard SQL supports the following relational operators:</p>\n<table>\n<thead>\n<tr>\n<th>Operator</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&gt;</code></td>\n<td>Greater than</td>\n</tr>\n<tr>\n<td><code>&lt;</code></td>\n<td>Less than</td>\n</tr>\n<tr>\n<td><code>&gt;=</code></td>\n<td>Greater than or equal to</td>\n</tr>\n<tr>\n<td><code>&lt;=</code></td>\n<td>Less than or equal to</td>\n</tr>\n<tr>\n<td><code>=</code></td>\n<td>Equal to</td>\n</tr>\n<tr>\n<td><code>&lt;&gt;</code></td>\n<td>Not equal to</td>\n</tr>\n</tbody>\n</table>\n<p>Notice a few SQL relational operators are different than in Java</p>\n<ul>\n<li>SQL equal to operator is  <code>=</code></li>\n<li>SQL not equal to operator is  <code>&lt;&gt;</code></li>\n</ul>\n<h3 id=\"string-comparisons-in-sql\"><a class=\"anchor\" href=\"#string-comparisons-in-sql\">#</a> String Comparisons in SQL</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> Coffee <span class=\"token keyword\">WHERE</span> Description <span class=\"token operator\">=</span> <span class=\"token string\">'French Roast Dark'</span></pre></td></tr></table></figure><ul>\n<li>In SQL, strings are enclosed in single quotes</li>\n</ul>\n<blockquote>\n<p>Warning!</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> Coffee <span class=\"token keyword\">WHERE</span> Description <span class=\"token operator\">=</span> <span class=\"token string\">'french roast dark'</span></pre></td></tr></table></figure><ul>\n<li>String comparisons in SQL are case sensitive</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> Coffee </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">WHERE</span> UPPER<span class=\"token punctuation\">(</span>Description<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">'FRENCH ROAST DARK'</span></pre></td></tr></table></figure><ul>\n<li>The  <code>UPPER()</code>  or  <code>LOWER()</code>  functions convert the string to uppercase or lowercase and can help prevent case sensitive errors when comparing strings</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> Coffee <span class=\"token keyword\">WHERE</span> Description <span class=\"token operator\">=</span><span class=\"token string\">'Joe''s Special Blend'</span></pre></td></tr></table></figure><ul>\n<li>If a single quote  <code>'</code>  is part of a string, use two single quotes  <code>''</code></li>\n</ul>\n<h3 id=\"using-the-like-operator\"><a class=\"anchor\" href=\"#using-the-like-operator\">#</a> Using the  <code>LIKE</code>  Operator</h3>\n<p>In SQL, the  <code>LIKE</code>  operator can be used to search for a substring</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> Coffee <span class=\"token keyword\">WHERE</span> Description <span class=\"token operator\">LIKE</span> <span class=\"token string\">'%Decaf%'</span></pre></td></tr></table></figure><ul>\n<li>The  <code>%</code>  symbol is used as a wildcard for multiple characters</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> Coffee <span class=\"token keyword\">WHERE</span> ProdNum <span class=\"token operator\">LIKE</span> <span class=\"token string\">'2_-00_'</span></pre></td></tr></table></figure><ul>\n<li>The underscore  <code>_</code>  is a used as a wildcard for a single character</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> Coffee </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">WHERE</span> Description <span class=\"token operator\">NOT</span> <span class=\"token operator\">LIKE</span> <span class=\"token string\">'%Decaf%'</span></pre></td></tr></table></figure><ul>\n<li>The  <code>NOT</code>  operator is used to disqualify the search criteria</li>\n</ul>\n<h3 id=\"using-and-and-or\"><a class=\"anchor\" href=\"#using-and-and-or\">#</a> Using  <code>AND</code>  and  <code>OR</code></h3>\n<p>The  <code>AND</code>  and  <code>OR</code>  operators can be used to specify multiple search criteria in a  <code>WHERE</code>  clause</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> Coffee </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">WHERE</span> Price <span class=\"token operator\">></span> <span class=\"token number\">10.00</span> <span class=\"token operator\">AND</span> Price <span class=\"token operator\">&lt;</span> <span class=\"token number\">14.00</span></pre></td></tr></table></figure><ul>\n<li>The  <code>AND</code>  operator requires that <ins>both</ins> search criteria be true</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> Coffee </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">WHERE</span> Description <span class=\"token operator\">LIKE</span> <span class=\"token string\">'%Dark%'</span> <span class=\"token operator\">OR</span> ProdNum <span class=\"token operator\">LIKE</span> <span class=\"token string\">'16%'</span></pre></td></tr></table></figure><ul>\n<li>The  <code>OR</code>  operator requires that <ins>either</ins> search criteria be true</li>\n</ul>\n<h3 id=\"sorting-results-of-a-select-query\"><a class=\"anchor\" href=\"#sorting-results-of-a-select-query\">#</a> Sorting results of a Select query</h3>\n<p>Use the  <code>ORDER BY</code>  clause to sort results according to a column</p>\n<ul>\n<li>Sorted in ascending order  <code>ASC</code>  by default</li>\n<li>Use the  <code>DESC</code>  operator to sort results in descending order</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"><span>Examples</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> Coffee <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> Price</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> Coffee <span class=\"token keyword\">WHERE</span> Price <span class=\"token operator\">></span> <span class=\"token number\">9.95</span> <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> Price <span class=\"token keyword\">DESC</span></pre></td></tr></table></figure><h3 id=\"mathematical-functions\"><a class=\"anchor\" href=\"#mathematical-functions\">#</a> Mathematical Functions</h3>\n<h4 id=\"the-avg-function\"><a class=\"anchor\" href=\"#the-avg-function\">#</a> The  <code>AVG</code>  function</h4>\n<p>calculates the average value in a particular column</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>Price<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> Coffee</pre></td></tr></table></figure><h4 id=\"the-sum-function\"><a class=\"anchor\" href=\"#the-sum-function\">#</a> The  <code>SUM</code>  function</h4>\n<p>calculates the sum of a column's values</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token function\">SUM</span><span class=\"token punctuation\">(</span>Price<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> Coffee</pre></td></tr></table></figure><h4 id=\"the-min-and-max-functions\"><a class=\"anchor\" href=\"#the-min-and-max-functions\">#</a> The  <code>MIN</code>  and  <code>MAX</code>  functions</h4>\n<p>calculate the minimum and maximum values found in a column</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token function\">MIN</span><span class=\"token punctuation\">(</span>Price<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> Coffee</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>Price<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> Coffee</pre></td></tr></table></figure><h4 id=\"the-count-function\"><a class=\"anchor\" href=\"#the-count-function\">#</a> The  <code>COUNT</code>  function</h4>\n<p>can be used to determine the number of rows in a table</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> Coffee</pre></td></tr></table></figure><h2 id=\"inserting-rows\"><a class=\"anchor\" href=\"#inserting-rows\">#</a> Inserting rows</h2>\n<p>In SQL, the  <code>INSERT</code>  statement inserts a row into a table</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> TableName <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span>Value1<span class=\"token punctuation\">,</span> Value2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li><code>TableName</code>  is the name of the database table</li>\n<li><code>Value1, Value2, ...</code>  is a list of column values</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"><span>Example</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> Coffee </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'Honduran Dark'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'22-001'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8.65</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li><ins>Strings</ins> are enclosed in single quotes</li>\n<li>Values appear in the <ins>same order</ins> as the columns in the table</li>\n</ul>\n<p>If column order is uncertain, the following general format can be used</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> TableName </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token punctuation\">(</span>ColumnName1<span class=\"token punctuation\">,</span> ColumnName2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">VALUES</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token punctuation\">(</span>Value1<span class=\"token punctuation\">,</span> Value2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>where....</p>\n<ul>\n<li><code>ColumnName1, ColumnName2, ...</code>  is a list of column names</li>\n<li><code>Value1, Value2, ...</code>  is a list of corresponding column values</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"><span>Example</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> Coffee </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token punctuation\">(</span>ProdNum<span class=\"token punctuation\">,</span> Price<span class=\"token punctuation\">,</span> Description<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">VALUES</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token punctuation\">(</span><span class=\"token string\">'22-001'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8.65</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Honduran Dark'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>Keep in mind that primary key values must be <ins>unique</ins></li>\n<li>For example, a duplicate  <code>ProdNum</code>  is not allowed in the Coffee table</li>\n</ul>\n<h2 id=\"updating-an-existing-row\"><a class=\"anchor\" href=\"#updating-an-existing-row\">#</a> Updating an Existing Row</h2>\n<p>In SQL, the  <code>UPDATE</code>  statement changes the contents of an existing row in a table</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">UPDATE</span> <span class=\"token keyword\">Table</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">SET</span> <span class=\"token keyword\">Column</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">Value</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">WHERE</span> Criteria</pre></td></tr></table></figure><ul>\n<li><code>Table</code>  is a table name</li>\n<li><code>Column</code>  is a column name</li>\n<li><code>Value</code>  is the value to store in the column</li>\n<li><code>Criteria</code>  is a conditional expression</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"><span>Example</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">UPDATE</span> Coffee</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">SET</span> Price <span class=\"token operator\">=</span> <span class=\"token number\">9.95</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">WHERE</span> Description <span class=\"token operator\">=</span> <span class=\"token string\">'Galapagos Organic Medium'</span></pre></td></tr></table></figure><p>It is possible to update more than one row</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"><span>Example</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">UPDATE</span> Coffee</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">SET</span> Price <span class=\"token operator\">=</span> <span class=\"token number\">12.95</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">WHERE</span> ProdNum <span class=\"token operator\">LIKE</span> <span class=\"token string\">'21%'</span></pre></td></tr></table></figure><ul>\n<li>Updates the price of all rows where the product number begins with 21</li>\n</ul>\n<blockquote>\n<p>Warning!</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">UPDATE</span> Coffee</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">SET</span> Price <span class=\"token operator\">=</span> <span class=\"token number\">4.95</span></pre></td></tr></table></figure><ul>\n<li>Because this statement does not have a  <code>WHERE</code>  clause, it will change the price for every row</li>\n</ul>\n<h2 id=\"deleting-rows-with-the-delete-statement\"><a class=\"anchor\" href=\"#deleting-rows-with-the-delete-statement\">#</a> Deleting Rows with the  <code>DELETE</code>  Statement</h2>\n<p>In SQL, the  <code>DELETE</code>  statement deletes one or more rows in a table</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">Table</span> <span class=\"token keyword\">WHERE</span> Criteria</pre></td></tr></table></figure><ul>\n<li><code>Table</code>  is the table name</li>\n<li><code>Criteria</code>  is a conditional expression</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"><span>Example</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">FROM</span> Coffee <span class=\"token keyword\">WHERE</span> ProdNum <span class=\"token operator\">=</span> <span class=\"token string\">'20-001'</span></pre></td></tr></table></figure><ul>\n<li>Deletes a single row in the Coffee table where the product number is 20-001</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">FROM</span> Coffee <span class=\"token keyword\">WHERE</span> Description <span class=\"token operator\">=</span> <span class=\"token string\">'Sumatra%'</span></pre></td></tr></table></figure><ul>\n<li>Deletes all rows in the Coffee table where the description begins with Sumatra</li>\n</ul>\n<blockquote>\n<p>Warning!</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">FROM</span> Coffee</pre></td></tr></table></figure><ul>\n<li>Because this statement does not have a  <code>WHERE</code>  clause, it will delete every row in the Coffee table</li>\n</ul>\n<h2 id=\"creating-tables-with-the-create-table-statement\"><a class=\"anchor\" href=\"#creating-tables-with-the-create-table-statement\">#</a> Creating Tables with the  <code>CREATE TABLE</code>  Statement</h2>\n<p>In SQL, the  <code>CREATE TABLE</code>  statement adds a new table to the database</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> TableName</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token punctuation\">(</span>ColumnName1 DataType1<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ColumnName2 DataType2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>\n<p><code>TableName</code>  is the name of the table</p>\n</li>\n<li>\n<p><code>ColumnName1</code>  is the name of the first column</p>\n</li>\n<li>\n<p><code>DataType1</code>  is the SQL data type for the first column</p>\n</li>\n<li>\n<p><code>ColumnName2</code>  is the name of the second column</p>\n</li>\n<li>\n<p><code>DataType2</code>  is the SQL data type for the second column</p>\n</li>\n<li>\n<p>The  <code>PRIMARY KEY</code>  qualifier is used to specify a column as the primary key</p>\n</li>\n<li>\n<p>The  <code>NOT NULL</code>  qualifier is used to specify that the column must contain a value for every row</p>\n<ul>\n<li>Qualifiers should be listed after the column's data type</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"><span>Example</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> Customer</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token punctuation\">(</span> Name <span class=\"token keyword\">CHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Address <span class=\"token keyword\">CHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     City <span class=\"token keyword\">CHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> State <span class=\"token keyword\">CHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Zip <span class=\"token keyword\">CHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>Creates a new table named  <code>Customer</code>  with the columns  <code>Name</code> ,  <code>Address</code> ,  <code>City</code> ,  <code>State</code> , and  <code>Zip</code></li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"><span>Example</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> Customer</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token punctuation\">(</span> CustomerNumber <span class=\"token keyword\">CHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     Name <span class=\"token keyword\">CHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Address <span class=\"token keyword\">CHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     City <span class=\"token keyword\">CHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> State <span class=\"token keyword\">CHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Zip <span class=\"token keyword\">CHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>Creates a new table named  <code>Customer</code>  with the columns  <code>CustomerNumber</code> , which is the primary key,  <code>Name</code> ,  <code>Address</code> ,  <code>City</code> ,  <code>State</code> , and  <code>Zip</code></li>\n</ul>\n<p>Example: CreateCustomerTable.java</p>\n<h2 id=\"removing-a-table-with-the-drop-table-statement\"><a class=\"anchor\" href=\"#removing-a-table-with-the-drop-table-statement\">#</a> Removing a Table with the  <code>DROP TABLE</code>  Statement</h2>\n<p>In SQL, the  <code>DROP TABLE</code>  statement deletes an existing table from the database</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TABLE</span> TableName</pre></td></tr></table></figure><ul>\n<li><code>TableName</code>  is the name of the table you wish to delete</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Example</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>DROP TABLE <span class=\"token class-name\">Customer</span></pre></td></tr></table></figure><ul>\n<li>Deletes the  <code>Customer</code>  table from the  <code>CoffeeDB</code>  database</li>\n<li>Useful if you make a mistake creating a table</li>\n<li>Simply delete the table and recreate</li>\n</ul>\n<h2 id=\"relational-data\"><a class=\"anchor\" href=\"#relational-data\">#</a> Relational Data</h2>\n<ul>\n<li>A  <code>foreign key</code>  is a column in one table that references a  <code>primary key</code>  in another table</li>\n<li>Creates a relationship between the tables</li>\n</ul>\n<p>Example:<br />\nUnpaidOrder table:</p>\n<table>\n<tbody>\n<tr>\n<td>CustomerNumber</td>\n<td>CHAR(10)</td>\n<td>Foreign Key</td>\n</tr>\n<tr>\n<td>ProdNum</td>\n<td>CHAR(10)</td>\n<td>Foreign Key</td>\n</tr>\n<tr>\n<td>OrderDate</td>\n<td>CHAR(10)</td>\n</tr>\n<tr>\n<td>Quantity</td>\n<td>DOUBLE</td>\n</tr>\n<tr>\n<td>Cost</td>\n<td>DOUBLE</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>The  <code>CustomerNumber</code>  column references the  <code>Customer</code>  table</li>\n<li>The  <code>ProdNum</code>  column references the  <code>Coffee</code>  table</li>\n<li>This creates a relationship between the tables of the  <code>CoffeeDB</code>  database</li>\n</ul>\n<p>The following SQL statement creates the UnpaidOrder table in the CoffeeDB database:</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> UnpaidOrder</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>CustomerNumber <span class=\"token keyword\">CHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token keyword\">REFERENCES</span> Customer<span class=\"token punctuation\">(</span>CustomerNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  ProdNum <span class=\"token keyword\">CHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     <span class=\"token keyword\">REFERENCES</span> Coffee<span class=\"token punctuation\">(</span>ProdNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  OrderDate <span class=\"token keyword\">CHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  Quantity <span class=\"token keyword\">DOUBLE</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  Cost <span class=\"token keyword\">DOUBLE</span> <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>The  <code>REFERENCES</code>  qualifier ensures referential integrity between tables\n<ul>\n<li>The  <code>CustomerNumber</code>  in the  <code>UnpaidOrder</code>  table must contain a valid  <code>CustomerNumber</code>  from the  <code>Customer</code>  table</li>\n<li>The  <code>ProdNum</code>  in the  <code>UnpaidOrder</code>  table must contain a valid  <code>ProdNum</code>  from the  <code>Coffee</code>  table</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"entity-relationship-diagrams\"><a class=\"anchor\" href=\"#entity-relationship-diagrams\">#</a> Entity Relationship Diagrams</h3>\n<p>An entity relationship diagram shows the relationships between tables</p>\n<p><img data-src=\"https://i.loli.net/2020/11/15/cWmpGkRNtTyHqgw.png\" alt=\"\" /></p>\n<ul>\n<li>Primary keys are denoted with (PK)</li>\n<li>Lines drawn between tables show how they are related\n<ul>\n<li>The ends of each line show either a 1 or an infinity symbol (∞)\n<ul>\n<li>The infinity symbol means many and number 1 means one.</li>\n</ul>\n</li>\n<li>A one to many relationship means that for each row in table A there can be many rows in table B that reference it.</li>\n<li>A many to one relationship means that many rows in table A can reference a single row in table B.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"coffeedb-relationships-left-to-right\"><a class=\"anchor\" href=\"#coffeedb-relationships-left-to-right\">#</a> CoffeeDB Relationships Left to Right</h3>\n<p><img data-src=\"https://i.loli.net/2020/11/15/x1GwsXS9pV4l2BQ.png\" alt=\"\" /></p>\n<ul>\n<li>One to many relationship between  <code>Customer</code>  and  <code>UnpaidOrder</code>\n<ul>\n<li>One row in the  <code>Customer</code>  table may be referenced by many rows in the  <code>UnpaidOrder</code>  table</li>\n</ul>\n</li>\n<li>Many to one relationship between the  <code>UnpaidOrder</code>  and  <code>Coffee</code>  tables\n<ul>\n<li>Many rows in the  <code>UnpaidOrder</code>  table may reference a single row in the  <code>Coffee</code>  table.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"coffeedb-relationships-right-to-left\"><a class=\"anchor\" href=\"#coffeedb-relationships-right-to-left\">#</a> CoffeeDB Relationships Right to Left</h3>\n<p><img data-src=\"https://i.loli.net/2020/11/15/tl8P64OVzg5jfHM.png\" alt=\"\" /></p>\n<ul>\n<li>One to many relationship between  <code>Coffee</code>  and  <code>UnpaidOrder</code>\n<ul>\n<li>One row in the  <code>Coffee</code>  table may be referenced by many rows in the  <code>UnpaidOrder</code>  table</li>\n</ul>\n</li>\n<li>Many to one relationship between  <code>UnpaidOrder</code>  and  <code>Customer</code> <br />\nMany rows in the  <code>UnpaidOrder</code>  table may reference a single row in the  <code>Customer</code>  table.</li>\n</ul>\n<h3 id=\"joining-data-from-multiple-tables\"><a class=\"anchor\" href=\"#joining-data-from-multiple-tables\">#</a> Joining Data from Multiple Tables</h3>\n<p>In SQL, you must use qualified column names in a SELECT statement if the tables have columns with the same name</p>\n<p>A qualified column name takes the following form:  <code>TableName.ColumnName</code></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   Customer<span class=\"token punctuation\">.</span>CustomerNumber<span class=\"token punctuation\">,</span> Customer<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   UnpaidOrder<span class=\"token punctuation\">.</span>OrderDate<span class=\"token punctuation\">,</span> UnpaidOrder<span class=\"token punctuation\">.</span>Cost<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   Coffee<span class=\"token punctuation\">.</span>Description</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">FROM</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   Customer<span class=\"token punctuation\">,</span> UnpaidOrder<span class=\"token punctuation\">,</span> Coffee</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">WHERE</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   UnpaidOrder<span class=\"token punctuation\">.</span>CustomerNumber <span class=\"token operator\">=</span> Customer<span class=\"token punctuation\">.</span>CustomerNumber </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token operator\">AND</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   UnpaidOrder<span class=\"token punctuation\">.</span>ProdNum <span class=\"token operator\">=</span> Coffee<span class=\"token punctuation\">.</span>ProdNum</pre></td></tr></table></figure><ul>\n<li>The search criteria tell the DBMS how to link the rows in the tables</li>\n</ul>\n<p><img data-src=\"https://i.loli.net/2020/11/15/qyCYXOkv3QxLijw.png\" alt=\"\" title=\"An Order Entry System\" /><br />\nThe Place Order application uses a relational database  <code>CoffeeDB</code> <br />\nRequires the  <code>Coffee</code> ,  <code>Customer</code> , and  <code>UnpaidOrder</code>  tables</p>\n<h2 id=\"transactions\"><a class=\"anchor\" href=\"#transactions\">#</a> Transactions</h2>\n<ul>\n<li>An operation that requires multiple database updates is known as a transaction.<br />\n 需要多次数据库更新的操作称为事务。</li>\n<li>For a transaction to be complete\n<ul>\n<li>All of the steps involved in the transaction must be performed.</li>\n</ul>\n</li>\n<li>If any single step within a transaction fails\n<ul>\n<li>None of the steps in the transaction should be performed.</li>\n</ul>\n</li>\n<li>When you write transaction-processing code, there are two concepts you must understand:\n<ul>\n<li>Commit</li>\n<li>Rollback</li>\n</ul>\n</li>\n<li>The term  <code>commit</code>  refers to making a permanent change to a database</li>\n<li>The term  <code>rollback</code>  refers to undoing changes to a database</li>\n</ul>\n<h2 id=\"sql-ddl-dql-dml-dcl-and-tcl-commands\"><a class=\"anchor\" href=\"#sql-ddl-dql-dml-dcl-and-tcl-commands\">#</a> SQL | DDL, DQL, DML, DCL and TCL Commands</h2>\n<p>Structured Query Language(SQL) as we all know is the database language by the use of which we can perform certain operations on the existing database and also we can use this language to create a database. SQL uses certain commands like Create, Drop, Insert etc. to carry out the required tasks.</p>\n<p>These SQL commands are mainly categorized into four categories as:</p>\n<ol>\n<li>DDL – Data Definition Language</li>\n<li>DQl – Data Query Language</li>\n<li>DML – Data Manipulation Language</li>\n<li>DCL – Data Control Language</li>\n</ol>\n<p>Though many resources claim there to be another category of SQL clauses <strong>TCL – Transaction Control Language</strong>. So we will see in detail about TCL as well.</p>\n<h3 id=\"ddldata-definition-language\"><a class=\"anchor\" href=\"#ddldata-definition-language\">#</a> DDL(Data Definition Language)</h3>\n<p>DDL or Data Definition Language actually consists of the SQL commands that can be used to define the database schema. It simply deals with descriptions of the database schema and is used to create and modify the structure of database objects in the database.</p>\n<p>Examples of DDL commands:</p>\n<dl>\n<dt><code>CREATE</code></dt>\n<dd>is used to create the database or its objects (like table, index, function, views, store procedure and triggers).</dd>\n<dt><code>DROP</code></dt>\n<dd>is used to delete objects from the database.</dd>\n<dt><code>ALTER</code></dt>\n<dd>is used to alter the structure of the database.</dd>\n<dt><code>TRUNCATE</code></dt>\n<dd>is used to remove all records from a table, including all spaces allocated for the records are removed.</dd>\n<dt><code>COMMENT</code></dt>\n<dd>is used to add comments to the data dictionary.</dd>\n<dt><code>RENAME</code></dt>\n<dd>is used to rename an object existing in the database.</dd>\n</dl>\n<h3 id=\"dql-data-query-language\"><a class=\"anchor\" href=\"#dql-data-query-language\">#</a> DQL (Data Query Language)</h3>\n<p>DML statements are used for performing queries on the data within schema objects. The purpose of DQL Command is to get some schema relation based on the query passed to it.</p>\n<p>Example of DQL:</p>\n<dl>\n<dt><code>SELECT</code></dt>\n<dd>is used to retrieve data from the a database.</dd>\n</dl>\n<h3 id=\"dmldata-manipulation-language\"><a class=\"anchor\" href=\"#dmldata-manipulation-language\">#</a> DML(Data Manipulation Language)</h3>\n<p>The SQL commands that deals with the manipulation of data present in the database belong to DML or Data Manipulation Language and this includes most of the SQL statements.</p>\n<p>Examples of DML:</p>\n<dl>\n<dt><code>INSERT</code></dt>\n<dd>is used to insert data into a table.</dd>\n<dt><code>UPDATE</code></dt>\n<dd>is used to update existing data within a table.</dd>\n<dt><code>DELETE</code></dt>\n<dd>is used to delete records from a database table.</dd>\n</dl>\n<h3 id=\"dcldata-control-language\"><a class=\"anchor\" href=\"#dcldata-control-language\">#</a> DCL(Data Control Language)</h3>\n<p>DCL includes commands such as GRANT and REVOKE which mainly deals with the rights, permissions and other controls of the database system.</p>\n<p>Examples of DCL commands:</p>\n<dl>\n<dt><code>GRANT</code></dt>\n<dd>gives user's access privileges to database.</dd>\n<dt><code>REVOKE</code></dt>\n<dd>withdraw user's access privileges given by using the GRANT command.</dd>\n</dl>\n<h3 id=\"tcltransaction-control-language\"><a class=\"anchor\" href=\"#tcltransaction-control-language\">#</a> TCL(transaction Control Language)</h3>\n<p>TCL commands deals with the transaction within the database.</p>\n<p>Examples of TCL commands:<br />\n <code>COMMIT</code> <br />\n~ commits a Transaction.</p>\n<dl>\n<dt><code>ROLLBACK</code></dt>\n<dd>rollbacks a transaction in case of any error occurs.</dd>\n<dt><code>SAVEPOINT</code></dt>\n<dd>sets a savepoint within a transaction.</dd>\n<dt><code>SET TRANSACTION</code></dt>\n<dd>specify characteristics for the transaction.</dd>\n</dl>\n<h1 id=\"review\"><a class=\"anchor\" href=\"#review\">#</a> Review</h1>\n<p>DB table creations &amp; queries</p>\n<ol>\n<li class=\"quiz essay\">\n<p>Fill in the create table statement below to create a table called tickets given the field listings below.</p>\n<div class=\"note default no-icon\">\n<table>\n<thead>\n<tr>\n<th>Field name</th>\n<th>Field Type</th>\n<th>Field Size</th>\n<th>Primary Key?</th>\n<th>Nulll?</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td>Auto_increment</td>\n<td></td>\n<td>Y</td>\n<td>N</td>\n</tr>\n<tr>\n<td>ticketNum</td>\n<td>Integer</td>\n<td></td>\n<td>N</td>\n<td>Y</td>\n</tr>\n<tr>\n<td>ticketDecsc</td>\n<td>varchar</td>\n<td>100</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n<blockquote>\n<p>Note field name and datatype is required when listing fields in the create statement below.</p>\n</blockquote>\n<div class=\"note default no-icon\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> <span class=\"token string\">\"CREATE TABLE tickets \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                     <span class=\"token string\">\"(id INTEGER not NULL AUTO_INCREMENT, \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                     <span class=\"token string\">\" ticketNum INTEGER, \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                     <span class=\"token string\">\" ticketDesc VARCHAR(100), \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                     <span class=\"token string\">\" PRIMARY KEY ( id ))\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n</li>\n<li class=\"quiz essay\">\n<p>What additional fields / datatypes would you add as a suggestion when building your table?</p>\n<p>Any additional tables you would think would be necessary for an app that is for a trouble ticket system?</p>\n<div class=\"note default no-icon\">\n<table>\n<thead>\n<tr>\n<th>Field name</th>\n<th>Values</th>\n<th>Field Type</th>\n<th>Field Size</th>\n<th>Primary Key?</th>\n<th>Nulll?</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td></td>\n<td>Auto_increment</td>\n<td></td>\n<td>Y</td>\n<td>N</td>\n</tr>\n<tr>\n<td>ticketNum</td>\n<td></td>\n<td>Integer</td>\n<td></td>\n<td>N</td>\n<td>Y</td>\n</tr>\n<tr>\n<td>ticketDecsc</td>\n<td></td>\n<td>varchar</td>\n<td>100</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Uid</td>\n<td></td>\n<td></td>\n<td></td>\n<td>N</td>\n<td></td>\n</tr>\n<tr>\n<td>Start_date</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>End_date</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>priority</td>\n<td>H,M,L</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n</li>\n<li class=\"quiz essay\">\n<p>Fill in the insert statement below to insert a record into your table that contains this data</p>\n<div class=\"note default no-icon\">\n<table>\n<thead>\n<tr>\n<th>Field name</th>\n<th>Data</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Id</td>\n<td></td>\n</tr>\n<tr>\n<td>ticketNum</td>\n<td>1001</td>\n</tr>\n<tr>\n<td>ticketDecsc</td>\n<td>PC Virus</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"note default no-icon\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> <span class=\"token string\">\"INSERT INTO tickets(ticketNum, ticketDesc) \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                          <span class=\"token string\">\" VALUES (1001, 'PC VIRUS')\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n</li>\n<li class=\"quiz essay\">\n<p>Fill in the insert statement again to add a record to the table this time with variables called  <code>ticket_num</code>  and  <code>ticket_desc</code> ?</p>\n<div class=\"note default no-icon\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> <span class=\"token string\">\"INSERT INTO tickets(ticketNum, ticketDesc) \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                          <span class=\"token string\">\" VALUES ('\"</span><span class=\"token operator\">+</span>ticket_num<span class=\"token operator\">+</span><span class=\"token string\">\"','\"</span><span class=\"token operator\">+</span>ticket_desc<span class=\"token operator\">+</span><span class=\"token string\">\"')\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n</li>\n<li class=\"quiz essay\">\n<p>When would you perform a commit as a command?</p>\n<blockquote>\n<ul>\n<li>The COMMIT command is the transactional command used to save <ins>changes</ins> invoked by a transaction to the database.<br />\nCOMMIT 命令是用于将事务调用的 “更改” 保存到数据库的事务性命令。</li>\n<li>The COMMIT command saves all transactions to the database since the last COMMIT or ROLLBACK command.<br />\nCOMMIT 命令将自上一个 COMMIT 或 ROLLBACK 命令以来的所有事务保存到数据库中。</li>\n<li>The syntax for COMMIT command is as follows:<br />\n 语法如下<br />\n <code>COMMIT;</code></li>\n</ul>\n</blockquote>\n</li>\n</ol>\n","tags":["计算机科学","Master of Software Engineering","ITMD 510. Object-Oriented App Develop","Java","Database"]},{"id":"https://shoka.lostyu.me/computer-science/mse/itmd-510/week-9/","url":"https://shoka.lostyu.me/computer-science/mse/itmd-510/week-9/","title":"Week 9. Streams API","date_published":"2020-10-24T14:51:29.000Z","content_html":"<h1 id=\"notes\"><a class=\"anchor\" href=\"#notes\">#</a> Notes</h1>\n<h2 id=\"streams-api-interface\"><a class=\"anchor\" href=\"#streams-api-interface\">#</a> Streams API Interface</h2>\n<h3 id=\"lambda-expressions\"><a class=\"anchor\" href=\"#lambda-expressions\">#</a> Lambda Expressions</h3>\n<p>3 ways to execute</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> byAge <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token class-name\">Employee</span> emp1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Employee</span> emp2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> emp1<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> emp2<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> emps <span class=\"token operator\">=</span> <span class=\"token function\">fetchMembers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>emps<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>byAge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> emps <span class=\"token operator\">=</span> <span class=\"token function\">fetchMembers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>emps<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Employee</span> emp1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Employee</span> emp2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> emp1<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> emp2<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> emps <span class=\"token operator\">=</span> <span class=\"token function\">fetchMembers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>emps<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>emp1<span class=\"token punctuation\">,</span> emp2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> emp1<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> emp2<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>Lambdas</strong> or Anonymous functions.</p>\n<h3 id=\"syntax\"><a class=\"anchor\" href=\"#syntax\">#</a> Syntax</h3>\n<p><code>lambda operator -&gt; body</code> <br />\nwhere lambda operator can be...</p>\n<ul>\n<li>\n<p>Zero parameter:<br />\n <code>() -&gt; System.out.println(&quot;Zero parameter lambda&quot;);</code></p>\n</li>\n<li>\n<p>One parameter:<br />\n <code>(p) -&gt; System.out.println(&quot;One parameter: &quot; + p);</code> <br />\nIt is not mandatory to use parentheses, if the type of that variable can be inferred from the context</p>\n</li>\n<li>\n<p>Multiple parameters :<br />\n <code>(p1, p2) -&gt; System.out.println(&quot;Multiple parameters: &quot; + p1 + &quot;, &quot; + p2);</code></p>\n</li>\n</ul>\n<p><img data-src=\"https://i.loli.net/2020/11/02/XGlz8nDhe35WwfZ.jpg\" alt=\"\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// A Java program to demonstrate simple lambda expressions </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>     <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// Creating an ArrayList with elements &#123;1, 2, 3, 4&#125; </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> arrL <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        arrL<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        arrL<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        arrL<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        arrL<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// Using lambda expression to print all elements of arrL </span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        arrL<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// Using lambda expression to print even elements of arrL </span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        arrL<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">%</span><span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Output</p>\n<pre><code>1 2 3 4 2 4\n</code></pre>\n<h2 id=\"stream-api-functionality\"><a class=\"anchor\" href=\"#stream-api-functionality\">#</a> Stream API functionality</h2>\n<p>Streams can be obtained in a number of ways.<br />\nSome examples include:</p>\n<ul>\n<li>From a Collection via the  <code>stream()</code></li>\n<li>From an array via  <code>Arrays.stream(Object[])</code> ;</li>\n</ul>\n<p>Package =&gt;  <code>java.util.stream</code></p>\n<p>Classes used to support functional-style operations on streams of elements, such as map-reduce transformations on collections.<br />\n 用于支持对元素流进行功能样式操作的类，例如集合上的 map-reduce 转换。</p>\n<p>For example:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> widgets<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>          <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">-></span> b<span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> RED<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>          <span class=\"token punctuation\">.</span><span class=\"token function\">mapToInt</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">-></span> b<span class=\"token punctuation\">.</span><span class=\"token function\">getWeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>          <span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"operations-and-pipelines\"><a class=\"anchor\" href=\"#operations-and-pipelines\">#</a> Operations and pipelines</h3>\n<p>A stream is a <strong>limitless</strong> <ins>iterator</ins> that allows you to process collections.<br />\n 流是无限的迭代器，可以处理集合。</p>\n<p>Stream operations are divided into <ins>intermediate</ins> and <ins>terminal</ins> operations, and are combined to form stream pipelines or chained operations. The pipeline usually takes the form of  <code>map-filter-reduce</code>  pattern.<br />\n 流操作分为中间操作和终端操作，结合在一起以形成流管道或链接操作。 管道通常采用 map-filter-reduce 模式的形式。</p>\n<p>The  <code>.map()</code>  method is not an associative data structure, rather it is a transformative operation. It takes a  <code>Stream&lt;T&gt;</code>  and it returns either a  <code>Stream&lt;T&gt;</code>  or  <code>Stream&lt;U&gt;</code> .<br />\n <code>.map()</code>  方法不是关联数据结构，而是一种转换操作。 它采用 Stream &lt;T&gt;，并返回 Stream &lt;T &gt; 或 Stream &lt;U&gt;。</p>\n<p>Example:  <code>Stream&lt;String&gt;</code>  to  <code>Stream&lt;String&gt;</code> <br />\nExample:  <code>Stream&lt;String&gt;</code>  to  <code>Stream&lt;Date&gt;</code></p>\n<p><img data-src=\"https://i.loli.net/2020/11/02/gGBMQ6374P9VcjX.png\" alt=\"\" /></p>\n<p>A stream pipeline consists of a source (such as a Collection or an array); followed by zero or more intermediate operations such as  <code>Stream.filter</code>  or  <code>Stream.map</code> ; and a terminal operation such as  <code>Stream.forEach</code>  or  <code>Stream.reduce</code> .<br />\n 流管道由一个源（例如 Collection 或数组）组成； 随后是零个或多个中间操作，例如 <code>Stream.filter</code>  或 <code>Stream.map</code> ； 以及诸如 <code>Stream.forEach</code>  或 <code>Stream.reduce</code>  之类的终端操作。</p>\n<dl>\n<dt>Intermediate operations</dt>\n<dd>return a <ins>new stream</ins>. They are always <em>lazy</em>; executing an intermediate operation such as  <code>filter()</code>  does not actually perform any filtering, but instead creates a new stream.  Some method examples follow:<br />\n 中间操作返回一个新的流。 它们总是懒惰的。 执行诸如 <code>filter()</code>  之类的中间操作实际上并不执行任何过滤，而是创建一个新的流。 一些方法示例如下：<br />\n <code>peek()</code>  method<br />\n <code>map()</code>  method<br />\n <code>filter()</code>  method</dd>\n<dt>Terminal operations</dt>\n<dd>such as  <code>Stream.forEach</code>  or  <code>IntStream.sum</code> , may traverse the stream to produce a result or a side-effect. After the terminal operation is performed, the stream pipeline is considered consumed, and <ins>can no longer be used</ins>.  Example methods follow:<br />\n 诸如 <code>Stream.forEach</code>  或 <code>IntStream.sum</code>  之类的终端操作，可能会遍历该流以产生结果或副作用。 执行终端操作后，流管线被视为已消耗，无法再使用。 示例方法如下：<br />\n <code>forEach()</code>  method<br />\n <code>count()</code>  method<br />\n <code>max()</code>  method<br />\n <code>collect()</code>  method<br />\n <code>reduce()</code>  method</dd>\n</dl>\n<h4 id=\"ex-use-cases\"><a class=\"anchor\" href=\"#ex-use-cases\">#</a> Ex use cases</h4>\n<dl>\n<dt>map</dt>\n<dd>The map method is used to map the items in the collection to other objects according to the Function passed as argument.<br />\n 用于根据作为参数传递的 Function，将集合中的项目映射到其他对象。</dd>\n</dl>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span> number <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">List</span> square <span class=\"token operator\">=</span> number<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-></span> x<span class=\"token operator\">*</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><dl>\n<dt>filter</dt>\n<dd>The filter method is used to select elements as per the Predicate passed as argument.<br />\n 根据作为参数传递的词，进行元素选择。</dd>\n</dl>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span> names <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Reflection\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Collection\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Stream\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">List</span> result <span class=\"token operator\">=</span> names<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">-></span>s<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"S\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><dl>\n<dt>sorted</dt>\n<dd>The sorted method is used to sort the stream.<br />\n 用于对流进行排序。</dd>\n</dl>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span> names <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Reflection\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Collection\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Stream\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">List</span> result <span class=\"token operator\">=</span> names<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Map example</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// applying 12% VAT on each purchase</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// Without lambda expressions:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">List</span> costBeforeTax <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> cost <span class=\"token operator\">:</span> costBeforeTax<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">double</span> price <span class=\"token operator\">=</span> cost <span class=\"token operator\">+</span> <span class=\"token number\">.12</span><span class=\"token operator\">*</span>cost<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// With Lambda expression:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">List</span> costBeforeTax <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>costBeforeTax<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>cost<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> cost <span class=\"token operator\">+</span> <span class=\"token number\">.12</span><span class=\"token operator\">*</span>cost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>Output</p>\n<pre><code>112.0\n224.0\n336.0\n448.0\n560.0\n112.0\n224.0\n336.0\n448.0\n560.0\n</code></pre>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Map reduce example</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Applying 12% VAT on each purchase</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// Old way:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">List</span> costBeforeTax <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">double</span> total <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> cost <span class=\"token operator\">:</span> costBeforeTax<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token keyword\">double</span> price <span class=\"token operator\">=</span> cost <span class=\"token operator\">+</span> <span class=\"token number\">.12</span><span class=\"token operator\">*</span>cost<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> total <span class=\"token operator\">=</span> total <span class=\"token operator\">+</span> price<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Total : \"</span> <span class=\"token operator\">+</span> total<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// New way:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token class-name\">List</span> costBeforeTax <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">double</span> bill <span class=\"token operator\">=</span> costBeforeTax<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>cost<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> cost <span class=\"token operator\">+</span> <span class=\"token number\">.12</span><span class=\"token operator\">*</span>cost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">,</span> cost<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> sum <span class=\"token operator\">+</span> cost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Total : \"</span> <span class=\"token operator\">+</span> bill<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>Output</p>\n<pre><code>Total : 1680.0\nTotal : 1680.0\n</code></pre>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Example</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// joining list and appending data</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> l <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"two\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> sl <span class=\"token operator\">=</span> l<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>l<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"three\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> sl<span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token function\">joining</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"further-uses-of-stream-api\"><a class=\"anchor\" href=\"#further-uses-of-stream-api\">#</a> Further uses of Stream API!!</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Collections</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Employees</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//put a structure together</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> rank<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//add constructor</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Employees</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> name<span class=\"token operator\">=</span>n<span class=\"token punctuation\">;</span> rank<span class=\"token operator\">=</span>r<span class=\"token punctuation\">;</span>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employees</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Employees</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"james papa\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Employees</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"luke papa\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Employees</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kay papa\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">/*Old school coding - sort first then display filtered results</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        Collections.sort(list, new EmployeesSort());</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        for(Employees e : list) &#123;</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            if(e.rank == 4)</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                System.out.println(e.name + \" \" + e.rank);</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">//New school output list - stream alt. and sorted!</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>rank <span class=\"token operator\">==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> a<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">forEachOrdered</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>rank<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>import java.util.Comparator;</pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>public class EmployeesSort implements Comparator&lt;Employees>&#123;</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    //compare by name</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    public int compare(Employees obj1, Employees obj2) &#123;</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        return obj1.name.compareTo(obj2.name);</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"47\"></td><td><pre>&#125;*/</span></pre></td></tr></table></figure><h1 id=\"lab\"><a class=\"anchor\" href=\"#lab\">#</a> Lab</h1>\n<ul>\n<li>\n<p>PROJECT<br />\nBank record generations</p>\n</li>\n<li>\n<p>Objective<br />\nTo write a program that performs data analysis from class objects created in lab #2.</p>\n</li>\n</ul>\n<h2 id=\"project-description\"><a class=\"anchor\" href=\"#project-description\">#</a> PROJECT DESCRIPTION</h2>\n<p>Bank of IIT is in desperate need of analytics from its clients for its loan application process. Currently records show 600 clients exist and the bank is hoping to expand its clientele and its potential by offering <ins>premium</ins> loans to deserved grantees.<br />\nIIT 银行迫切需要客户对其贷款申请流程进行分析。 目前的记录显示有 600 个客户，该银行希望通过向应得的受赠人提供优质贷款来扩大其客户群和潜力。</p>\n<p>Perform the data analysis as follows for this lab.<br />\n 对该实验室执行以下数据分析。</p>\n<h2 id=\"project-details\"><a class=\"anchor\" href=\"#project-details\">#</a> Project Details</h2>\n<ul>\n<li>\n<p>Add to your existing project files from lab 2, a new class called Records. Have the class extend the BankRecords class to grab hold of its instance methods plus the BankRecords object array.<br />\n 在 lab2 的项目文件中，添加一个名为 <code>Records</code>  的新类。让该类扩展 <code>BankRecords</code>  类以获取其实例方法，以及 <code>BankRecords</code>  对象数组。</p>\n</li>\n<li>\n<p>Provide at least 2 comparator classes implementing the java.util.Comparator interface for comparing various fields for the following data analysis requirements.<br />\n 提供至少两个比较器类，这些比较器类实现 <code>java.util.Comparator</code>  接口，以比较各个字段，以符合以下数据分析要求。</p>\n</li>\n<li>\n<p>Perform the following analysis requirements and output detail for the Records class.<br />\n 对 <code>Records</code>  类执行以下分析要求和输出详细信息。</p>\n<p>Display the following data analytics in a coherent manner to the console:<br />\n 以一致的方式在控制台上显示以下数据分析：</p>\n</li>\n</ul>\n<blockquote>\n<ul>\n<li>average income for males vs. females<br />\n 男性与女性的平均收入</li>\n<li>number of females with a mortgage and savings account<br />\n 拥有抵押和储蓄账户的女性人数</li>\n<li>number of males with both a car and 1 child per location<br />\n 每个地点有汽车和 1 个孩子的男性人数</li>\n</ul>\n</blockquote>\n<ul>\n<li>\n<p>Write all displayed data to a text file called bankrecords.txt relative to your project path as well. Append your name within the text file at the end of the file plus the date/time.<br />\n 将所有显示的数据写入一个名为 <code>bankrecords.txt</code>  的文本文件中，并保存在相对于您的项目路径的位置。在文件末尾的文本中添加您的姓名以及日期 / 时间。</p>\n<p>Include for credit, your project files including your .csv file and bankrecords.txt file into a zip file, also your jar (executable) file as well as a separate file, and your snapshots of console output and your bankrecords.txt file plus your source code into a Word doc file.<br />\n 项目文件（包括.csv 文件和 bankrecords.txt 文件）压缩到 zip 文件中，还包括 jar（可执行）文件也是一个单独的文件。控制台输出快照、bankrecords.txt 文件以及您的源代码转换为 Word doc 文件。</p>\n</li>\n</ul>\n<h2 id=\"objectives\"><a class=\"anchor\" href=\"#objectives\">#</a> Objectives</h2>\n<h3 id=\"example-of-creating-a-comparator\"><a class=\"anchor\" href=\"#example-of-creating-a-comparator\">#</a> Example of creating a comparator</h3>\n<p>For your first analytic response that is to show the<br />\n <code>average income for males vs. females</code> <br />\nyou may want to create a comparator class to sort by sex<br />\n 对于第一个分析，即显示男性与女性的平均收入，可能要创建一个比较器类，以按性别排序。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Example</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SexComparator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BankRecords</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BankRecords</span> o1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BankRecords</span> o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// use compareTo to compare strings</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> o1<span class=\"token punctuation\">.</span><span class=\"token function\">getSex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>o2<span class=\"token punctuation\">.</span><span class=\"token function\">getSex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Think of comparators you can set up with not only a primary sort but secondary sorts as well.  Example maybe a female sort as a primary sort and mortgages as a secondary sort, etc.<br />\n 比较器不仅可以设置一级排序，还可以设置二级排序。 例如，女性排序为主要排序，抵押贷款为次要排序，等等。</p>\n<p>Another example here maybe to create a comparator java class for sorting by location…<br />\n 这里的另一个示例可创建一个比较器 Java 类，以按地点排序…</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Example</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LocationComparator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BankRecords</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BankRecords</span> o1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BankRecords</span> o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// use compareTo to compare strings</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> o1<span class=\"token punctuation\">.</span><span class=\"token function\">getRegion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>o2<span class=\"token punctuation\">.</span><span class=\"token function\">getRegion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"call-up-your-comparators-in-your-recordsjava-file\"><a class=\"anchor\" href=\"#call-up-your-comparators-in-your-recordsjava-file\">#</a> Call up your comparators in your Records.java file.</h3>\n<p>在 Records.java 文件中调用比较器。</p>\n<p>Ex. in  <code>main()</code> , you can call a series of functions to perform your analytic results.<br />\n 例如 在 main 函数中，可以调用一系列函数来执行分析结果。</p>\n<p>Set up your file to also not only write to the console but to a text file.<br />\n 将文件设置为不仅要写入控制台，还要写入文本文件。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Example</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Records</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BankRecords</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// create formatted object to write output directly to console &amp; file</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token class-name\">FileWriter</span> fw <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Records</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            fw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bankrecords.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">Records</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Records</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        br<span class=\"token punctuation\">.</span><span class=\"token function\">readData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// call functions to perform analytics</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">AvgComp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// analyze average income per loc</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">//femsComp();  // female count w. mort/savings accounts </span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">//malesComp(); // male counts per loc. w. car &amp; 1 child </span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// *** close out file object ***//</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            fw<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">AvgComp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>robjs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SexComparator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">// set up needed variables to gather counts &amp; income by sex </span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">// to determine average income by sex</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">int</span> maleCt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> femCt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">double</span> maleInc <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> femInc <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> robjs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FEMALE\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token operator\">++</span>femCt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                femInc <span class=\"token operator\">+=</span> robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getIncome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token comment\">// display resulting averages to console and to file</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>         </pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" ... \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            fw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Avg inc. for Females: $\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>femInc<span class=\"token operator\">/</span>femCt<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            fw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Continue in like manner as above to finish up two other method definitions, callable in main().</p>\n<p>以上述方式继续完成另外两个方法定义，可在 main 函数中调用。</p>\n<h2 id=\"code\"><a class=\"anchor\" href=\"#code\">#</a> code</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Records.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Date</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Records</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BankRecords</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// create formatted object to write output directly to console &amp; file</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token class-name\">FileWriter</span> fw <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Records</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            fw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bankrecords.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            fw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Data analytic results:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">Records</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Records</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        br<span class=\"token punctuation\">.</span><span class=\"token function\">readData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Data analytic results:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// call functions to perform analytics</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">AvgComp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// analyze average income for males vs. females</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token function\">femsComp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// female count with mortgage/savings accounts </span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token function\">malesComp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// male counts per loc. w. car &amp; 1 child </span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// *** close out file object ***//</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token class-name\">Date</span> date<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            fw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\\nShuang Liu @ \"</span> <span class=\"token operator\">+</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            fw<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">AvgComp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>robjs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SexComparator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token comment\">// set up needed variables to gather counts &amp; income by sex </span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token comment\">// to determine average income by sex</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>          </pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">int</span> maleCt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> femCt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">double</span> maleInc <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> femInc <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> robjs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FEMALE\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token operator\">++</span>femCt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                femInc <span class=\"token operator\">+=</span> robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getIncome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token operator\">++</span>maleCt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                maleInc <span class=\"token operator\">+=</span> robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getIncome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token comment\">// display resulting averages to console and to file</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token class-name\">String</span> femAvg <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nAverage income for Females: $%.2f\"</span><span class=\"token punctuation\">,</span> femInc<span class=\"token operator\">/</span>femCt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token class-name\">String</span> maleAvg <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nAverage income for Males: $%.2f\"</span><span class=\"token punctuation\">,</span> maleInc<span class=\"token operator\">/</span>maleCt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>femAvg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>maleAvg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            fw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>femAvg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            fw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>maleAvg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">femsComp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>robjs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SexComparator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        </pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token keyword\">int</span> femCt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> robjs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FEMALE\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                    <span class=\"token operator\">&amp;&amp;</span> robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMortgage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"YES\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                    <span class=\"token operator\">&amp;&amp;</span> robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSave_act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"YES\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                <span class=\"token operator\">++</span>femCt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token class-name\">String</span> femNum <span class=\"token operator\">=</span> <span class=\"token string\">\"\\n\\nNum. of Females with Mortgage &amp; saving act: \"</span> <span class=\"token operator\">+</span> femCt <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>femNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            fw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>femNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">malesComp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>robjs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LocationComparator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> robjs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MALE\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>                    <span class=\"token operator\">&amp;&amp;</span> robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"YES\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>                    <span class=\"token operator\">&amp;&amp;</span> robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getChildren</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRegion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>                    map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRegion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRegion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>                    map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRegion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token class-name\">StringBuffer</span> sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"118\"></td><td><pre>        map<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>region<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>            </pre></td></tr><tr><td data-num=\"119\"></td><td><pre>            <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> cs<span class=\"token operator\">=</span> region<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>            cs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"122\"></td><td><pre>            sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>cs<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" region males with car &amp; 1 child: \"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"125\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>sb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"127\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>            fw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>sb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>SexComparator.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SexComparator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BankRecords</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BankRecords</span> o1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BankRecords</span> o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// use compareTo to compare strings</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> o1<span class=\"token punctuation\">.</span><span class=\"token function\">getSex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>o2<span class=\"token punctuation\">.</span><span class=\"token function\">getSex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>LocationComparator.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LocationComparator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BankRecords</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BankRecords</span> o1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BankRecords</span> o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// use compareTo to compare strings</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> o1<span class=\"token punctuation\">.</span><span class=\"token function\">getRegion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>o2<span class=\"token punctuation\">.</span><span class=\"token function\">getRegion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>BankRecords.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">File</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BankRecords</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Client</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">//setup static objects for IO processing</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">//array of BankRecords objects</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token class-name\">BankRecords</span> robjs<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BankRecords</span><span class=\"token punctuation\">[</span><span class=\"token number\">600</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">//arraylist to hold spreadsheet rows &amp; columns</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">//instance fields</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> sex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> region<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> income<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> married<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> children<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> car<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> save_act<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> current_act<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> mortgage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> pep<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">readData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">BufferedReader</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">//initialize reader object and set file path to root of project</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bank-Detail.csv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token class-name\">String</span> line<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token comment\">//read each record in csv file</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>line <span class=\"token operator\">=</span> br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token comment\">//parse each record in csv file by a comma ( , )</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token comment\">//into a list stored in the arraylist-> Arrays</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                array<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"There was a problem loading the file\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token function\">processData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//call function for processing record data</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">processData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token comment\">//create index for array while iterating thru arraylist</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">int</span> idx<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token comment\">//create for each loop to cycle thru arraylist of values </span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token comment\">//and PASS that data into your record objects' setters </span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> rowData<span class=\"token operator\">:</span> array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token comment\">//initialize array of objects</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            robjs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BankRecords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token comment\">//call setters below and populate them, item by item</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            robjs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//get 1st column</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            robjs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//get 2nd column</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            robjs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setSex</span><span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            robjs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setRegion</span><span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            robjs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setIncome</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseDouble</span><span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            robjs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setMarried</span><span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            robjs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setChildren</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            robjs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setCar</span><span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            robjs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setSave_act</span><span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            robjs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setCurrent_act</span><span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            robjs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setMortgage</span><span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            robjs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setPep</span><span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token comment\">/*continue processing arraylist item values into each array object -> robjs[] by index*/</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            idx<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token comment\">//printData();  //call function to print objects held in memory       </span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token comment\">//1. Set appropriate headings for displaying first 25 records</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token comment\">//2. Create for loop and print each record objects instance data </span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token comment\">//3. Within for loop use appropriate formatting techniques to print out record detail  </span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token comment\">//Set heading</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"First 25 Client details:\\n\\n%-10s\\t%-10s\\t%-10s\\t%-10s\\t%-10s\\t%-10s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ID\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Age\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Sex\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Region\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Income\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Mortgage\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">25</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            <span class=\"token class-name\">String</span> s<span class=\"token operator\">=</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%-10s\\t%-10d\\t%-10s\\t%-10s\\t%-10.2f\\t%-10s\"</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"95\"></td><td><pre>                    robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRegion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getIncome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMortgage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>   </pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"102\"></td><td><pre>     * @return the id</pre></td></tr><tr><td data-num=\"103\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"108\"></td><td><pre>     * @param id the id to set</pre></td></tr><tr><td data-num=\"109\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"114\"></td><td><pre>     * @return the age</pre></td></tr><tr><td data-num=\"115\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        <span class=\"token keyword\">return</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"120\"></td><td><pre>     * @param age the age to set</pre></td></tr><tr><td data-num=\"121\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"126\"></td><td><pre>     * @return the sex</pre></td></tr><tr><td data-num=\"127\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getSex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>        <span class=\"token keyword\">return</span> sex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"132\"></td><td><pre>     * @param sex the sex to set</pre></td></tr><tr><td data-num=\"133\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setSex</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> sex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sex <span class=\"token operator\">=</span> sex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"138\"></td><td><pre>     * @return the region</pre></td></tr><tr><td data-num=\"139\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getRegion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>        <span class=\"token keyword\">return</span> region<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"144\"></td><td><pre>     * @param region the region to set</pre></td></tr><tr><td data-num=\"145\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setRegion</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> region<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>region <span class=\"token operator\">=</span> region<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"150\"></td><td><pre>     * @return the income</pre></td></tr><tr><td data-num=\"151\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">getIncome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>        <span class=\"token keyword\">return</span> income<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"156\"></td><td><pre>     * @param income the income to set</pre></td></tr><tr><td data-num=\"157\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setIncome</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> income<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>income <span class=\"token operator\">=</span> income<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"162\"></td><td><pre>     * @return the married</pre></td></tr><tr><td data-num=\"163\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getMarried</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>        <span class=\"token keyword\">return</span> married<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"168\"></td><td><pre>     * @param married the married to set</pre></td></tr><tr><td data-num=\"169\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setMarried</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> married<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>married <span class=\"token operator\">=</span> married<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"174\"></td><td><pre>     * @return the children</pre></td></tr><tr><td data-num=\"175\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getChildren</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>        <span class=\"token keyword\">return</span> children<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"180\"></td><td><pre>     * @param children the children to set</pre></td></tr><tr><td data-num=\"181\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setChildren</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> children<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> children<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"186\"></td><td><pre>     * @return the car</pre></td></tr><tr><td data-num=\"187\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>        <span class=\"token keyword\">return</span> car<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"192\"></td><td><pre>     * @param car the car to set</pre></td></tr><tr><td data-num=\"193\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setCar</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> car<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>car <span class=\"token operator\">=</span> car<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"198\"></td><td><pre>     * @return the save_act</pre></td></tr><tr><td data-num=\"199\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getSave_act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>        <span class=\"token keyword\">return</span> save_act<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"204\"></td><td><pre>     * @param save_act the save_act to set</pre></td></tr><tr><td data-num=\"205\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setSave_act</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> save_act<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>save_act <span class=\"token operator\">=</span> save_act<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"210\"></td><td><pre>     * @return the current_act</pre></td></tr><tr><td data-num=\"211\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getCurrent_act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>        <span class=\"token keyword\">return</span> current_act<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"216\"></td><td><pre>     * @param current_act the current_act to set</pre></td></tr><tr><td data-num=\"217\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setCurrent_act</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> current_act<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"219\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>current_act <span class=\"token operator\">=</span> current_act<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"220\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"222\"></td><td><pre>     * @return the mortgage</pre></td></tr><tr><td data-num=\"223\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"224\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getMortgage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre>        <span class=\"token keyword\">return</span> mortgage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"226\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"227\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"228\"></td><td><pre>     * @param mortgage the mortgage to set</pre></td></tr><tr><td data-num=\"229\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"230\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setMortgage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> mortgage<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"231\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mortgage <span class=\"token operator\">=</span> mortgage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"232\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"233\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"234\"></td><td><pre>     * @return the pep</pre></td></tr><tr><td data-num=\"235\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"236\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getPep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"237\"></td><td><pre>        <span class=\"token keyword\">return</span> pep<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"238\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"239\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"240\"></td><td><pre>     * @param pep the pep to set</pre></td></tr><tr><td data-num=\"241\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"242\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setPep</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> pep<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"243\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pep <span class=\"token operator\">=</span> pep<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"244\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>   </pre></td></tr><tr><td data-num=\"245\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Client.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Client</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">readData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//read file detail</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">processData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//process file detail</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//print file detail</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>","tags":["计算机科学","Master of Software Engineering","ITMD 510. Object-Oriented App Develop","Java"]},{"id":"https://shoka.lostyu.me/computer-science/mse/itmd-510/midterm-exam/","url":"https://shoka.lostyu.me/computer-science/mse/itmd-510/midterm-exam/","title":"Midterm Exam","date_published":"2020-10-19T13:42:26.000Z","content_html":"<h1 id=\"tentative-topical-coverages-for-mid-term\"><a class=\"anchor\" href=\"#tentative-topical-coverages-for-mid-term\">#</a> Tentative Topical Coverages for Mid Term</h1>\n<table>\n<thead>\n<tr>\n<th>Topic(s)</th>\n<th>Suggested Readings</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Java SE Essentials</td>\n<td>Chapters 1-5 (review of essentials)</td>\n</tr>\n<tr>\n<td>Object-Oriented Programming (OOP) concepts</td>\n<td>Chap. 6</td>\n</tr>\n<tr>\n<td>Arrays and Arraylists</td>\n<td>Chap. 7</td>\n</tr>\n<tr>\n<td>Abstraction, Inheritance, Polymorphism</td>\n<td>Chap. 10</td>\n</tr>\n<tr>\n<td>Stream I/O file processing, Exception Handling</td>\n<td>Chap. 9,11</td>\n</tr>\n<tr>\n<td>Generics, Collections (intro only)</td>\n<td>Chap. 17,18</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"sample\"><a class=\"anchor\" href=\"#sample\">#</a> Sample</h1>\n<ol>\n<li class=\"quiz multi\">\n<p>Which of these is an incorrect array declaration?</p>\n<ul class=\"options\">\n<li class=\"correct\"><code>intarr[] = newint[5]</code> </li>\n<li><code>int[] arr = new int[5]</code></li>\n<li><code>int arr[] = new int[5]</code></li>\n<li class=\"correct\"><code>int arr[] = int [5] new</code> </li>\n</ul>\n<blockquote>\n<p>哪一个是不正确的数组声明？</p>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>What will this code print?</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul class=\"options\">\n<li class=\"correct\">0</li>\n<li>value stored in  <code>arr[0]</code></li>\n<li>00000</li>\n<li>Class name@hashcode in hexadecimalform</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>What is the output of this program?</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> array_output <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> array_variable <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\tarray_variable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>array_variable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul class=\"options\">\n<li class=\"correct\">0 2 4 6 8</li>\n<li>1 3 5 7 9</li>\n<li>0 1 2 3 4 5 6 7 8 9</li>\n<li>1 2 3 4 5 6 7 8 9 10</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>Look at the following code.</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Integer</span> myNumber <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token keyword\">var</span> <span class=\"token operator\">=</span> myNumber<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>What is true about the second statement?</p>\n<ul class=\"options\">\n<li>The statement performs autoboxing.</li>\n<li>It results in an error because you can't assign a wrapper class to a primitive variable.</li>\n<li class=\"correct\">The statement performs unboxing.</li>\n<li>The statement performs unwrapping.</li>\n</ul>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vd2FuZy15YXovcC84NTE2MTUxLmh0bWw=\">详解 Java 的自动装箱与拆箱 (Autoboxing and unboxing)</span></p>\n<ul class=\"options\">\n<li>该语句执行自动装箱。</li>\n<li>由于无法将包装器类分配给原始变量，因此会导致错误。</li>\n<li>该语句执行拆箱。✔️</li>\n<li>该语句执行解包。</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>Which is the valid declaration within an interface definition?</p>\n<ul class=\"options\">\n<li class=\"correct\"><code>public double methoda();</code> </li>\n<li><code>public final double methoda();</code></li>\n<li><code>static void methoda(double d1);</code></li>\n<li><code>protected void methoda(double d1);</code></li>\n</ul>\n<blockquote>\n<p>在接口定义中，哪个是有效声明？</p>\n</blockquote>\n</li>\n<li class=\"quiz false\">\n<p>A private base method can be overridden by some derived public method.</p>\n<blockquote>\n<p>私有基础方法可以被某些派生的公共方法覆盖。</p>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>Which of these keywords is not a part of exception handling?</p>\n<ul class=\"options\">\n<li>try</li>\n<li>finally</li>\n<li class=\"correct\">thrown</li>\n<li>catch</li>\n</ul>\n<blockquote>\n<p>这些关键字中的哪个不是异常处理的一部分？</p>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>The process of converting one date type to another is called <span class=\"gap\"></span>.</p>\n<ul class=\"options\">\n<li>Translating</li>\n<li class=\"correct\">Casting</li>\n<li>Compiling</li>\n<li>Declaring</li>\n</ul>\n<blockquote>\n<p>将一种日期类型转换为另一种日期的过程称为</p>\n<ul class=\"options\">\n<li>翻译</li>\n<li>强制转换 ✔️</li>\n<li>编译</li>\n<li>声明</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>Which of the following is the correct declaration statement in java program?</p>\n<ul class=\"options\">\n<li><code>int num = int[5]</code></li>\n<li><code>int num = new num[5]</code></li>\n<li class=\"correct\"><code>int[] num = new int[5]</code> </li>\n<li>None</li>\n</ul>\n<blockquote>\n<p>以下哪项是 Java 程序中正确的声明语句？</p>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>What line of code should replace the missing statement to make this program compile?</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* Missing Statement ? */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> foo <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exceptionn</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\tjava<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span><span class=\"token class-name\">PrintWriter</span> out <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span><span class=\"token class-name\">PrintWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">new</span> java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span><span class=\"token class-name\">OutputStreamWriter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\tout<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul class=\"options\">\n<li class=\"correct\">No statement required.</li>\n<li><code>import java.io.*;</code></li>\n<li><code>include java.io.*;</code></li>\n<li><code>import java.io.PrintWriter;</code></li>\n</ul>\n<blockquote>\n<p>哪一行代码应替换丢失的语句以使该程序得以编译？</p>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p><span class=\"gap\"></span> method is used to find the nth no. of character of given string s1.</p>\n<ul class=\"options\">\n<li><code>1.index(n)</code></li>\n<li><code>s1.substring(n)</code></li>\n<li><code>s1.length()</code></li>\n<li class=\"correct\"><code>s1.charAt(n)</code> </li>\n</ul>\n<blockquote>\n<p><span class=\"gap\"></span> 方法用于查找给定字符串 s1 的第 n 个字符。</p>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>Which of these can be overloaded?</p>\n<ul class=\"options\">\n<li>Methods</li>\n<li>Constructors</li>\n<li class=\"correct\">both a and b</li>\n<li>None can be overloaded</li>\n</ul>\n<blockquote>\n<p>哪些可以被重载？</p>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>The concept of multiple inheritance is implemented in Java by?</p>\n<p>I.   Extending two or more classes.<br />\nII.  Extending one class and implementing one or more interfaces.<br />\nIII. Implementing two or more interfaces.</p>\n<ul class=\"options\">\n<li>Only (II)</li>\n<li>(I) and (II)</li>\n<li class=\"correct\">(II) and (III)</li>\n<li>Only (I)</li>\n<li>Only (III)</li>\n</ul>\n<blockquote>\n<p>Java 的多重继承概念是通过？实现的</p>\n<ul class=\"options\">\n<li>扩展两个或多个类。</li>\n<li>扩展一个类、实现一个或多个接口。 ✔️</li>\n<li>实现两个或多个接口。 ✔️</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz fasle\">\n<p>Private members of a class are inherited in the sub class.</p>\n<blockquote>\n<p>类的私有成员在子类中被继承。</p>\n</blockquote>\n</li>\n<li class=\"quiz true\">\n<p>A method of a super class with a default access modifier can be overridden as protected or public but not as private.</p>\n<blockquote>\n<p>具有默认访问修饰符的父类方法，可以覆盖为 protected 或 public，但不能是 private。</p>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>What will be the output of the following program?</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">X</span>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ONE\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> d<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TWO\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Y</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">X</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"THREE\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainClass</span> <span class=\"token punctuation\">&#123;</span>\t</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">Y</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul class=\"options\">\n<li class=\"correct\">ONE</li>\n<li>TWO</li>\n<li>THREE</li>\n<li>ONE TWO</li>\n<li>Error</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>If a superclass does not have a default constructor, then a class that inherits from it,</p>\n<ul class=\"options\">\n<li class=\"correct\">must call one of the constructors that the superclass does have</li>\n<li>must contain the default constructor for the superclass</li>\n<li>does not inherit the data member fields from the superclass</li>\n<li>must initialize the superclass values</li>\n</ul>\n<blockquote>\n<p>如果父类没有默认的构造函数，则继承自它的类</p>\n<ul class=\"options\">\n<li>必须调用父类确实具有的构造函数之一 ✔️</li>\n<li>必须包含父类的默认构造函数</li>\n<li>不继承父类的数据成员字段</li>\n<li>必须初始化超类值</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>The binary search algorithm</p>\n<ul class=\"options\">\n<li class=\"correct\">will cut the portion of the array being searched in half each time the loop fails to locate the search value</li>\n<li>will have an average of N/2 comparisons, where N is the number of elements in the array</li>\n<li>is less efficient than the sequential search algorithm</li>\n</ul>\n<blockquote>\n<p>二进制搜索算法</p>\n<ul class=\"options\">\n<li>每次循环未能找到搜索值时，将被搜索数组的部分切成一半 ✔️</li>\n<li>将平均进行 N/2 次比较，其中 N 是数组中元素的数量</li>\n<li>效率较低比顺序搜索算法</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"coding-and-definitions\"><a class=\"anchor\" href=\"#coding-and-definitions\">#</a> Coding and Definitions</h2>\n<ol start=\"19\">\n<li class=\"quiz essay\">\n<p>What are some advantages of using Generic types?  List some example.</p>\n<blockquote>\n<p>使用泛型类型有哪些优势？列举一些例子。<br />\nAdvantages: use cases - Type safety at runtime + avoids costs (code duplication!).<br />\n 优点：用例 - 运行时类型安全 + 避免成本（代码重复！）。<br />\nEx. Casting issues give compile time errors if elements aren't proper possible generic datatypes.<br />\n 例如，如果元素不是适当的泛型数据类型，则强制转换问题会导致编译时错误。<br />\nGenerics work around this by typechecking at compile time to prevent ClassCastExceptions!<br />\n 泛型通过在编译时进行类型检查，来避免 ClassCastExceptions，来解决此问题！<br />\nWithout generics/typecheck<br />\n 没有泛型 / 类型检查</p>\n</blockquote>\n<div class=\"note default no-icon\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tlist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hey\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token class-name\">Object</span> obj1 <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token class-name\">String</span> obj2 <span class=\"token operator\">=</span>  list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token class-name\">Integer</span> obj3 <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//compile error! Can't convert String to Integer</span></pre></td></tr></table></figure></div>\n</li>\n<li class=\"quiz essay\">\n<p>Why do you suppose a class level generic variable cannot be static?</p>\n<blockquote>\n<p>为什么类级别的泛型变量不能为静态变量？<br />\nUsing generics, type parameters are not allowed to be static, as the static variable is shared amongst objects so compiler can not determine which type to used.<br />\n 使用泛型时，类型参数不允许为静态，因为静态变量在对象之间共享，因此编译器无法确定要使用哪种类型。</p>\n</blockquote>\n</li>\n<li class=\"quiz essay\">\n<p>What are some basic differences between an Array and ArrayList?</p>\n<blockquote>\n<p>Array 和 ArrayList 之间有哪些基本区别？<br />\nThe array represents a basic functionality whereas the ArrayList is part of collection framework in Java.<br />\n 数组 Array 代表基本功能，而 ArrayList 是 Java 中 collection 框架的一部分。<br />\nTherefore array members are accessed using [], whilst an ArrayList has a set of methods to access elements and have the ability to modify them.<br />\n 因此，数组成员使用 <code>[]</code>  访问，而 ArrayList 具有一组访问元素，并具有修改元素的能力。<br />\nArraylists are also dynamic in memory and can grow and shrink at runtime.<br />\nArraylist 在内存中也是动态的，并且可以在运行时增长和缩小。</p>\n</blockquote>\n</li>\n<li class=\"quiz essay\">\n<p>What is the major difference between an abstract class and an interface?</p>\n<blockquote>\n<p>抽象类和接口之间的主要区别是什么？<br />\nAbstract class is more expensive to use, as there is a look-up to do when you inherit from them. Can define a behavior for common classes.<br />\n 抽象类的使用成本更高，因为从它们继承时需要进行查找。可以定义常见类的行为。<br />\nAn interface is a contract, a generic pattern of methods with just signatures allowing any class implement its methods in a way that it wishes to do.<br />\n 接口是一种契约，一种通用方法，带有签名，允许任何类以其希望的方式实现其方法。</p>\n</blockquote>\n</li>\n<li class=\"quiz essay\">\n<p>Define Polymorphism?  What are some of its abilities/usefulness?</p>\n<blockquote>\n<p>多态的定义？它的一些功能 / 用处是什么？<br />\nMeans a state of having many shapes or the capacity to take on various forms (sub types). Ability to describe and process objects of various types and classes through a single, uniform interface (base object).<br />\n 表示具有多种形状或具有采取多种形式（子类型）的能力的状态。通过单个统一的界面（基础对象）描述和处理各种类型和类的对象的能力。<br />\nPolymorphism is a OOPs concept where one name can have many forms. For example, you have a smartphone for communication. The communication mode you choose could be anything. It can be a call, a text message, a picture message, mail, etc. So, the goal is common that is communication, but their approach is different. This is called Polymorphism.<br />\n 多态是一个 OOPs 概念，其中一个名称可以具有多种形式。 例如，您有用于通信的智能手机。 您选择的通信模式可以是任何一种。 它可以是呼叫，短信，图片消息，邮件等。因此，目标很普遍，那就是沟通，但他们的方法不同。 这称为多态。</p>\n</blockquote>\n<div class=\"note default no-icon\">\n<pre class=\"mermaid\"><svg id=\"mermaid-1607194098043\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" height=\"246\" style=\"max-width: 336.96875px;\" viewBox=\"-20 -20 336.96875 246\"><g></g><defs><marker id=\"extensionStart\" class=\"extension\" refX=\"0\" refY=\"7\" markerWidth=\"190\" markerHeight=\"240\" orient=\"auto\"><path d=\"M 1,7 L18,13 V 1 Z\"></path></marker></defs><defs><marker id=\"extensionEnd\" refX=\"19\" refY=\"7\" markerWidth=\"20\" markerHeight=\"28\" orient=\"auto\"><path d=\"M 1,1 V 13 L18,7 Z\"></path></marker></defs><defs><marker id=\"compositionStart\" class=\"extension\" refX=\"0\" refY=\"7\" markerWidth=\"190\" markerHeight=\"240\" orient=\"auto\"><path d=\"M 18,7 L9,13 L1,7 L9,1 Z\"></path></marker></defs><defs><marker id=\"compositionEnd\" refX=\"19\" refY=\"7\" markerWidth=\"20\" markerHeight=\"28\" orient=\"auto\"><path d=\"M 18,7 L9,13 L1,7 L9,1 Z\"></path></marker></defs><defs><marker id=\"aggregationStart\" class=\"extension\" refX=\"0\" refY=\"7\" markerWidth=\"190\" markerHeight=\"240\" orient=\"auto\"><path d=\"M 18,7 L9,13 L1,7 L9,1 Z\"></path></marker></defs><defs><marker id=\"aggregationEnd\" refX=\"19\" refY=\"7\" markerWidth=\"20\" markerHeight=\"28\" orient=\"auto\"><path d=\"M 18,7 L9,13 L1,7 L9,1 Z\"></path></marker></defs><defs><marker id=\"dependencyStart\" class=\"extension\" refX=\"0\" refY=\"7\" markerWidth=\"190\" markerHeight=\"240\" orient=\"auto\"><path d=\"M 5,7 L9,13 L1,7 L9,1 Z\"></path></marker></defs><defs><marker id=\"dependencyEnd\" refX=\"19\" refY=\"7\" markerWidth=\"20\" markerHeight=\"28\" orient=\"auto\"><path d=\"M 18,7 L9,13 L14,7 L9,1 Z\"></path></marker></defs><g id=\"classid-Employee-0\" class=\"classGroup\" transform=\"translate(97.4765625,0 )\"><rect x=\"0\" y=\"0\" width=\"98.203125\" height=\"78\" class=\" \"></rect><text y=\"15\" x=\"0\"><tspan class=\"title\" x=\"26.1953125\">Employee</tspan></text><line x1=\"0\" y1=\"21\" y2=\"21\" x2=\"98.203125\"></line><text x=\"5\" y=\"31\" fill=\"white\" class=\"classText\"><tspan x=\"5\">-empCode : int</tspan><tspan x=\"5\" dy=\"10\">-firstName : String</tspan><tspan x=\"5\" dy=\"10\">-lastName: String</tspan></text><line x1=\"0\" y1=\"57\" y2=\"57\" x2=\"98.203125\"></line><text x=\"5\" y=\"72\" fill=\"white\" class=\"classText\"><tspan x=\"5\">+pay()</tspan></text></g><g id=\"classid-HourlyEmployee-1\" class=\"classGroup\" transform=\"translate(0,133 )\"><rect x=\"0\" y=\"0\" width=\"119.671875\" height=\"68\" class=\" \"></rect><text y=\"15\" x=\"0\"><tspan class=\"title\" x=\"21.453125\">HourlyEmployee</tspan></text><line x1=\"0\" y1=\"21\" y2=\"21\" x2=\"119.671875\"></line><text x=\"5\" y=\"31\" fill=\"white\" class=\"classText\"><tspan x=\"5\">-rate : double</tspan><tspan x=\"5\" dy=\"10\">-workingHours : double</tspan></text><line x1=\"0\" y1=\"47\" y2=\"47\" x2=\"119.671875\"></line><text x=\"5\" y=\"62\" fill=\"white\" class=\"classText\"><tspan x=\"5\">+pay()</tspan></text></g><g id=\"classid-SalariedEmployee-2\" class=\"classGroup\" transform=\"translate(169.671875,128 )\"><rect x=\"0\" y=\"0\" width=\"127.296875\" height=\"78\" class=\" \"></rect><text y=\"15\" x=\"0\"><tspan class=\"title\" x=\"21.984375\">SalariedEmployee</tspan></text><line x1=\"0\" y1=\"21\" y2=\"21\" x2=\"127.296875\"></line><text x=\"5\" y=\"31\" fill=\"white\" class=\"classText\"><tspan x=\"5\">-commisionRate : double</tspan><tspan x=\"5\" dy=\"10\">-grossSales : double</tspan><tspan x=\"5\" dy=\"10\">-basic : double</tspan></text><line x1=\"0\" y1=\"57\" y2=\"57\" x2=\"127.296875\"></line><text x=\"5\" y=\"72\" fill=\"white\" class=\"classText\"><tspan x=\"5\">+pay()</tspan></text></g><path d=\"M97.4765625,75.22804647392596L91.203125,79.85670539493829C84.9296875,84.48536431595063,72.3828125,93.74268215797531,66.109375,103.37134107898765C59.8359375,113,59.8359375,123,59.8359375,128L59.8359375,133\" id=\"edge0\" class=\"relation\" marker-start=\"url(#dependencyStart)\"></path><path d=\"M195.6796875,75.22804647392596L201.953125,79.85670539493829C208.2265625,84.48536431595063,220.7734375,93.74268215797531,227.046875,102.53800774565433C233.3203125,111.33333333333333,233.3203125,119.66666666666667,233.3203125,123.83333333333333L233.3203125,128\" id=\"edge1\" class=\"relation\" marker-start=\"url(#dependencyStart)\"></path></svg></pre></div>\n</li>\n<li class=\"quiz essay\">\n<p>Create and define a method called popList that gets passed an arraylist called list that will accept any numeric value type passed in. The method definition should assign 5 integers to the arraylist via a loop storing the values of 1,2,3,4 and 5 respectively.</p>\n<blockquote>\n<p>创建并定义一个名为 popList 的方法，该方法将传递一个名为 list 的 arraylist 数组列表，该列表将接受传入的任何数值类型。该方法定义应通过存储 1,2,3,4 和 5 的循环，分别将 5 个整数分配给 arraylist。</p>\n</blockquote>\n<div class=\"note default\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> popList <span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Number</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t   list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n</li>\n<li class=\"quiz essay\">\n<p>Code the sort method below to sort an arraylist in ascending order? (DO NOT USE ANY PRE DEFINED METHODS) </p>\n<blockquote>\n<p>编写下面的 sort 方法对数组列表进行升序排序？（请勿使用任何预先定义的方法）</p>\n</blockquote>\n<div class=\"note default\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> aListClass<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> values <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\tvalues<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\tvalues<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">41</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\tvalues<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> values<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> aList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> aList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> aList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"15\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>aList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>aList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"16\"></td><td><pre>\t\t\t\t\ttemp <span class=\"token operator\">=</span> aList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr class=\"marked\"><td data-num=\"17\"></td><td><pre>\t\t\t\t\taList<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> aList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// swap</span></pre></td></tr><tr class=\"marked\"><td data-num=\"18\"></td><td><pre>\t\t\t\t\taList<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span> temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t  <span class=\"token comment\">// values</span></pre></td></tr><tr class=\"marked\"><td data-num=\"19\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"20\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span>\t\t  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n</li>\n</ol>\n<h1 id=\"review\"><a class=\"anchor\" href=\"#review\">#</a> Review</h1>\n<ol>\n<li class=\"quiz\">\n<p>Methods that operate on an object's fields are called</p>\n<ul class=\"options\">\n<li>Private methods</li>\n<li class=\"correct\">Instance methods</li>\n<li>Instance variables</li>\n<li>Public methods</li>\n</ul>\n<blockquote>\n<p>操作对象字段的方法称为</p>\n<ul class=\"options\">\n<li>私人方法</li>\n<li>实例方法 ✔️</li>\n<li>实例变量</li>\n<li>公开方法</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>A constructor</p>\n<ul class=\"options\">\n<li>Has return type of void</li>\n<li>Always accepts two arguments</li>\n<li>Always has an access specifier of private</li>\n<li class=\"correct\">Has the same name as the class</li>\n</ul>\n<blockquote>\n<p>构造函数</p>\n<ul class=\"options\">\n<li>返回类型为 void</li>\n<li>一律接受两个参数</li>\n<li>始终具有私有的访问说明</li>\n<li>与类同名 ✔️</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>To develop a program to solve a problem, you start by <span class=\"gap\"></span>.</p>\n<ul class=\"options\">\n<li class=\"correct\">analyzing the problem</li>\n<li>implementing the solution in Java</li>\n<li>designing the algorithm</li>\n<li>entering the solution into a computer system</li>\n</ul>\n<blockquote>\n<p>要开发解决问题的程序，您首先需要从 <span class=\"gap\"></span> 开始。</p>\n<ul class=\"options\">\n<li>分析问题 ✔️</li>\n<li>用 Java 实现解决方案</li>\n<li>设计算法</li>\n<li>将解决方案输入计算机系统</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>Declaring a class level variable as static means <span class=\"gap\"></span>.</p>\n<ul class=\"options\">\n<li>access is obtainable only thru a class object</li>\n<li class=\"correct\">any method (static, instance) can have access</li>\n<li>no methods can have access</li>\n<li>none of the above</li>\n</ul>\n<blockquote>\n<p>将类级别变量声明为静态意味着 <span class=\"gap\"></span> 。</p>\n<ul class=\"options\">\n<li>访问只能通过类对象获得</li>\n<li>任何方法（静态，实例）都可以访问 ✔️</li>\n<li>没有方法可以访问</li>\n<li>以上都不是</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>In an interface all methods have</p>\n<ul class=\"options\">\n<li class=\"correct\">public access</li>\n<li>packaged access</li>\n<li>private access</li>\n<li>protected access</li>\n</ul>\n<blockquote>\n<p>在接口中，所有方法都具有</p>\n<ul>\n<li>public 访问权限 ✔️</li>\n<li>packaged 访问权限</li>\n<li>private 访问权限</li>\n<li>protected 访问权限</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>The binary search algorithm</p>\n<ul class=\"options\">\n<li class=\"correct\">will cut the portion of the array being searched in half each time the loop fails to locate the search value</li>\n<li>will have an average of N/2 comparisons, where N is the number of elements in the array</li>\n<li>is less efficient than the sequential search algorithm</li>\n<li>will have a maximum number of comparisons equal to the number of elements in the array</li>\n</ul>\n<blockquote>\n<p>二进制搜索算法</p>\n<ul class=\"options\">\n<li>每次循环未能找到搜索值时，将被搜索数组的一部分切成两半 ✔️</li>\n<li>将具有 N/2 个比较的平均值，其中 N 是数组中元素的数量</li>\n<li>比顺序搜索算法效率低</li>\n<li>将具有的最大比较数量等于数组中元素的数量</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>The declaration</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span> aL <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul class=\"options\">\n<li>compiles and runs correctly, but is not recommended</li>\n<li>allows the programmer to create an ArrayList that holds integer types</li>\n<li class=\"correct\">causes a compile-time error</li>\n<li>compiles correctly, but causes an exception to be thrown at run time</li>\n</ul>\n<blockquote>\n<ul class=\"options\">\n<li>正确编译并运行，但不建议</li>\n<li>允许程序员创建一个保存整数类型的 ArrayList</li>\n<li>导致编译时错误 ✔️</li>\n<li>正确编译，但导致在运行时引发异常</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>Another term for an object of a class is:</p>\n<ul class=\"options\">\n<li>access specifier</li>\n<li class=\"correct\">instance</li>\n<li>member</li>\n<li>method</li>\n</ul>\n<blockquote>\n<p>类的对象的另一个术语是：</p>\n<ul class=\"options\">\n<li>访问说明符</li>\n<li>实例 ✔️</li>\n<li>成员</li>\n<li>方法</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>In a Binary Search routine, the array item in the middle of the array portion is at subscript position</p>\n<ul class=\"options\">\n<li class=\"correct\">(lower + upper)/2</li>\n<li>(upper - lower)/2</li>\n<li>(lower - upper)/2</li>\n<li>lower + upper/2</li>\n</ul>\n<blockquote>\n<p>在二进制搜索例程中，中间的数组项位于下标位置？</p>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>Which class is related to all the exceptions that cannot be caught?</p>\n<ul class=\"options\">\n<li class=\"correct\">Error</li>\n<li>Exception</li>\n<li>RuntimeException</li>\n<li>All of the mentioned</li>\n</ul>\n<blockquote>\n<p>哪个类与所有无法捕获的异常相关？<br />\nRuntime errors cannot be caught generally. Error class is used to catch such errors/exceptions.<br />\n 通常无法捕获运行时错误。 Error 类用于捕获此类错误 / 异常。</p>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>For the following code, which statement is not true?</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Sphere</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> radius<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> z<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul class=\"options\">\n<li class=\"correct\">z is available to code that is written outside the Sphere class</li>\n<li>radius, x, y, and z are called members of the Sphere class</li>\n<li>x is available to code that is written outside the Sphere class</li>\n<li>radius is not available to code written outside the Sphere class</li>\n</ul>\n<blockquote>\n<p>对于以下代码，哪个语句不正确</p>\n<ul class=\"options\">\n<li>z 可用于在 Sphere 类之外编写的代码 ✔️</li>\n<li>radius，x，y 和 z 被称为 Sphere 类的成员</li>\n<li>x 可用于在 Sphere 类之外编写的代码</li>\n<li>radius 不适用于在 Sphere 类之外编写的代码</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>The following statement creates an  <code>ArrayList</code>  object. What is the purpose of the  <code>&lt;String&gt;</code>  notation?</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul class=\"options\">\n<li>It specfies that everything store for the arr object will be converted to a String;</li>\n<li>It specfies that String objects may not be stored in the ArrayList object;</li>\n<li class=\"correct\">It specfies that only String objects may be stored in the ArrayList object;</li>\n<li>It specfies that the get method will only return String ob.</li>\n</ul>\n<blockquote>\n<p>以下语句创建一个 <code>ArrayList</code>  对象。  <code>&lt;String&gt;</code>  表示法的目的是什么？</p>\n<ul class=\"options\">\n<li>确定将所有存储在 <code>arr</code>  对象中的东西都转换为 <code>String</code> ；</li>\n<li>确定 <code>String</code>  对象可能不存储在 <code>ArrayList</code>  对象中；</li>\n<li>规定只有 <code>String</code>  对象可以存储在 <code>ArrayList</code>  对象中； ✔️</li>\n<li>它指定 <code>get</code>  方法将仅返回 <code>String ob</code> 。</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>What would be the results of the following code?</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> SIZE <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// ... Code that will put values in array1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> a <span class=\"token operator\">&lt;=</span> array1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tvalue <span class=\"token operator\">+=</span> array1<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul class=\"options\">\n<li>value contains the lowest value in array1</li>\n<li>value contains the sum of all the values in array1</li>\n<li>value contains the highest value in array1</li>\n<li class=\"correct\">This would cause the program to crash</li>\n</ul>\n<blockquote>\n<p>以下代码的结果是什么？</p>\n<ul>\n<li>值包含 array1 中的最小值</li>\n<li>value 包含 array1 中所有值的总和</li>\n<li>值包含 array1 中的最大值</li>\n<li>这会导致程序崩溃 ✔️<br />\n{.options}<br />\n <code>a &lt;= array1.length - 1</code></li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz essay\">\n<p>What is Data Hiding, how why is it important, in other words, why consider it for any instance fields of a class?</p>\n<blockquote>\n<ul>\n<li>What is Data Hiding:<br />\n 什么是数据隐藏？<br />\nAllows direct access and any allowed changes to the objects internal data by the class object itself.<br />\n 允许类对象本身直接访问，和允许对对象内部数据进行任何更改。<br />\nCreate private fields to allow for data hiding.<br />\n 创建私有字段，以允许隐藏数据。</li>\n<li>how why is it important?<br />\n 为什么它如此重要，换句话说，为什么要为一个类的任何实例字段考虑它？<br />\nData hiding is important because classes are typically used as components in large software systems, involving a team of programmers.<br />\n 数据隐藏很重要，因为类通常在大型软件系统中用作组件，涉及一个团队。<br />\nData hiding helps enforce the integrity of an object's internal data.<br />\n 数据隐藏有助于增强对象内部数据的完整性。</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz essay\">\n<p>Distinguish between a no-argument constructor and a default constructor. How are constructors distinguished from normal methods of a class?</p>\n<blockquote>\n<p>区分无参数构造函数和默认构造函数。构造函数如何与类的常规方法区分开？<br />\nA constructor that does not accept arguments is known as a no-arg constructor. It usually intializes class level variables.<br />\n 不接受参数的构造函数称为无参数构造函数。 它通常初始化类级别的变量。<br />\nThe default constructor is a constructor that the Java compiler adds to your code if no explicit constructor is available. The default constructor is consider a no-arg constructor.<br />\n 默认构造函数是 Java 编译器在没有显式构造函数可用时，将其添加到您的代码中的构造函数。 默认构造函数被视为无参数构造函数。<br />\nEx. no-arg constructor programmer defined<br />\n 例如 无参数构造函数程序员定义</p>\n</blockquote>\n<div class=\"note default no-icon\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tlength <span class=\"token operator\">=</span> width <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n</li>\n<li class=\"quiz\">\n<p>The method getMax shown below is supposed to return the position of the largest value in the portion of an array between 0 and last, inclusive:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">getMax</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> last<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;=</span> last<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token comment\">// Code is Missing</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>The missing code is</p>\n<ul class=\"options\">\n<li><code>if (array[k] &gt; array[max]) k = max;</code></li>\n<li class=\"correct\"><code>if (array[k] &gt; array[max]) max = k;</code> </li>\n<li><code>if (array[k] &gt; max) return max;</code></li>\n<li><code>if (array[k] &gt; array[max]) return max;</code></li>\n</ul>\n<blockquote>\n<p><code>getMax</code>  应该返回数组位置介于 <code>0</code>  到 <code>last</code>  之间的最大值。</p>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>If you want to share code among several closely related classes, you expect to have common functions in a class and want to defer implementations of some other functions to derived classes, then we need to use <span class=\"gap\"></span> .</p>\n<ul class=\"options\">\n<li class=\"correct\">An abstract class</li>\n<li>An interface</li>\n<li>either A or B</li>\n</ul>\n<blockquote>\n<p>如果要在几个密切相关的类之间共享代码，则希望在一个类中具有通用功能，并希望将某些其他功能的实现推迟到派生类，则我们需要使用</p>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>What is the output of this program?</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token class-name\">ArrayList</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tobj<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"F\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tobj<span class=\"token punctuation\">.</span><span class=\"token function\">ensureCapacity</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//increase capacity of object</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul class=\"options\">\n<li class=\"correct\">1</li>\n<li>2</li>\n<li>4</li>\n<li>8</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>Which collection does not allow duplicates on its elements?</p>\n<ul class=\"options\">\n<li>list</li>\n<li>arrayList</li>\n<li class=\"correct\">set</li>\n<li>linkedlist</li>\n</ul>\n<blockquote>\n<p>哪个集合不允许其元素重复？</p>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>Consider a class that uses the following variables to implement an array-based stack:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> top <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>code syntax/logic for adding an item x to the stack can be written as</p>\n<ul class=\"options\">\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>top <span class=\"token operator\">==</span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  \t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Overflow\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  \ttop <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  \ts<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li class=\"correct\"><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>top <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\ts<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\ttop<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Overflow\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>top <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IndexOutBoundsException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\ts<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\ttop <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li><code>s.add(top, x);</code></li>\n</ul>\n<blockquote>\n<p>假设一个类，将使用以下变量来实现基于数组的堆栈<br />\n将项目 x 添加到堆栈的代码语法 / 逻辑可以写成？</p>\n</blockquote>\n</li>\n<li class=\"quiz true\">\n<p>A constructor is a method that is automatically called when an object is created.</p>\n<blockquote>\n<p>构造函数是一种在创建对象时自动调用的方法。</p>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>In Java, you do not use the new operator when you use a(n):</p>\n<ul class=\"options\">\n<li>array size declarator</li>\n<li class=\"correct\">initialization list</li>\n<li>two-dimensional array</li>\n<li>all choices are correct</li>\n</ul>\n<blockquote>\n<p>在 Java 中，当使用 <code>a(n)</code>  时，请勿使用 <code>new</code>  运算符：</p>\n<ul class=\"options\">\n<li>数组大小声明符</li>\n<li>初始化列表 ✔️</li>\n<li>二维数组</li>\n<li>所有选择都是正确的</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>When you are working with a <span class=\"gap\"></span> , you are using a storage location that holds a piece of data.</p>\n<ul class=\"options\">\n<li class=\"correct\">primitive variable</li>\n<li>reference variable</li>\n<li>numeric literal</li>\n<li>binary number</li>\n</ul>\n<blockquote>\n<p>使用 <span class=\"gap\"></span> 时，您使用的是一个存储数据的存储位置。</p>\n<ul class=\"options\">\n<li>基本变量 ✔️</li>\n<li>参考变量</li>\n<li>数字文字</li>\n<li>二进制数</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>The following UML diagram entry  <code>setBalance(h : double) : void</code> ，this is a <span class=\"gap\"></span> method with a parameter of data type <span class=\"gap\"></span> and does not return a value.</p>\n<ul class=\"options\">\n<li class=\"correct\">public, double</li>\n<li>public, float</li>\n<li>private, float</li>\n<li>private, double</li>\n</ul>\n<blockquote>\n<p>UML 图条目是一个<span class=\"gap\"></span>方法，其参数类型为数据类型<span class=\"gap\"></span>，并且不返回值。</p>\n</blockquote>\n</li>\n<li class=\"quiz essay\">\n<p>Explain the feature of overload.</p>\n<blockquote>\n<p>解释重载的功能。<br />\nTwo or more methods in a class may have the same name and they have different parameter lists.<br />\n 一个类中的两个或多个方法可能具有相同的名称，并且具有不同的参数列表。</p>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>What is wrong with the following code?</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassB</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ClassA</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">ClassB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> init <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul class=\"options\">\n<li>Nothing is wrong with the code.</li>\n<li>The method super is not defined.</li>\n<li class=\"correct\">The call to the method super must be the first statement in the constructor.</li>\n<li>No values may be passed to super.</li>\n</ul>\n<blockquote>\n<p>以下代码有什么问题？</p>\n<ul class=\"options\">\n<li>代码没有错。</li>\n<li>未定义方法 super。</li>\n<li>对方法 super 的调用必须是构造函数中的第一条语句。 ✔️</li>\n<li>不能将任何值传递给 super。</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz essay\">\n<p>补充下列代码，要求返回最大值</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> myList <span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">//return the greatest integer value in the ArrayList</span></pre></td></tr><tr class=\"marked\"><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li class=\"quiz essay\">\n<p>填写下列代码，实现参数值得交换。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tlist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">66</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tlist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">44</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"5\"></td><td><pre>\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tlist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">int</span> tmp <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\ta<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\ta<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n","tags":["计算机科学","Master of Software Engineering","ITMD 510. Object-Oriented App Develop","试题","Java"]},{"id":"https://shoka.lostyu.me/computer-science/mse/itmd-510/week-8/","url":"https://shoka.lostyu.me/computer-science/mse/itmd-510/week-8/","title":"Week 8. Collections","date_published":"2020-10-17T12:11:42.000Z","content_html":"<h1 id=\"notes\"><a class=\"anchor\" href=\"#notes\">#</a> Notes</h1>\n<h2 id=\"collections\"><a class=\"anchor\" href=\"#collections\">#</a> Collections</h2>\n<p>A Collection is a group of individual objects represented as a single unit.<br />\n 集合是一组表示为单个单元的单个对象。</p>\n<p>Java provides Collection Framework which defines several classes and interfaces to represent a group of objects as a single unit.<br />\nJava 提供了 Collection Framework，它定义了几个类和接口，来将一组对象表示为单个单元。</p>\n<p><img data-src=\"https://i.loli.net/2020/10/22/ktjd2m7MrBZl93s.png\" alt=\"\" /></p>\n<dl>\n<dt>Collection 集合</dt>\n<dd>Root interface with basic methods like  <code>add()</code> ,  <code>remove()</code> ,  <code>contains()</code> ,  <code>isEmpty()</code> ,  <code>addAll()</code> , ... etc.<br />\n 带有基本方法的根接口</dd>\n<dt>Set</dt>\n<dd>Doesn't allow duplicates.<br />\n 不允许重复。</dd>\n<dt>List</dt>\n<dd>Can contain duplicates and elements are ordered.<br />\n 可以包含重复项，并且元素是有序的。</dd>\n<dt>Queue 队列</dt>\n<dd>Typically order elements in FIFO order.<br />\n 通常以 FIFO 顺序对元素进行排序</dd>\n</dl>\n<h2 id=\"some-cool-applicabilities-using-collections\"><a class=\"anchor\" href=\"#some-cool-applicabilities-using-collections\">#</a> Some cool applicabilities using Collections</h2>\n<table>\n<tbody>\n<tr>\n<td>sorting</td>\n<td>shuffle</td>\n</tr>\n<tr>\n<td>reversing</td>\n<td>binarySearch</td>\n</tr>\n<tr>\n<td>auto copy</td>\n<td>rotate (shift elements by distance)</td>\n</tr>\n<tr>\n<td>frequency counter</td>\n<td></td>\n</tr>\n<tr>\n<td>comparing</td>\n<td></td>\n</tr>\n<tr>\n<td>lambdas</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"sorts-排序\"><a class=\"anchor\" href=\"#sorts-排序\">#</a> SORTS 排序</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Java program to demonstrate working of Collections.sort() </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CollectionTest</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// Create a list of strings </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> trendList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        trendList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data science\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        trendList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"digital forensics\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        trendList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cloud computing\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">/* Collections.sort method is sorting the </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        elements of ArrayList in ascending order. */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>trendList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// Let us print the sorted list </span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"List after the use of\"</span> <span class=\"token operator\">+</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                            <span class=\"token string\">\" Collection.sort() :\\n\"</span> <span class=\"token operator\">+</span> trendList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Output:</p>\n<pre><code>List after the use of Collection.sort() :\n[cloud computing, data science, digital forensics]\n</code></pre>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Java program to demonstrate working of Collections.reverse() </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// ::</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>trendList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>trendList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     </pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// Let us print the sorted list </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"List after the use of\"</span> <span class=\"token operator\">+</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                            <span class=\"token string\">\" Collection.sort() :\\n\"</span> <span class=\"token operator\">+</span> trendList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Output:</p>\n<pre><code>List after the use of Collection.reverse() :\n[digital forensics, data science, cloud computing]\n</code></pre>\n<h3 id=\"autocopy-n-copies\"><a class=\"anchor\" href=\"#autocopy-n-copies\">#</a> AUTOCOPY (n copies)</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Create copies of some objects. </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">List</span> list <span class=\"token operator\">=</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">nCopies</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Java Power\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// Displaying the list returned </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The list returned is :\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">Iterator</span> itr <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>itr<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>itr<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>Output:</p>\n<pre><code>The list returned is :\nJava Power Java Power Java Power Java Power \n</code></pre>\n<h3 id=\"frequency-counter\"><a class=\"anchor\" href=\"#frequency-counter\">#</a> FREQUENCY COUNTER</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// count the frequency of the words \"data science\" </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The frequency of the word data science is: \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                    <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">frequency</span><span class=\"token punctuation\">(</span>trendList<span class=\"token punctuation\">,</span> <span class=\"token string\">\"data science\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>Output:</p>\n<pre><code>The frequency of the word data science is: 1\n</code></pre>\n<h3 id=\"comparators\"><a class=\"anchor\" href=\"#comparators\">#</a> COMPARATORS</h3>\n<ul>\n<li>\n<p>Interface allows <ins>multiple</ins> sorting sequences (ex. Name, id, and price, etc.)</p>\n</li>\n<li>\n<p>Uses  <code>compare()</code>  method to sort elements<br />\n <code>compare()</code>  takes 2 elements as arguments</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> obj2<span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>Comparator is found in  <code>java.util</code>  package.</p>\n</li>\n</ul>\n<h4 id=\"action-plan\"><a class=\"anchor\" href=\"#action-plan\">#</a> Action plan</h4>\n<ul>\n<li>Create a class to implement the interface</li>\n<li>Use  <code>Arrays.sort</code>  to sort the class objects</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>example</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">int</span> size<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\tsize <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\tweight <span class=\"token operator\">=</span> w<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">DogSizeComparator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Dog</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> \t<span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Dog</span> o1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Dog</span> o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> o1<span class=\"token punctuation\">.</span>size <span class=\"token operator\">-</span> o2<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">DogWeightComparator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Dog</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> \t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Dog</span> o1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Dog</span> o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> o1<span class=\"token punctuation\">.</span>weight <span class=\"token operator\">-</span> o2<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ArraySort</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> \t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token class-name\">Dog</span> d1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token class-name\">Dog</span> d2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token class-name\">Dog</span> d3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre> </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token class-name\">Dog</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dogArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>d1<span class=\"token punctuation\">,</span> d2<span class=\"token punctuation\">,</span> d3<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token function\">printDogs</span><span class=\"token punctuation\">(</span>dogArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>dogArray<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DogSizeComparator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token function\">printDogs</span><span class=\"token punctuation\">(</span>dogArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>dogArray<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DogWeightComparator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token function\">printDogs</span><span class=\"token punctuation\">(</span>dogArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre> \t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printDogs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Dog</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dogs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Dog</span> d<span class=\"token operator\">:</span> dogs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"size=\"</span><span class=\"token operator\">+</span>d<span class=\"token punctuation\">.</span>size <span class=\"token operator\">+</span> <span class=\"token string\">\" weight=\"</span> <span class=\"token operator\">+</span> </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                  d<span class=\"token punctuation\">.</span>weight <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre> \t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Output:</p>\n<pre><code>size=2 weight=50 size=1 weight=30 size=3 weight=40 \nsize=1 weight=30 size=2 weight=50 size=3 weight=40 \nsize=1 weight=30 size=3 weight=40 size=2 weight=50 \n</code></pre>\n<h2 id=\"queue-interface\"><a class=\"anchor\" href=\"#queue-interface\">#</a> Queue Interface</h2>\n<p>The Queue interface is available in  <code>java.util</code>  package and extends the Collection interface.<br />\nQueue 接口在 <code>java.util</code>  包中可用，并且扩展了 Collection 接口。</p>\n<p>The queue collection is used to hold the elements about to be processed and provides various operations like the insertion, removal etc.<br />\n 队列集合用于保存将要处理的元素，并提供各种操作，如插入，删除等。</p>\n<p>It is an ordered list of objects with its use limited to insert elements at the end of the list and deleting elements from the start of list i.e. it follows the FIFO or the First-In-First-Out principle.<br />\n 它是对象的有序列表，其使用仅限于在列表末尾插入元素，并从头开始删除元素，即遵循 FIFO 或先进先出原则。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Queue example: Implements LinkedList</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LinkedList</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Queue</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">QueueExample</span>  <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr class=\"marked\"><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> q <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// Adds elements &#123;0, 1, 2, 3, 4&#125; to queue </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr class=\"marked\"><td data-num=\"11\"></td><td><pre>     q<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// Display contents of the queue. </span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Elements of queue-\"</span><span class=\"token operator\">+</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// To remove the head of queue. </span></pre></td></tr><tr class=\"marked\"><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">int</span> removedele <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"removed element-\"</span> <span class=\"token operator\">+</span> removedele<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// To view the head of queue </span></pre></td></tr><tr class=\"marked\"><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">int</span> head <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"head of queue-\"</span> <span class=\"token operator\">+</span> head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">//Show queue size </span></pre></td></tr><tr class=\"marked\"><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Size of queue-\"</span> <span class=\"token operator\">+</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"map-interface\"><a class=\"anchor\" href=\"#map-interface\">#</a> Map Interface</h2>\n<dl>\n<dt>Map</dt>\n<dd>general key/value<br />\nmap interface</dd>\n<dt>HashMap</dt>\n<dd>most widely<br />\nused Map<br />\nHashMap does <ins>not</ins> allow duplicate keys however it <ins>allows</ins> to have duplicate values.</dd>\n</dl>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Implementation example: Map generic type interface</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Collection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Set</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> states <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// store values in map</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>states<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ca\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"California\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>states<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"az\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Arizona\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>states<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mn\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Minnesota\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>states<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nj\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"New Jersey\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// retrieve values from map</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>states<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ca\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns \"California\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>states<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nj\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns \"New Jersey\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// Pull out live Collection of all the values.</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> values <span class=\"token operator\">=</span> states<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [Minnesota, New Jersey,… Arizona] </span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// Use keySet to pull out live set of the keys -- use to print key->value for the whole map. </span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// The order of the keys is random for a HashSet.</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> keys <span class=\"token operator\">=</span> states<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token operator\">:</span>keys<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">+</span> <span class=\"token string\">\"->\"</span> <span class=\"token operator\">+</span> states<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://i.loli.net/2020/11/01/W49TofPk1nGvJOH.png\" alt=\"\" /></p>\n<p>Output:</p>\n<pre><code>mn-&gt;Minnesota\nnj-&gt;New Jersey\nca-&gt;The Golden State \naz-&gt;Arizona \n</code></pre>\n","tags":["计算机科学","Master of Software Engineering","ITMD 510. Object-Oriented App Develop","Java"]},{"id":"https://shoka.lostyu.me/computer-science/mse/itmd-534/midterm-exam/","url":"https://shoka.lostyu.me/computer-science/mse/itmd-534/midterm-exam/","title":"Midterm Exam","date_published":"2020-10-17T07:00:26.000Z","content_html":"<h1 id=\"重点\"><a class=\"anchor\" href=\"#重点\">#</a> 重点</h1>\n<h2 id=\"尼尔森十大可用性原则\"><a class=\"anchor\" href=\"#尼尔森十大可用性原则\">#</a> <a href=\"/computer-science/mse/itmd-534/lecture-4/#10-basic-principles-%E5%B0%BC%E5%B0%94%E6%A3%AE%E5%8D%81%E5%A4%A7%E5%8F%AF%E7%94%A8%E6%80%A7%E5%8E%9F%E5%88%99\">尼尔森十大可用性原则</a></h2>\n<div class=\"note info\">\n<p>参考链接：<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9kMTJkNzI1MzQ2MTU=\">尼尔森的十大可用性原则 —Jakob Nielsen</span></p>\n</div>\n<p>尼尔森十大原则由毕业于哥本哈根的人机交互学博士 Jakob Nielsen 发表，Jakob Nielsen 对人机交互有很多研究，他提出十大可用性原则，用来评价用户体验的好坏，每个产品设计者都可以根据这十大原则进行自查。</p>\n<h3 id=\"1️⃣-visibility-of-system-status\"><a class=\"anchor\" href=\"#1️⃣-visibility-of-system-status\">#</a> 1️⃣ Visibility of system status</h3>\n<p>系统可见性原则<br />\n<img data-src=\"https://i.loli.net/2020/10/17/jJWHtdPelbhBkw2.jpg\" alt=\"\" /><br />\n保持界面的状态可见，变化可见，内容可见。<br />\n让用户知道发生了什么，在适当的时间内做出适当的反馈。 比如用户在网页上的任何操作，不论是单击、滚动还是按下键盘，页面应即时给出反馈。<br />\n<img data-src=\"https://i.loli.net/2020/10/17/gfxvD68XLa5okI3.jpg\" alt=\"\" /><br />\n原文写的 feedback within reasonable time，那么这个 “reasonable time” 是多久呢？<br />\n也就是 用户可以接受的等待时间，如果我点击这个按钮等待了 2～3 秒的时间还没有做出反应，那么就是难以接受的。</p>\n<h3 id=\"2️⃣-match-between-system-and-the-real-world\"><a class=\"anchor\" href=\"#2️⃣-match-between-system-and-the-real-world\">#</a> 2️⃣ Match between system and the real world</h3>\n<p>贴近场景原则<br />\n<img data-src=\"https://i.loli.net/2020/10/17/pBfNoXn52tsWcFg.jpg\" alt=\"\" /><br />\n用用户的语言、用词、短语和用户熟悉的概念，而不是系统术语。<br />\n功能操作符合用户的使用场景。</p>\n<h3 id=\"3️⃣-user-control-and-freedom\"><a class=\"anchor\" href=\"#3️⃣-user-control-and-freedom\">#</a> 3️⃣ User control and freedom</h3>\n<p>可控性原则<br />\n<img data-src=\"https://i.loli.net/2020/10/17/zg2YnXaAtcUHGrs.jpg\" alt=\"\" /><br />\n用户经常错误地选择系统功能，而且需要明确标识离开这个的 “出口”。<br />\n比如支持撤销和重做的功能。</p>\n<h3 id=\"4️⃣-consistency-and-standards\"><a class=\"anchor\" href=\"#4️⃣-consistency-and-standards\">#</a> 4️⃣ Consistency and standards</h3>\n<p>一致性和标准化原则<br />\n<img data-src=\"https://i.loli.net/2020/10/17/17PCOBcbGm9oudD.jpg\" alt=\"\" /><br />\n用户不必怀疑是否不同的语言，不同的情景，或者不同的操作产生的结果实际上是同一件事情。遵循平台的惯例。也就是，同一用语、功能、操作保持一致。</p>\n<h3 id=\"5️⃣-error-prevention\"><a class=\"anchor\" href=\"#5️⃣-error-prevention\">#</a> 5️⃣ Error prevention</h3>\n<p>防错原则<br />\n<img data-src=\"https://i.loli.net/2020/10/17/bG5tO1h4Fkfgiya.jpg\" alt=\"\" /><br />\n比出现错误信息提示更好的是，更用心的设计防止这类问题发生。在用户选择动作发生之前，就要防止用户容易混淆或者错误的选择。<br />\n对于网页来说：通过网页的设计、重组或特别安排，防止用户出错。</p>\n<h3 id=\"6️⃣-recognition-rather-than-recall\"><a class=\"anchor\" href=\"#6️⃣-recognition-rather-than-recall\">#</a> 6️⃣ Recognition rather than recall</h3>\n<p>协助记忆原则<br />\n<img data-src=\"https://i.loli.net/2020/10/17/ULFkv5SV1OlwhBi.jpg\" alt=\"\" /><br />\n尽量减少用户对操作目标的记忆负荷，动作和选项都应该是可见的。<br />\n用户不必记住一个页面到另一个页面的信息。<br />\n系统的使用说明应该是可见的或者是容易获取的。<br />\n好记性不如烂笔头。<br />\n尽可能减少用户回忆负担，把需要记忆的内容摆上台面。</p>\n<p><img data-src=\"https://i.loli.net/2020/10/17/NCus2ZLQdzjVRm1.jpg\" alt=\"\" /><br />\n这也说了交互的一部分，比如填完表单，下一步应该生成表单，而不是下一步就是完成。</p>\n<h3 id=\"7️⃣-flexibility-and-efficiency-of-use\"><a class=\"anchor\" href=\"#7️⃣-flexibility-and-efficiency-of-use\">#</a> 7️⃣ Flexibility and efficiency of use</h3>\n<p>灵活高效原则<br />\n<img data-src=\"https://i.loli.net/2020/10/17/i4UxTF5t7wB6PNI.jpg\" alt=\"\" /><br />\n加速器－新用户是看不到的－也许专业用户也会经常察觉，系统可以满足有经验和无经验的用户。<br />\n允许用户进行频繁的操作。<br />\n这就要求开发者的开发技巧，更加便捷灵活的代码和反馈，优化再优化。<br />\n现在大多数网页的做法是：<br />\n中级用户的数量远高于初级和高级用户数。<br />\n为大多数用户设计，不要低估，也不可轻视，保持灵活高效。</p>\n<h3 id=\"8️⃣-aesthetic-and-minimalist-design\"><a class=\"anchor\" href=\"#8️⃣-aesthetic-and-minimalist-design\">#</a> 8️⃣ Aesthetic and minimalist design</h3>\n<p>审美和简约设计，易扫原则<br />\n<img data-src=\"https://i.loli.net/2020/10/17/JTnXWjO52QZgGNU.jpg\" alt=\"\" /><br />\n对话中不应该包含无关紧要的信息。<br />\n在段落中每增加一个单位的重要信息，就意味着要减少相应的弱化一些其他信息。<br />\n现在大多数网页的做法是：<br />\n互联网用户浏览网页的动作不是读，不是看，而是扫。<br />\n易扫，意味着突出重点，弱化和剔除无关信息。</p>\n<h3 id=\"9️⃣-help-users-recognize-diagnose-and-recover-from-errors\"><a class=\"anchor\" href=\"#9️⃣-help-users-recognize-diagnose-and-recover-from-errors\">#</a> 9️⃣ Help users recognize, diagnose, and recover from errors</h3>\n<p>容错原则<br />\n<img data-src=\"https://i.loli.net/2020/10/17/qgn7fG1Ybrm2xvh.jpg\" alt=\"\" /><br />\n错误信息应该用语言表达（不要用代码），较准确地反应问题所在，并且提出一个建设性的解决方案。<br />\n大多数流通的翻译是针对网页的：<br />\n帮助用户从错误中恢复，将损失降到最低。<br />\n如果无法自动挽回，则提供详尽的说明文字和指导方向，而非代码，比如 404。</p>\n<h3 id=\"help-and-documentation\"><a class=\"anchor\" href=\"#help-and-documentation\">#</a> 🔟 Help and documentation</h3>\n<p>人性化帮助原则<br />\n<img data-src=\"https://i.loli.net/2020/10/17/ZKWzlaM9UpIsymO.jpg\" alt=\"\" /><br />\n如果系统不使用文档是最好的，但是有必要提供帮助和文档。任何信息应容易去搜索，专注于用户的任务，列出具体的步骤来进行。</p>\n<p>帮助性提示最好的方式是：</p>\n<ol>\n<li>无需提示；</li>\n<li>一次性提示；</li>\n<li>常驻提示；</li>\n<li>帮助文档。</li>\n</ol>\n<h2 id=\"affordance-功能可见性\"><a class=\"anchor\" href=\"#affordance-功能可见性\">#</a> <a href=\"/computer-science/mse/itmd-534/lecture-1/#affordances-%E5%8A%9F%E8%83%BD%E5%8F%AF%E8%A7%81%E6%80%A7\">Affordance 功能可见性</a></h2>\n<div class=\"note info\">\n<p>参考链接：<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9kMDU1ZDJiNTYzNjY=\">世界顶尖大师的设计法则 NO.5 “功能可见性”</span></p>\n</div>\n<p>一些物品或环境会比其他的更适合某些功能。</p>\n<p>如果物品或环境的功能可见性符合人们的感官预期，那么这种设计就会被充分接纳，也有这高使用率，同时会被认为易于操作。<br />\n反之，当物品或环境的功能可见性与其预期功能相抵触，那么设计出来的产品就不会有很高的接纳率和使用率，同时也会被认为难以操作。</p>\n<p>“功能可见性” 只能说明物品或环境的特性。如果使用实体物品或环境的图像（例如按钮的图像），图像本身本不具备任何功能。按钮的功能可见性只是来自于使用者脑海中关于实体按钮的经验，不是图像的性质。因此，其功能可见性可谓是 “被理解” 而来。</p>\n<div class=\"note info\">\n<p>参考链接：<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy53b3NoaXBtLmNvbS91Y2QvMTA2NDY2NC5odG1s\">功能可见性在用户界面中的使用</span></p>\n</div>\n<p>根据专家的说法，术语 “功能可见性” 指的是事物被感知到的和实际的属性，主要是那些决定事物该如何被使用的基本属性。<br />\n功能可见性对事物运作提供了强有力的线索。平板是用来推的。旋钮是用来转动的。插槽是用来插入东西的。球是用来投掷或弹跳的。<br />\n当功能可见性被利用得当时，用户只需看一眼就知道该做什么，不再需要额外的图片、标签或指令。</p>\n<h2 id=\"韦伯定律\"><a class=\"anchor\" href=\"#韦伯定律\">#</a> <a href=\"/computer-science/mse/itmd-534/lecture-5/#webers-law\">韦伯定律</a></h2>\n<div class=\"note info\">\n<p>参考链接：<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yMjg0NzUxMQ==\">【译文】影响设计决策的 4 个心理学定律之三：韦伯定律</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZG91YmFuLmNvbS9ub3RlLzUwNjI3MDkzNC8=\">韦伯定律和费希纳定律（Weber-Fechner Law)</span></p>\n</div>\n<p>韦伯定律，德国生理学家 E.H. 韦伯通过对重量差别感觉的研究发现的一条定律，即感觉的差别阈限随原来刺激量的变化而变化，而且表现为一定的规律性，刺激的增量 (△I) 和原来刺激值 (I) 的比是一个常数 (K)，用公式表达即 K=△I/I，这个常数叫韦伯常数、韦伯分数或韦伯比率。</p>\n<p>韦伯定律表明：同一刺激差别量必须达到一定比例，才能引起差别感觉。<br />\n韦伯定律是心理量和物理量之间关系的定律。<br />\n可察觉的差别就是 “以最小量的（物理）刺激强度变化产生明显的感官体验上的变化。”</p>\n<p><img data-src=\"https://i.loli.net/2020/10/17/PD82E5vtm6yRQpC.png\" alt=\"\" /></p>\n<p>事物的细微变化，不会导致明显的不同。<br />\n心理学已经证明我们不喜欢改变或变化，尤其是较大的剧烈变化。</p>\n<p>UX 设计原则：<strong>渐进和微妙的重新设计</strong>。</p>\n<p>即使网站有设计更新也不要一下子放出来，可以有计划的逐步改变各种设计元素，然后在这个过程中收集用户反馈。如果需要发布重大的设计改版，先将其中的一小部分发给用户测试一下。先看一下用户的反应，这会影响到我们怎么为一般用户推出新的设计。</p>\n<h2 id=\"菲兹定律\"><a class=\"anchor\" href=\"#菲兹定律\">#</a> <a href=\"/computer-science/mse/itmd-534/lecture-5/#paul-morris-fittss-law\">菲兹定律</a></h2>\n<div class=\"note info\">\n<p>参考链接：<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy53b3NoaXBtLmNvbS9wZC80MTg0MDQyLmh0bWwjdG9jLTE=\">交互设计定律的 7 个法则：菲茨定律：距离与大小</span><br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy53b3NoaXBtLmNvbS9wZC80MTIxNTI3Lmh0bWw=\">设计法则： 4 个步骤带你了解菲茨定律（费茨法则）</span></p>\n</div>\n<p>菲兹定律在交互设计上主要作用是：</p>\n<ol>\n<li>降低操作复杂度 —— 通过改变对象的尺寸</li>\n<li>提高效率 —— 改变对象距离光标的位置</li>\n</ol>\n<p><img data-src=\"https://i.loli.net/2020/10/17/RsxCl7opYmhc3Ww.png\" alt=\"\" /></p>\n<h2 id=\"响应式设计\"><a class=\"anchor\" href=\"#响应式设计\">#</a> <a href=\"/computer-science/mse/itmd-534/lecture-5/#responsive-design-%E5%93%8D%E5%BA%94%E5%BC%8F%E8%AE%BE%E8%AE%A1\">响应式设计</a></h2>\n<div class=\"note info\">\n<p>参考链接：<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy53b3NoaXBtLmNvbS9wZC80MTgzMDM2Lmh0bWw=\">从四个层面归纳响应式设计</span><br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy53b3NoaXBtLmNvbS9pdC8xMjkwNzUuaHRtbA==\">响应式设计的现状与趋势</span></p>\n</div>\n<h2 id=\"metaphor-隐喻设计\"><a class=\"anchor\" href=\"#metaphor-隐喻设计\">#</a> Metaphor 隐喻设计</h2>\n<div class=\"note info\">\n<p>参考链接：<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzI3MDQ1Mzk4\">怎么用隐喻设计引导用户？</span><br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy53b3NoaXBtLmNvbS91Y2QvMTA4OTg1Ni5odG1s\">三种界面交互类型，四种隐喻设计方法</span><br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy53b3NoaXBtLmNvbS91Y2QvMTI2OTgwMC5odG1s\">深度解析：APP 界面设计中的隐喻</span></p>\n</div>\n<p>隐喻，英文（metaphor）是一个古老的词汇，在希腊文中原意 “转换”。</p>\n<p>希腊辞源 “μετά meta”（之间）及 “φέρω phero”（带有）之意，暗指 “将意义由某事物转移侧（至）另一事物”。而现代对隐喻的定义则更为深刻，从一种修辞手段转变为认知工具。</p>\n<p>隐喻设计可以将现实生活中用户熟悉的事物，以多种形式映射到界面中，从而使用户不熟悉的概念、陌生且复杂的操作等，变得熟悉与简单。</p>\n<h2 id=\"鼠标-各种电脑的历史\"><a class=\"anchor\" href=\"#鼠标-各种电脑的历史\">#</a> <a href=\"/computer-science/mse/itmd-534/lecture-1/#history\">鼠标、各种电脑的历史</a></h2>\n<h2 id=\"启发式评估\"><a class=\"anchor\" href=\"#启发式评估\">#</a> <a href=\"/computer-science/mse/itmd-534/lecture-4/\">启发式评估</a></h2>\n<div class=\"note info\">\n<p>参考链接：<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy53b3NoaXBtLmNvbS9wZC8xMTY3MjIuaHRtbA==\">如何进行可用性启发式评估</span><br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy53b3NoaXBtLmNvbS9wZC8yMTM2NjYwLmh0bWw=\">一套完整的评估测试策略 —— 启发式评估</span><br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy53b3NoaXBtLmNvbS9wZC8zMTcyMzM3Lmh0bWw=\">测试产品可用性的关键技巧 —— 启发式评估</span></p>\n</div>\n<p>启发式评估是指安排一组评估人员检查界面，并判断其是否与公认的可用性原则相符（“启发法”）。”— Jakob Nielsen</p>\n<p>启发式评估是指一个流程，在这个流程中，评估人员，也就是用户体验专家，浏览网站的界面、执行一系列操作，从而找出可用性问题，进而修复问题，让用户体验更流畅。</p>\n<h2 id=\"visibility\"><a class=\"anchor\" href=\"#visibility\">#</a> <a href=\"/computer-science/mse/itmd-534/lecture-1/#visibility-%E5%8F%AF%E8%A7%81%E5%B8%83%E5%B1%80\">visibility</a>，<a href=\"/computer-science/mse/itmd-534/lecture-1/#mapping-%E6%98%A0%E5%B0%84\">mapping</a>，<a href=\"/computer-science/mse/itmd-534/lecture-1/#affordances-%E5%8A%9F%E8%83%BD%E5%8F%AF%E8%A7%81%E6%80%A7\">an affordance</a>，<a href=\"/computer-science/mse/itmd-534/lecture-1/#feedback-%E5%8F%8D%E9%A6%88\">feedback</a> 的定义和区别</h2>\n<div class=\"note info\">\n<p>参考链接：<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5jc3VuLmVkdS9zY2llbmNlL2NvdXJzZXMvNjcxL2JpYmxpb2dyYXBoeS9wcmVlY2UuaHRtbA==\">Summary of Don Norman's Design Principles</span></p>\n</div>\n<dl>\n<dt>Visibility 可见布局</dt>\n<dd>The more visible functions are, the more likely users will be able to know what to do next. Incontrast, when functions are &quot;out of sight,&quot; it makes them more difficult to find and know how to use.<br />\n 功能越可见，用户越有可能知道下一步该怎么做。相反，当 “看不见” 功能时，会使它们更难找到和知道如何使用。</dd>\n<dt>Feedback 反馈</dt>\n<dd>Feedback is about sending back information about what action has been done and what has been accomplished, allowing the person to continue with the activity. Various kinds of feedback are available for interaction design-audio, tactile, verbal, and combinations of these.<br />\n 反馈是关于发回有关已执行的操作和已完成的操作的信息的信息，使该人可以继续进行该活动。各种反馈可用于交互设计 - 音频，触觉，语言和这些的组合。</dd>\n<dt>Constraints 约束</dt>\n<dd>The design concept of constraining refers to determining ways of restricting the kind of user interaction that can take place at a given moment. There are various ways this can be achieved.<br />\n 约束的设计概念是指确定限制在给定时刻可能发生的用户交互类型的方式。有多种方法可以实现。</dd>\n<dt>Mapping 映射</dt>\n<dd>This refers to the relationship between controls and their effects in the world. Nearly all artifacts need some kind of mapping between controls and effects, whether it is a flashlight, car, power plant, or cockpit. An example of a good mapping between control and effect is the up and down arrows used to represent the up and down movement of the cursor, respectively, on a computer keyboard.<br />\n 指控件及其在世界上的效果之间的关系。几乎所有的工件都需要在控件和效果之间进行某种映射，无论是手电筒，汽车，发电厂还是驾驶舱。控制和效果之间良好映射的一个示例是向上和向下箭头，分别用于表示光标在计算机键盘上的向上和向下移动。</dd>\n<dt>Consistency 一致性</dt>\n<dd>This refers to designing interfaces to have similar operations and use similar elements for achieving similar tasks. In particular, a consistent interface is one that follows rules, such as using the same operation to select all objects. For example, a consistent operation is using the same input action to highlight any graphical object at the interface, such as always clicking the left mouse button. Inconsistent interfaces, on the other hand, allow exceptions to a rule.<br />\n 这是指将界面设计为具有相似的操作，并使用相似的元素来完成相似的任务。特别是，一致的接口是遵循规则的接口，例如使用相同的操作选择所有对象。例如，一致的操作使用相同的输入操作来突出显示界面上的任何图形对象，例如始终单击鼠标左键。另一方面，不一致的接口允许规则例外。</dd>\n<dt>Affordance 功能可见</dt>\n<dd>is a term used to refer to an attribute of an object that allows people to know how to use it. For example, a mouse button invites pushing (in so doing acting clicking) by the way it is physically constrained in its plastic shell. At a very simple level, to afford means &quot;to give a clue&quot; (Norman, 1988). When the affordances of a physical object are perceptually obvious it is easy to know how to interact with it.<br />\n 是用于指代对象的属性的术语，该属性使人们知道如何使用它。例如，鼠标按钮通过物理上被限制在其塑料外壳中的方式来邀请按下（这样做是执行点击动作）。从一个非常简单的层面上讲，支付意味着 “给出线索”（Norman，1988）。当物理对象的承受能力在感知上很明显时，很容易知道如何与之交互。</dd>\n</dl>\n<h1 id=\"单词表\"><a class=\"anchor\" href=\"#单词表\">#</a> 单词表</h1>\n<table>\n<thead>\n<tr>\n<th>单词</th>\n<th>翻译</th>\n<th>单词</th>\n<th>翻译</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Multiple Choice Questions</td>\n<td>单项选择题</td>\n<td>responsive</td>\n<td>响应</td>\n</tr>\n<tr>\n<td>evaluation</td>\n<td>评估</td>\n<td>engine</td>\n<td>引擎</td>\n</tr>\n<tr>\n<td>heuristic</td>\n<td>启发式的</td>\n<td>optimization</td>\n<td>优化</td>\n</tr>\n<tr>\n<td>judge</td>\n<td>判断</td>\n<td>invented</td>\n<td>发明</td>\n</tr>\n<tr>\n<td>experts</td>\n<td>专家</td>\n<td>metaphors</td>\n<td>隐喻，比喻</td>\n</tr>\n<tr>\n<td>usability</td>\n<td>可用性</td>\n<td>underlying</td>\n<td>潜在的，底层的</td>\n</tr>\n<tr>\n<td>guidelines</td>\n<td>指引，指南</td>\n<td>conceptual</td>\n<td>概念</td>\n</tr>\n<tr>\n<td>conducts</td>\n<td>组织</td>\n<td>accessibility</td>\n<td>易接近；可亲；可以得到</td>\n</tr>\n<tr>\n<td>experiment</td>\n<td>实验</td>\n<td>particularly</td>\n<td>特别是；明确地</td>\n</tr>\n<tr>\n<td>psychologists</td>\n<td>心理学专家</td>\n<td>measuring</td>\n<td>测量</td>\n</tr>\n<tr>\n<td>questionnaire</td>\n<td>问卷</td>\n<td>satisfaction</td>\n<td>满意，满足</td>\n</tr>\n<tr>\n<td>expertise</td>\n<td>专业知识</td>\n<td>accelerators</td>\n<td>加速器</td>\n</tr>\n<tr>\n<td>folder</td>\n<td>文件夹</td>\n<td>shortcuts</td>\n<td>快捷方式</td>\n</tr>\n<tr>\n<td>contents</td>\n<td>内容</td>\n<td>complete</td>\n<td>完成</td>\n</tr>\n<tr>\n<td>animation</td>\n<td>动画</td>\n<td>distance</td>\n<td>距离</td>\n</tr>\n<tr>\n<td>appears</td>\n<td>出现</td>\n<td>elevator</td>\n<td>电梯</td>\n</tr>\n<tr>\n<td>screen</td>\n<td>屏幕</td>\n<td>rationale</td>\n<td>基本原理</td>\n</tr>\n<tr>\n<td>interaction</td>\n<td>交互</td>\n<td>automobile</td>\n<td>汽车</td>\n</tr>\n<tr>\n<td>narrative</td>\n<td>叙述</td>\n<td>panel</td>\n<td>仪表盘</td>\n</tr>\n<tr>\n<td>represents</td>\n<td>代表</td>\n<td>interface</td>\n<td>界面</td>\n</tr>\n<tr>\n<td>particular</td>\n<td>特殊的</td>\n<td>justification</td>\n<td>理由；辩护</td>\n</tr>\n<tr>\n<td>average</td>\n<td>平均</td>\n<td>alternatives</td>\n<td>替代选择，备选方案</td>\n</tr>\n<tr>\n<td>enables</td>\n<td>使能够</td>\n<td>sensory</td>\n<td>感觉</td>\n</tr>\n<tr>\n<td>functions</td>\n<td>功能，函数</td>\n<td>engineered</td>\n<td>设计</td>\n</tr>\n<tr>\n<td>numeric</td>\n<td>数值</td>\n<td>medium</td>\n<td>方法</td>\n</tr>\n<tr>\n<td>redundant</td>\n<td>多余的</td>\n<td>interpreter</td>\n<td>解释器</td>\n</tr>\n<tr>\n<td>logical</td>\n<td>逻辑的</td>\n<td>dexterity</td>\n<td>敏捷</td>\n</tr>\n<tr>\n<td>constraint</td>\n<td>约束</td>\n<td>enhance</td>\n<td>增加</td>\n</tr>\n<tr>\n<td>retainability</td>\n<td>可维持性</td>\n<td>semantic</td>\n<td>语义</td>\n</tr>\n<tr>\n<td>competition</td>\n<td>竞争</td>\n<td>acceptance</td>\n<td>接纳；赞同</td>\n</tr>\n</tbody>\n</table>\n","tags":["计算机科学","Master of Software Engineering","ITMD 534. Human Computer Interaction","人机交互"]},{"id":"https://shoka.lostyu.me/computer-science/mse/itmd-534/lecture-5/","url":"https://shoka.lostyu.me/computer-science/mse/itmd-534/lecture-5/","title":"Lecture 5. Mobile Usability","date_published":"2020-10-11T10:31:28.000Z","content_html":"<h1 id=\"different-from-pcs-or-web\"><a class=\"anchor\" href=\"#different-from-pcs-or-web\">#</a> Different from PCs or web</h1>\n<ul>\n<li>Immediate requests<br />\n 立即要求</li>\n<li>Short interactions, frequently interrupted<br />\n 互动简短，经常被打断</li>\n<li>Public use<br />\n 公共用途</li>\n<li>Fashion statement<br />\n 时尚宣言\n<ul>\n<li>Less business-oriented<br />\n 较少以业务为导向</li>\n<li>More value to design<br />\n 更具设计价值</li>\n</ul>\n</li>\n<li>Little engagement<br />\n 很少参与</li>\n<li>Must always be able to answer the phone<br />\n 必须始终能够接听电话</li>\n</ul>\n<h1 id=\"mobile-first\"><a class=\"anchor\" href=\"#mobile-first\">#</a> Mobile first</h1>\n<p>Consultants recommend web sites designed for mobile first<br />\n 建议为移动设备优先设计的网站</p>\n<ul>\n<li>Understand users' most important tasks<br />\n 了解用户最重要的任务</li>\n<li>Focus on key elements<br />\n 专注于关键要素</li>\n<li>Harder to get a good user experience<br />\n 难以获得良好的用户体验</li>\n<li>Easier to spread out and add menu items, etc. versus removing them<br />\n 与删除菜单项相比，更易于展开和添加菜单项等</li>\n<li>More demands on responsiveness<br />\n 对响应能力的更多要求</li>\n<li>Interaction limitations –no hover capability<br />\n 互动限制 - 不要悬停功能</li>\n</ul>\n<h2 id=\"focus-on-navigation-or-content\"><a class=\"anchor\" href=\"#focus-on-navigation-or-content\">#</a> Focus on navigation or content</h2>\n<p class=\"gallery\"><img data-src=\"https://i.loli.net/2020/10/12/JdVMK94oEWqFDT2.jpg\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/10/12/UDwXC6RFot3yn2m.jpg\" alt=\"\" /></p>\n<h1 id=\"responsive-design-响应式设计\"><a class=\"anchor\" href=\"#responsive-design-响应式设计\">#</a> Responsive Design 响应式设计</h1>\n<ul>\n<li>Web sites adjust themselves based on size of screen<br />\n 网站会根据屏幕大小自行调整</li>\n<li>Programmed into the html of each page<br />\n 编程到每个页面的 html 中\n<ul>\n<li>Mobile vs. desktop versions<br />\n 移动版与台式机版</li>\n<li>Vs. providing different pages based on browser/device request<br />\nVs. 根据浏览器 / 设备请求提供不同的页面</li>\n</ul>\n</li>\n<li>Html and CSS have built-in features<br />\nHTML 和 CSS 内置有响应式功能</li>\n<li>Dreamweaver, etc. let you design for different ranges of sizes<br />\nDreamweaver 等可让您设计不同的尺寸范围</li>\n<li>Fewer options &amp; elements (faster downloading)<br />\n 更少的选项和元素（更快的下载）</li>\n<li>Designed for smaller screen<br />\n 专为较小的屏幕而设计</li>\n<li>Responsive design works better for search-engine optimization (SEO)<br />\n 自适应设计更适合搜索引擎优化（SEO）<br />\npc 版和移动版可以使用同一个 URL 地址</li>\n</ul>\n<h1 id=\"human-abilities\"><a class=\"anchor\" href=\"#human-abilities\">#</a> Human abilities</h1>\n<p>Human considered to be a…<br />\n 人类被认为是……</p>\n<ol>\n<li>\n<p>Sensory processor<br />\n 感官处理器</p>\n<ul>\n<li>Experimental psych, sensory psych<br />\n 实验心理，感觉心理</li>\n<li>e.g. Model--Human Processor (Card, Moran &amp; Newell)<br />\n 模型 - 人为处理器</li>\n</ul>\n</li>\n<li>\n<p>Interpreter/Predictor<br />\n 解释器 / 预测器</p>\n<ul>\n<li>Cognitive psych, AI<br />\n 认知心理，人工智能</li>\n<li>e.g. Distributed cognition (Hutchins)<br />\n 分布式认知</li>\n</ul>\n</li>\n<li>\n<p>Actor in environment<br />\n 环境中的活动者</p>\n<ul>\n<li>Activity theory, ethnography<br />\n 活动理论，人种志</li>\n<li>e.g. Situated action (Suchman)<br />\n 情景动作</li>\n<li>e.g. Activity theory (Vygotsky, Nardi)<br />\n 活动理论</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"what-makes-a-system-usable\"><a class=\"anchor\" href=\"#what-makes-a-system-usable\">#</a> What makes a system usable</h2>\n<table>\n<thead>\n<tr>\n<th>\n<p>Human Considered to be a ..<br />\n 人类被认为是...</p>\n</th>\n<th>\n<p>Usability results when the system ..<br />\n 系统的可用性结果...</p>\n</th>\n<th>\n<p>Evaluation methods..<br />\n 评价方法</p>\n</th>\n</tr>\n<tbody>\n<tr>\n<td>\n<p>Sensory Processor<br />\n 感官处理器</p>\n</td>\n<td>\n<p>Fits within human limits<br />\n 符合人类限制</p>\n</td>\n<td>\n<p>Quantitative Experiments<br />\n 定量试验</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>Interpretor/Predictor<br />\n 解释器 / 预测器</p>\n</td>\n<td>\n<p>Fits with knowledge<br />\n 符合认知</p>\n</td>\n<td>\n<p>Task Analysis,Contextual Inquiry<br />\n 任务分析，情境调查</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>Actor in environment<br />\n 环境中的活动者</p>\n</td>\n<td>\n<p>Fits with task and social context<br />\n 适合任务和社交环境</p>\n</td>\n<td>\n<p>Ethnographic field work, Participatory design<br />\n 人种学领域工作，参与式设计</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"two-views-of-interaction\"><a class=\"anchor\" href=\"#two-views-of-interaction\">#</a> Two views of interaction</h2>\n<p>互动的两种观点</p>\n<ul>\n<li>Interaction with\n<ul>\n<li>Software system is a tool or machine<br />\n 软件系统是工具还是机器</li>\n<li>Interface is a usability--engineered membrane<br />\n 界面是易用性 - 工程膜</li>\n<li>Human as processor and Interpreter models<br />\n 人作为处理器和解释器模型</li>\n</ul>\n</li>\n<li>Interaction through<br />\n 通过互动\n<ul>\n<li>Software as a medium used to interact with task object and other people<br />\n 软件作为媒介，与任务对象及其他人进行互动</li>\n<li>Interface plays a role in social context<br />\n 界面在社交环境中发挥作用</li>\n<li>Human as interpreter and actor<br />\n 人作为解释器和活动者</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"human-capabilities\"><a class=\"anchor\" href=\"#human-capabilities\">#</a> Human capabilities</h1>\n<table>\n<thead>\n<tr>\n<th>\n<p>Senses<br />\n 感官</p>\n</th>\n<th>\n<p>Information Processing<br />\n 信息处理</p>\n</th>\n<th>\n<p>Motor Systems<br />\n 电机系统</p>\n</th>\n</tr>\n<tbody>\n<tr>\n<td>Vision</td>\n<td>Perceptual</td>\n<td>Physical abilities</td>\n</tr>\n<tr>\n<td>Hearing</td>\n<td>Cognitive</td>\n<td>Reach</td>\n</tr>\n<tr>\n<td>Touch</td>\n<td>Memory</td>\n<td>Speed</td>\n</tr>\n<tr>\n<td>Smell</td>\n<td>-Short Term</td>\n<td></td>\n</tr>\n<tr>\n<td>Taste</td>\n<td>-Medium Term</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>-Long Term</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Processes</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>-Selective attention</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>-Learning</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>-Problem Solving</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>-Language</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"senses\"><a class=\"anchor\" href=\"#senses\">#</a> Senses</h2>\n<ul>\n<li>Sight, Hearing, Touch important for current HCI.<br />\n 视觉，听觉，触觉对于当前的人机交互非常重要。\n<ul>\n<li>Smell, Taste ???<br />\n 闻起来，味道？？？</li>\n</ul>\n</li>\n<li>Abilities and limitations affect design<br />\n 能力和局限性影响设计</li>\n</ul>\n<p>Key concepts of senses:<br />\n 感官的关键概念</p>\n<ul>\n<li>Just noticeable differences<br />\n 只是明显的差异\n<ul>\n<li>How much of a change in stimulus is needed before it can be sensed<br />\n 需要多少刺激才能感测到</li>\n<li>Tends to be logarithmic – Weber's law<br />\n 倾向于对数 - 韦伯定律</li>\n</ul>\n</li>\n<li>Magnitude of physical stimulus vs perceived magnitude<br />\n 物理刺激的幅度与感知的幅度\n<ul>\n<li>Doubling number of photons does not double perceived intensity<br />\n 光子数量加倍不会使感知强度加倍</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"webers-law\"><a class=\"anchor\" href=\"#webers-law\">#</a> Weber's law</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2hhbmFjYWRlbXkub3JnL3Rlc3QtcHJlcC9tY2F0L3Byb2Nlc3NpbmctdGhlLWVudmlyb25tZW50L3NlbnNvcnktcGVyY2VwdGlvbi92L3dlYmVycy1sYXctYW5kLXRocmVzaG9sZHM=\">Video: Weber's law and thresholds</span></p>\n<p><div class=\"media-container\"><div class=\"player\" data-type=\"video\" data-src='[{\"name\":\"Weber’s law and thresholds\",\"url\":\"https://cdn.kastatic.org/ka-youtube-converted/O_nY1TM2RZM.mp4/O_nY1TM2RZM.mp4#t=0\"}]'></div></div></p>\n<h2 id=\"vision\"><a class=\"anchor\" href=\"#vision\">#</a> Vision</h2>\n<ul>\n<li>Visual System<br />\n 视觉系统\n<ul>\n<li>Eye 眼睛</li>\n<li>Retina 视网膜</li>\n<li>Neural Pathway 神经通路</li>\n</ul>\n</li>\n<li>About 180º of arc 约 180º 弧度</li>\n<li>Light reception happens in retina (back of eye)<br />\n 光接收发生在视网膜（眼后）</li>\n<li>Fovea (highest-resolution area)<br />\n 中央凹（最高分辨率区域）</li>\n<li>Just 2º of arc<br />\n 仅 2º 弧度</li>\n<li>75% of visual operations<br />\n 视觉操作的 75％</li>\n<li>Not like a camera; doesn’t take the whole picture at once<br />\n 不像照相机； 不能一次拍摄全部照片</li>\n</ul>\n<h3 id=\"visual-abilities\"><a class=\"anchor\" href=\"#visual-abilities\">#</a> Visual abilities</h3>\n<ul>\n<li>\n<p>Sensitivity 灵敏度</p>\n<ul>\n<li>Luminance 10 –107 ml (miliambert)<br />\n 亮度 10 –107 毫升</li>\n</ul>\n</li>\n<li>\n<p>Acuity 敏锐度</p>\n<ul>\n<li>Detection, Alignment, Recognition<br />\n 检测，对准，识别</li>\n<li>Retinal position –Fovea has best acuity<br />\n 视网膜位置–视力最强</li>\n</ul>\n</li>\n<li>\n<p>Movement 运动</p>\n<ul>\n<li>Tracking, Reading, Vibrations<br />\n 跟踪，阅读，振动</li>\n</ul>\n</li>\n<li>\n<p>Implications 含义</p>\n<ul>\n<li>Font size and location depend on task<br />\n 字体大小和位置取决于任务</li>\n<li>Much done by context and grouping<br />\n 通过情景和分组来完成很多工作</li>\n</ul>\n</li>\n<li>\n<p>Retina has 视网膜有</p>\n<ul>\n<li>6.5 M cones (color vision), mostly at the fovea<br />\n6.5 M 视锥细胞（彩色视觉），主要在中央凹处</li>\n<li>About 150,000 cones per square millimeter<br />\n 每平方毫米约 150,000 个圆锥</li>\n<li>Fewer blue sensing cones than red and green at the fovea<br />\n 中央凹处的蓝色感应锥体比红色和绿色少</li>\n<li>100 M rods (night vision), spread over the retina –none at the fovea<br />\n100 M 杆（夜视），散布在视网膜上–中央凹处无</li>\n</ul>\n</li>\n<li>\n<p>Adaptation 适应</p>\n</li>\n<li>\n<p>Switching between dark and light causes fatigue<br />\n 在黑暗和明亮之间切换会导致疲劳</p>\n</li>\n</ul>\n<h3 id=\"color-vision\"><a class=\"anchor\" href=\"#color-vision\">#</a> Color vision</h3>\n<p><img data-src=\"https://i.loli.net/2020/10/13/h3XsdDKzbUp4xqO.jpg\" alt=\"\" /></p>\n<ul>\n<li>Color and the retina\n<ul>\n<li>380nm (blue) ~ 770nm (red)</li>\n<li>Problems with cones or ganglion cells causes problems with color perception</li>\n<li>(Not really &quot;color blindness&quot;)</li>\n<li>8% males, 0.5% females</li>\n</ul>\n</li>\n<li>Implications 含义\n<ul>\n<li>Avoid saturated colors 避免色彩饱和</li>\n<li>Color coding should be redundant when possible 颜色编码应尽可能冗余</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://i.loli.net/2020/10/13/Xb7Gy8eLNYQtcjl.jpg\" alt=\"\" /></p>\n<h2 id=\"paul-morris-fittss-law\"><a class=\"anchor\" href=\"#paul-morris-fittss-law\">#</a> Paul Morris Fitts's Law</h2>\n<ul>\n<li>The bigger an object and the closer it is to us, the easier it is to move to.<br />\n 物体越大，离我们越近，移动起来就越容易。\n<ul>\n<li>Fitts's law can be used as an aid to make educated decisions on the size and placement of user interface elements.<br />\n 菲茨定律可以帮助做出有关用户界面元素的大小和位置的明智决定。</li>\n</ul>\n</li>\n<li>Fitts's law is centered around a mathematical equation that is used to illustrate the time it takes to reach a target object.<br />\n 菲茨定律以数学方程式为中心，该数学方程式用于说明到达目标物体所需的时间。</li>\n</ul>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>T</mi><mo>=</mo><mi>a</mi><mo>+</mo><mi>b</mi><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mo fence=\"true\">(</mo><mn>2</mn><mo>∗</mo><mfrac><mi>D</mi><mi>W</mi></mfrac><mo fence=\"true\">)</mo></mrow><annotation encoding=\"application/x-tex\">T = a + b \\log_{2} \\Biggl( 2 \\ast \\frac{D}{W} \\Biggr)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.0000299999999998em;vertical-align:-1.25003em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20696799999999996em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24414em;\"><span></span></span></span></span></span></span><span class=\"mopen\"><span class=\"delimsizing size4\">(</span></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.0000299999999998em;vertical-align:-1.25003em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.36033em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\"><span class=\"delimsizing size4\">)</span></span></span></span></span></span></p>\n<blockquote>\n<ul>\n<li>T <strong>Time</strong> is the amount of time required to complete the movement<br />\n 是完成移动所需的时间</li>\n<li><strong>a</strong> is the human reaction time and <strong>b</strong> is the time needed by human nervous system to process a bit of information<br />\n<strong>a</strong> 是人类的反应时间，而<strong> b</strong> 是人类神经系统处理一些信息所需的时间</li>\n<li>D <strong>Distance</strong> is a measurement from the starting point to the end point (target object)<br />\n 距离是从起点到终点（目标对象）的量度</li>\n<li>W <strong>Width</strong> is the width of the target object<br />\n 是目标对象的宽度</li>\n</ul>\n</blockquote>\n<h2 id=\"memory\"><a class=\"anchor\" href=\"#memory\">#</a> Memory</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1iU3ljZEl4LUM0OCZhbXA7YWJfY2hhbm5lbD1DcmFzaENvdXJzZQ==\">How We Make Memories: Crash Course Psychology #13</span></p>\n<p><div class=\"video-container\"><iframe src=\"https://www.youtube.com/embed/bSycdIx-C48\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe></div></p>\n","tags":["计算机科学","Master of Software Engineering","ITMD 534. Human Computer Interaction","人机交互"]},{"id":"https://shoka.lostyu.me/computer-science/mse/itmd-510/week-7/","url":"https://shoka.lostyu.me/computer-science/mse/itmd-510/week-7/","title":"Week 7. Generic Classes","date_published":"2020-10-09T03:41:21.000Z","content_html":"<h1 id=\"notes\"><a class=\"anchor\" href=\"#notes\">#</a> Notes</h1>\n<h2 id=\"generic-classes-and-methods\"><a class=\"anchor\" href=\"#generic-classes-and-methods\">#</a> Generic Classes and Methods</h2>\n<p>Generics <ins>add</ins> <span class=\"red\">stability</span> and <span class=\"red\">code efficiency</span> to your code work.<br />\n 泛型为编程工作增加了稳定性和编码效率。</p>\n<p>A generic class or method is one whose definition uses a placeholder for one or more of the types it works with.<br />\n 泛型类或方法是一种其定义使用占位符的类或方法。</p>\n<p>The placeholder is really a type parameter.<br />\n 占位符实际上是一个类型参数。</p>\n<p>For a generic class, the actual type argument is specified when an object of the generic class is being instantiated.<br />\n 对于泛型类，当实例化该泛型类的对象时，将指定实际的类型实参。</p>\n<p>For a generic method, the compiler deduces the actual type argument from the type of data being passed to the method.<br />\n 对于泛型方法，编译器从传递给方法的数据类型中推导实际的类型参数。</p>\n<h3 id=\"why-use-generics\"><a class=\"anchor\" href=\"#why-use-generics\">#</a> Why Use Generics?</h3>\n<p>In a nutshell, generics enable types (classes and interfaces) to be parameters when defining classes, interfaces, and methods.<br />\n 简而言之，泛型在定义类、接口和方法时，使类型（类和接口）成为参数。</p>\n<p>Type parameters provide a way for you to reuse the same code with different inputs.<br />\n 类型参数提供了一种在不同的输入中重用相同代码的方法。</p>\n<p>Code that uses generics has many benefits over nongeneric code:<br />\n 与非泛型代码相比，使用泛型的代码有很多好处：</p>\n<ul>\n<li>Stronger type checks at compile time.<br />\n 在编译时进行更强大的类型检查。<br />\nA Java compiler applies strong type checking to generic code and issues errors if the code violates type safety.<br />\nJava 编译器对泛型代码进行强类型检查，如果代码违反类型安全，则会发出错误。<br />\nFixing compile-time errors is easier than fixing runtime errors, which can be difficult to find.<br />\n 修复编译时错误比修复运行时错误容易，后者可能很难找到。</li>\n<li>Elimination of casts.<br />\n 消除强制转换。<br />\nThe following nongeneric code snippet requires casting:<br />\n 以下非泛型代码段需要强制转换：<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>When rewritten using generics, the code does not require casting:<br />\n 使用泛型重写时，代码不需要强制转换：<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// no cast</span></pre></td></tr></table></figure></li>\n<li>The ability to implement generic algorithms.<br />\n 实现泛型算法的能力。<br />\nBy using generics, programmers can implement generic algorithms that work on collections of different types, can be customized, and are type safe and easier to read.<br />\n 通过使用泛型，程序员可以实现泛型算法，以处理不同类型的集合，可以对其进行自定义，并且类型安全，且易于阅读。<br />\n<img data-src=\"https://i.loli.net/2020/10/22/fpBKjHlJNuYLnaV.png\" alt=\"\" /></li>\n</ul>\n<h2 id=\"stacks-堆栈\"><a class=\"anchor\" href=\"#stacks-堆栈\">#</a> Stacks 堆栈</h2>\n<p>A Stack is a Last In First Out (LIFO) data structure.<br />\n 堆栈是后进先出（LIFO）数据结构。</p>\n<p>It supports two basic operations called push and pop.<br />\n 它支持两个基本操作，称为推入和弹出。</p>\n<p>The push operation adds an element at the top of the stack, and the pop operation removes an element from the top of the stack.<br />\n 推操作在堆栈顶部添加一个元素，而弹出操作从堆栈顶部移除一个元素。</p>\n<p><img data-src=\"https://i.loli.net/2020/10/22/L5JETRaHqz8ovyi.png\" alt=\"\" /></p>\n<p>Use cases: Consider a stack of books in inventory, stack of trays, etc.<br />\n 用例：考虑一堆库存的书籍，一叠托盘等。<br />\n<img data-src=\"https://i.loli.net/2020/10/22/HCakDBFfALYQPWe.png\" alt=\"\" title=\"Stack Class example in Java – Inventory problem\nJava中的堆栈类示例——库存问题\" /></p>\n<p>A stack is a linear collection which allows adding or removing elements from the same end (the top).<br />\n 堆栈是线性集合，允许从同一端（顶部）添加或删除元素。</p>\n<p>Stack elements are processed in a last in, first out (LIFO) manner.<br />\n 堆栈元素以后进先出（LIFO）的方式处理。</p>\n<p>In contrast, a queue is a collection where elements are processed in a first in, first out (FIFO) manner.<br />\n 相反，队列是一个集合，其中以先进先出（FIFO）的方式处理元素。</p>\n<p>Note that, stacks and queues have restrictions on how the elements can be accessed.<br />\n 请注意，堆栈和队列对如何访问元素有限制。</p>\n<h3 id=\"lifo-vs-fifo\"><a class=\"anchor\" href=\"#lifo-vs-fifo\">#</a> LIFO vs. FIFO?</h3>\n<p>Consider the following accounting example comparing LIFO and FIFO.<br />\n 考虑下面的结算示例，比较 LIFO 和 FIFO。</p>\n<p>Suppose we bought 5 identical computers at prices: $400, $400, $500, $500, $600; and then we sold 3 of them for $800 each.<br />\n 假设我们以价格分别购买了 5 台相同的计算机：$400, $400, $500, $500, $600； 然后我们以每台 $800 的价格出售了其中的三台。</p>\n<p>What is the profit?<br />\n 利润是多少？<br />\nWhat is the value of the inventory?<br />\n 库存的价值是多少？</p>\n<p>The answer depends on which computers were sold.<br />\n 答案取决于出售的计算机。</p>\n<p>Although the computers are physically identical, their accounting values are different.<br />\n 尽管这些计算机在物理上是相同的，但是其结算价值却不同。</p>\n<p>The following are different calculations using FIFO and LIFO accounting.<br />\n 以下是使用 FIFO 和 LIFO 结算的不同计算。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>LIFO</th>\n<th>FIFO</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<p>Costs of Sold<br />\n 销售成本</p>\n</td>\n<td>\n<p>600 + 500 + 500 = 1600</p>\n</td>\n<td>\n<p>400 + 400 + 500 = 1300</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>Profit<br />\n 利润</p>\n</td>\n<td>\n<p>2400 – 1600 = 800</p>\n</td>\n<td>\n<p>2400 – 1300 = 1100</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>Inventory<br />\n 库存</p>\n</td>\n<td>\n<p>400 + 400 = 800</p>\n</td>\n<td>\n<p>500 + 600 = 1100</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>Revenue+Inventory<br />\n 收入 + 库存</p>\n</td>\n<td>\n<p>2400 + 800 = 3200</p>\n</td>\n<td>\n<p>2400 + 1100 = 3500</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"demo\"><a class=\"anchor\" href=\"#demo\">#</a> demo</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Stack.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Stack</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Stack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">expandCapacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        data <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>length <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token function\">expandCapacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        data<span class=\"token punctuation\">[</span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre> </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token class-name\">String</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stack empty\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        count<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre> </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">return</span> count <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre> </pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre> </pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token class-name\">Stack</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        s<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        s<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        s<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Carl\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        s<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dave\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre> </pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Generic Stack.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StackGeneric</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">StackGeneric</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        data <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">expandCapacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        data <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>length <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token function\">expandCapacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        data<span class=\"token punctuation\">[</span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre> </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token class-name\">T</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stack empty\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        count<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre> </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">return</span> count <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre> </pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre> </pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token class-name\">StackGeneric</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StackGeneric</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        s<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        s<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        s<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Carl\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        s<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dave\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token class-name\">StackGeneric</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> i <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StackGeneric</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        i<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        i<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre> </pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>","tags":["计算机科学","Master of Software Engineering","ITMD 510. Object-Oriented App Develop","Java"]},{"id":"https://shoka.lostyu.me/computer-science/mse/itmd-534/lecture-4/","url":"https://shoka.lostyu.me/computer-science/mse/itmd-534/lecture-4/","title":"Lecture 4. Heuristic Evaluation","date_published":"2020-10-02T10:11:26.000Z","content_html":"<h1 id=\"what-is-heuristic-evaluation\"><a class=\"anchor\" href=\"#what-is-heuristic-evaluation\">#</a> What is Heuristic Evaluation</h1>\n<p>启发式评估</p>\n<ul>\n<li>\n<p>Performed by an Expert<br />\n 由专家进行</p>\n</li>\n<li>\n<p>Steps</p>\n<ul>\n<li>Inspect UI thoroughly<br />\n 彻底检查用户界面</li>\n<li>Compare UI against heuristics<br />\n 启发式地比较用户界面</li>\n<li>List usability problems<br />\n 列出可用性问题</li>\n<li>Explain and justify each problem with heuristics<br />\n 用启发式方法解释并论证每个问题</li>\n<li>Provide a possible solution to the identified issue<br />\n 为已发现的问题提供可能的解决方案</li>\n</ul>\n</li>\n<li>\n<p>Method</p>\n<ul>\n<li>Expert evaluates the user interface using guidelines<br />\n 专家根据准则评估用户界面</li>\n<li>Usability &quot;inspection&quot; method<br />\n 可用性 “检查” 方法\n<ul>\n<li>Depends on evaluator's judgment<br />\n 取决于评估者的判断</li>\n</ul>\n</li>\n<li>Is a &quot;discount&quot; usability engineering method<br />\n 是 “折扣” 可用性工程方法\n<ul>\n<li>One case study found factor of 48 in cost/benefit:<br />\n 研究发现成本 / 收益比为 48\n<ul>\n<li>Cost of inspection: $10,500. Benefit: $500,000 (Nielsen, 1994)<br />\n 检查费用：$ 10,500。 收益：$ 500,000</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"how-to-do-heuristic-evaluation\"><a class=\"anchor\" href=\"#how-to-do-heuristic-evaluation\">#</a> How to do Heuristic Evaluation</h1>\n<p>如何进行启发式评估</p>\n<ul>\n<li>Systematic inspection of system<br />\n 系统检查</li>\n<li>Multiple evaluators are better<br />\n 多个评估者为佳</li>\n<li>Trained evaluators are better<br />\n 训练有素的评估者为佳\n<ul>\n<li>22% vs. 41% vs. 60% of errors found</li>\n</ul>\n</li>\n<li>Go through whole interface<br />\n 贯穿整个界面</li>\n<li>Result: list of problems, guidelines violated, and proposed fixes<br />\n 结果：问题清单，违反的准则，以及修正建议</li>\n</ul>\n<h2 id=\"he-is-not-ut\"><a class=\"anchor\" href=\"#he-is-not-ut\">#</a> HE is not UT</h2>\n<ul>\n<li>Evaluator is not the user<br />\n 评估者不是用户</li>\n<li>Analogy: Code inspection Vs Testing<br />\n 类比：代码检查与测试</li>\n<li>HE often finds problems that UT misses<br />\nHE 经常发现 UT 遗漏的问题\n<ul>\n<li>Inconsistent fonts<br />\n 字体不一致</li>\n<li>Size and distance (Fitt's law problems)<br />\n 大小和距离（菲特定律问题）</li>\n</ul>\n</li>\n<li>But UT is standard for usability<br />\n 但是 UT 是可用性的标准</li>\n</ul>\n<h2 id=\"how-many-evaluators-需要几位评估者\"><a class=\"anchor\" href=\"#how-many-evaluators-需要几位评估者\">#</a> How many Evaluators 需要几位评估者</h2>\n<p>Nielsen suggests optimal might be 4</p>\n<p class=\"gallery\"><img data-src=\"https://i.loli.net/2020/10/06/9fn74soRxWjCNEA.jpg\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/10/06/KpCimZIcTGVXwQu.jpg\" alt=\"\" /></p>\n<h2 id=\"he-methodology-方法论\"><a class=\"anchor\" href=\"#he-methodology-方法论\">#</a> HE Methodology 方法论</h2>\n<ul>\n<li>Reference: Nielsen's <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy51c2VpdC5jb20vcGFwZXJzL2hldXJpc3RpYy9oZXVyaXN0aWNfZXZhbHVhdGlvbi5odG1s\">&quot;How to Conduct a Heuristic Evaluation&quot;</span><br />\n 如何进行启发式评估\n<ul>\n<li>Each evaluator inspects interface separately<br />\n 每个评估员分别检查界面</li>\n<li>OK for designer to answer evaluator's questions<br />\n 可以让设计师回答评估者的问题</li>\n<li>Go through interface several times using heuristics<br />\n 使用启发式方法多次浏览界面</li>\n<li>Can supply evaluators with scenarios of user tasks<br />\n 可以为评估人员提供用户任务方案</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"guidelines-guide-design-准则指导设计\"><a class=\"anchor\" href=\"#guidelines-guide-design-准则指导设计\">#</a> Guidelines guide design 准则指导设计</h2>\n<ul>\n<li>Knowing these guidelines should improve your designs<br />\n 了解这些准则，可以改善你的设计</li>\n<li>Take them into account to avoid violating them<br />\n 考虑到这些，避免再次违规</li>\n<li>Also, all the other guidelines<br />\n 此外，所有其他准则\n<ul>\n<li>Guidelines for mobile, international, web etc.<br />\n 移动，国际，网络等准则</li>\n</ul>\n</li>\n<li>Neilsen evaluated 60 old guidelines (in 2005) and found 90% still valid after 20 years<br />\n2005 年 Neilsen 评估了 60 条旧指南，发现 90％在 20 年后仍然有效\n<ul>\n<li>Others no longer relevant, only 2 were &quot;wrong&quot;</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy51c2VpdC5jb20vYWxlcnRib3gvMjAwNTAxMTcuaHRtbA==\">http://www.useit.com/alertbox/20050117.html</span></li>\n<li>Similarly with web guidelines: <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5ubmdyb3VwLmNvbS9hcnRpY2xlcy91c2FiaWxpdHktZ3VpZGVsaW5lcy1jaGFuZ2Uv\">http://www.nngroup.com/articles/usability-guidelines-change/</span></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"10-basic-principles-尼尔森十大可用性原则\"><a class=\"anchor\" href=\"#10-basic-principles-尼尔森十大可用性原则\">#</a> 10 Basic Principles 尼尔森十大可用性原则</h1>\n<p>From Nielsen's web page: <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy51c2VpdC5jb20vcGFwZXJzL2hldXJpc3RpYy9oZXVyaXN0aWNfbGlzdC5odG1s\">http://www.useit.com/papers/heuristic/heuristic_list.html</span></p>\n<ol>\n<li>Visibility of system status<br />\n 系统状态的可见性</li>\n<li>Match between system and the real world<br />\n 系统与现实世界之间的匹配，环境贴切原则</li>\n<li>User control and freedom<br />\n 用户的控制性和自由度</li>\n<li>Consistency and standards<br />\n 一致性和标准化</li>\n<li>Error prevention<br />\n 错误预防</li>\n<li>Recognition rather than recall<br />\n 识别，而不是记忆</li>\n<li>Flexibility and efficiency of use<br />\n 灵活性和使用效率</li>\n<li>Aesthetic and minimalist design<br />\n 美观和简约的设计</li>\n<li>Help users recognize, diagnose, and recover from errors<br />\n 帮助用户识别，诊断错误，并从错误中恢复</li>\n<li>Help and Documentation<br />\n 帮助和文档</li>\n</ol>\n<h2 id=\"1️⃣-visibility-of-system-status\"><a class=\"anchor\" href=\"#1️⃣-visibility-of-system-status\">#</a> 1️⃣ Visibility of System Status</h2>\n<p>系统状态的可见性</p>\n<ul>\n<li>Keep users informed about what is going on<br />\n 让用户知道发生了什么事</li>\n<li>What page they are on and what part of a process<br />\n 他们在什么页面上以及过程的哪个部分</li>\n<li>Provide appropriate feedback<br />\n 提供适当的反馈\n<ul>\n<li>About what system is doing, and how input is being interpreted<br />\n 关于系统在做什么，以及输入如何被解析</li>\n<li>E.g. in XXX product, 例如 在 XXX 产品中，\n<ul>\n<li>&quot;really ungroup?&quot; “真的要取消分组？”</li>\n<li>loses associated behavior 失去相关行为</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p class=\"gallery\"><img data-src=\"https://i.loli.net/2020/10/06/VWlRmYXdfoB6yJQ.jpg\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/10/06/VnIYxb72u3s8hRH.jpg\" alt=\"\" /></p>\n<h2 id=\"2️⃣-match-between-system-and-the-real-world\"><a class=\"anchor\" href=\"#2️⃣-match-between-system-and-the-real-world\">#</a> 2️⃣ Match between System And the Real World</h2>\n<p>系统与现实世界之间的匹配，环境贴切原则</p>\n<ul>\n<li>Terminology in user's language<br />\n 术语基于用户语言\n<ul>\n<li>Not computer terminology<br />\n 不是计算机术语</li>\n</ul>\n</li>\n<li>Language from user's perspective<br />\n 用户角度的语言\n<ul>\n<li>&quot;You have bought…&quot; not &quot;We have sold you…&quot;<br />\n“您买了……” 而不是 “我们卖给了您……”</li>\n</ul>\n</li>\n<li>Use common words,not &quot;techno-jargon&quot;<br />\n 使用常用字词，不要使用 “技术术语”</li>\n<li>Error messages and feedback refer to user objects<br />\n 错误消息和反馈涉及用户对象</li>\n<li>Allow full-length names<br />\n 允许使用全名</li>\n<li>E.g. &quot;Hit any key to continue&quot;<br />\n 例如 “按任意键继续”</li>\n</ul>\n<p class=\"gallery\"><img data-src=\"https://i.loli.net/2020/10/06/b6LPTUZYamQzSj5.jpg\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/10/06/m5uMzrYilP9xSpZ.jpg\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/10/06/svqjH1fyzhDXlnI.jpg\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/10/06/UNbwLDa1rQIm9Ys.jpg\" alt=\"\" /></p>\n<h2 id=\"3️⃣-user-control-and-freedom\"><a class=\"anchor\" href=\"#3️⃣-user-control-and-freedom\">#</a> 3️⃣ User Control and Freedom</h2>\n<p>用户的控制性和自由度</p>\n<ul>\n<li>Easy to abort: Cancel buttons<br />\n 容易中止：取消按钮\n<ul>\n<li>Cancel order, cancel changing a profile<br />\n 取消订单，取消更改个人资料</li>\n</ul>\n</li>\n<li>Easy to Undo<br />\n 容易撤消\n<ul>\n<li>Web issue: what does &quot;Back&quot; button do?<br />\n 网络问题：“返回” 按钮有什么作用？\n<ul>\n<li>Example: many sites can get confused if use back button<br />\n 示例：如果使用 “后退” 按钮，许多网站可能会感到困惑</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Users (even experts) will make errors<br />\n 用户（甚至专家）都会出错</li>\n<li>E.g. in XXX product,<br />\n 例如 在 XXX 产品中，\n<ul>\n<li>no way to get out of editing a text field<br />\n 没有退出编辑文本字段的方法</li>\n</ul>\n</li>\n</ul>\n<p class=\"gallery\"><img data-src=\"https://i.loli.net/2020/10/06/oWrqBGlsVAH4Y8S.jpg\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/10/06/QBlsz6GVimH8u9R.jpg\" alt=\"\" /></p>\n<h2 id=\"4️⃣-consistency-and-standards\"><a class=\"anchor\" href=\"#4️⃣-consistency-and-standards\">#</a> 4️⃣ Consistency and Standards</h2>\n<p>一致性和标准化</p>\n<ul>\n<li>Same command always have the same effect<br />\n 相同的命令始终具有相同的效果</li>\n<li>Locations for information, names of commands<br />\n 信息位置，命令名称</li>\n<li>Give the user a mental model of the system<br />\n 为用户提供系统的心理模型</li>\n<li>Size, location, color, wording, function, sequencing, etc.<br />\n 大小，位置，颜色，措辞，功能，排序等。\n<ul>\n<li>E.g., color purple?<br />\n 例如，紫色？</li>\n</ul>\n</li>\n<li>Following standards helps<br />\n 遵循标准有助于\n<ul>\n<li>Web: use templates or CSS, style guides<br />\n 网络：使用模板或 CSS，样式指南</li>\n</ul>\n</li>\n<li>Seems easy, but often not followed; e.g. in XXX<br />\n 似乎很容易，但常常没有遵循； 例如 在 XXX 中\n<ul>\n<li>naming &quot;F#1.C#1&quot; vs. &quot;F#1&quot;, &quot;C#1&quot;<br />\n 命名方式：“F＃1.C＃1” VS.“F＃1”，“C＃1”</li>\n<li>consistent with industry standards: e.g., Copy<br />\n 符合行业标准：例如，复制</li>\n</ul>\n</li>\n</ul>\n<p class=\"gallery\"><img data-src=\"https://i.loli.net/2020/10/06/lqkg3NSvbOPZ2a8.png\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/10/06/iXm2OQbkC4AVZxo.jpg\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/10/06/3MlS1d9FOPYsiNE.jpg\" alt=\"\" /></p>\n<h2 id=\"5️⃣-error-prevention\"><a class=\"anchor\" href=\"#5️⃣-error-prevention\">#</a> 5️⃣ Error Prevention</h2>\n<p>错误预防</p>\n<ul>\n<li>Selection rather than entry<br />\n 选择而不是输入\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5FeHBlZGlhLmNvbQ==\">www.Expedia.com</span>: question, when ambiguous city (e.g. Columbus)<br />\n 问题，当城市模棱两可时（例如哥伦布）</li>\n</ul>\n</li>\n<li>Remove or gray-out illegal choices<br />\n 删除或灰化非法选择\n<ul>\n<li>Not common for web pages<br />\n 网页不常见</li>\n</ul>\n</li>\n<li>Auto-fill in<br />\n 自动填写</li>\n<li>Confirmation<br />\n 确认</li>\n<li>Avoid modes<br />\n 避免模式\n<ul>\n<li>Definition: same user action has different results<br />\n 定义：同一用户操作具有不同结果</li>\n<li>Make unavoidable modes visible like ^F for Outlook<br />\n 使不可避免的模式，如 Outlook 的 Ctrl+F</li>\n<li>E.g. Typing &quot;daytime&quot; to a mail program<br />\n 例如 在邮件程序上键入 “白天”</li>\n</ul>\n</li>\n</ul>\n<p class=\"gallery\"><img data-src=\"https://i.loli.net/2020/10/07/mNP3tz7W6ylMah9.jpg\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/10/07/RDnpGSVrcbvkiEA.jpg\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/10/07/JKQGoqtaYSlCyen.jpg\" alt=\"\" /></p>\n<h2 id=\"6️⃣-recognition-rather-than-recall\"><a class=\"anchor\" href=\"#6️⃣-recognition-rather-than-recall\">#</a> 6️⃣ Recognition rather than Recall</h2>\n<p>识别，而不是记忆</p>\n<ul>\n<li>Make objects, actions, options visible<br />\n 使对象、动作、选项可见</li>\n<li>See and pick it, not generate it<br />\n 查看并选择它，而不生成它</li>\n<li>Short-term memory = 7 ±2 items; 30 sec to 2 min<br />\n 短期记忆 = 7±2 个项目； 30 秒至 2 分钟。超过 7 个会遗忘\n<ul>\n<li>unless interrupted<br />\n 除非被打断</li>\n</ul>\n</li>\n<li>Menus rather than type-in (but short enough)<br />\n 菜单而非键入（但足够简短）</li>\n<li>Auto-fill in helps here too<br />\n 自动填写也有帮助</li>\n<li>Prompts provide format and limits<br />\n 提示支持的格式和限制</li>\n<li>Don't require retyping of remembered information<br />\n 不需要重新输入记住的信息</li>\n<li>Pervasive, generic rules (cut/paste)<br />\n 普遍的通用规则（剪切 / 粘贴）</li>\n<li>E.g. in Aegis, remembering altitude<br />\n 例如 在宙斯盾，海拔高度</li>\n</ul>\n<p class=\"gallery\"><img data-src=\"https://i.loli.net/2020/10/12/Jcg2V5HPatYNFvb.jpg\" alt=\"\" title=\"IDE的提示功能\" /><br />\n<img data-src=\"https://i.loli.net/2020/10/12/cMxRVSnh76riINB.jpg\" alt=\"\" title=\"直接预览字体样式，而不是只显示字体名称\" /><br />\n<img data-src=\"https://i.loli.net/2020/10/12/4H5OBZYp8hufaPb.jpg\" alt=\"\" title=\"What is a DTIC user code and how to get one?什么是DTIC用户代码以及如何获取代码？\" /><br />\n<img data-src=\"https://i.loli.net/2020/10/12/GxdXVhbwctKWquO.jpg\" alt=\"\" title=\"打印设置，打印第几页\" /></p>\n<h2 id=\"7️⃣-flexibility-and-efficiency-of-use\"><a class=\"anchor\" href=\"#7️⃣-flexibility-and-efficiency-of-use\">#</a> 7️⃣ Flexibility and Efficiency of use</h2>\n<p>灵活性和使用效率</p>\n<ul>\n<li>Provide Shortcuts<br />\n 提供捷径</li>\n<li>For experienced users<br />\n 针对经验丰富的用户\n<ul>\n<li>E.g., Command keys<br />\n 例如，命令键</li>\n</ul>\n</li>\n<li>Jump directly to desired location<br />\n 直接跳到所需位置</li>\n<li>Reuse previously entered information<br />\n 重复使用以前输入的信息</li>\n<li>Good default values<br />\n 良好的默认值</li>\n</ul>\n<p class=\"gallery\"><img data-src=\"https://i.loli.net/2020/10/12/NcUpjoqyBfGWExa.jpg\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/10/12/kHYfp5ArSseWgG4.jpg\" alt=\"\" /></p>\n<h2 id=\"8️⃣-aesthetic-and-minimalist-design\"><a class=\"anchor\" href=\"#8️⃣-aesthetic-and-minimalist-design\">#</a> 8️⃣ Aesthetic and Minimalist Design</h2>\n<p>美观和简约的设计</p>\n<ul>\n<li>Good Graphic Design and Color Choice<br />\n 良好的图形设计和色彩选择\n<ul>\n<li>Appropriately direct attention<br />\n 适当的直接关注</li>\n<li>Group related objects (alignment, decorations)<br />\n 分组相关对象（对齐，装饰）</li>\n<li>Balance and white space<br />\n 平衡和空白</li>\n<li>Maintain display inertia<br />\n 保持显示惯性</li>\n<li>Few fonts and colors (5 to 7 colors)<br />\n 几种字体和颜色（5 至 7 种颜色）\n<ul>\n<li>Appropriate contrast<br />\n 适当的对比</li>\n<li>Some people are color blind (8% of males)<br />\n 有些人色盲（男性的 8％）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p class=\"gallery\"><img data-src=\"https://i.loli.net/2020/10/12/j2QBhXCZyouSH48.jpg\" alt=\"\" title=\"好例子\" /><br />\n<img data-src=\"https://i.loli.net/2020/10/12/2v8erGYsFkL3jMN.jpg\" alt=\"\" title=\"坏例子-错误的对比度\" /><br />\n<img data-src=\"https://i.loli.net/2020/10/12/RhLs1pkenBlKQcj.jpg\" alt=\"\" title=\"坏例子-视觉上的混乱\" /></p>\n<h2 id=\"9️⃣-help-users-recover-from-errors\"><a class=\"anchor\" href=\"#9️⃣-help-users-recover-from-errors\">#</a> 9️⃣ Help Users Recover from Errors</h2>\n<p>帮助用户从错误中恢复</p>\n<ul>\n<li>Help users when they are in trouble<br />\n 遇到麻烦时帮助用户</li>\n<li>Opportunities for users to learn about the system<br />\n 用户学习系统的机会</li>\n<li>Clear language; no codes<br />\n 语言清晰； 不要错误代码</li>\n<li>Be precise; Not &quot;syntax error&quot;<br />\n 要精确； 不是 “语法错误”</li>\n<li>Constructively help the user solve the problem<br />\n 建设性地帮助用户解决问题\n<ul>\n<li>Tell why the error happened and how to fix it<br />\n 指出错误发生的原因以及解决方法</li>\n</ul>\n</li>\n<li>Be polite and not accusing; positive wording:<br />\n 有礼貌，不要指责； 正面措辞：\n<ul>\n<li>Not: &quot;FATAL ERROR&quot;, etc.</li>\n<li>而不是：“致命错误” 等。</li>\n</ul>\n</li>\n</ul>\n<p class=\"gallery\"><img data-src=\"https://i.loli.net/2020/10/12/xAqB79oCnjG8WhF.jpg\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/10/12/zur6HX5ZGUDo2WV.jpg\" alt=\"\" /></p>\n<h3 id=\"error-messages-错误信息\"><a class=\"anchor\" href=\"#error-messages-错误信息\">#</a> Error Messages 错误信息</h3>\n<ul>\n<li>Blame the system, not the user<br />\n 要责怪系统，而不是用户\n<ul>\n<li>&quot;Unrecognized&quot; vs. &quot;illegal&quot; command<br />\n “无法识别” 与 “非法” 命令</li>\n</ul>\n</li>\n<li>No humor or snide comments<br />\n 不要幽默的评论</li>\n<li>Easy error recovery<br />\n 能轻松恢复</li>\n<li>Can have multiple levels of messages<br />\n 可以有多个级别的消息\n<ul>\n<li>E.g. in XXX product, &quot;can't save file&quot; —why not?<br />\n 例如 在 XXX 产品中，“无法保存文件”- 为什么不呢？</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"bad-error-messages\"><a class=\"anchor\" href=\"#bad-error-messages\">#</a> Bad Error Messages</h3>\n<p class=\"gallery\"><img data-src=\"https://i.loli.net/2020/10/12/QymwRck7PsF3g41.jpg\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/10/12/gH6ZJxwLG24c5nX.jpg\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/10/12/fmBekVIXURjsarW.jpg\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/10/12/4s5fS8ltEh3uMIv.jpg\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/10/12/9sG2nZ41MJBagAY.jpg\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/10/12/PUlor8gj72MqCD3.jpg\" alt=\"\" /></p>\n<h3 id=\"pretty-good-example\"><a class=\"anchor\" href=\"#pretty-good-example\">#</a> Pretty good Example</h3>\n<p><img data-src=\"https://i.loli.net/2020/10/12/W8HYgisOtmMXP1l.jpg\" alt=\"\" /></p>\n<h2 id=\"help-and-documentation\"><a class=\"anchor\" href=\"#help-and-documentation\">#</a> 🔟 Help and Documentation</h2>\n<ul>\n<li>\n<p>True walk up and use?<br />\n 真正的运行和使用？</p>\n</li>\n<li>\n<p>Most people will not read documentation<br />\n 大多数人不会阅读文档</p>\n<ul>\n<li>If do, then<br />\n 如果这样做，那么\n<ul>\n<li>First time product is used, or else<br />\n 首次使用产品，否则</li>\n<li>In a panic, so need information right away<br />\n 出现紧急情况，因此需要立即提供信息</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Iterative design of documentation needed<br />\n 所需文档的迭代设计</p>\n<ul>\n<li>SuperBook application answer found in 4.3 minutes, compared to 7.6 minutes before fixing<br />\n 在 4.3 分钟内找到 SuperBook 应用程序答案，而修复前为 7.6 分钟</li>\n</ul>\n</li>\n<li>\n<p>Help system is an extra feature to learn<br />\n 帮助系统是需要学习的额外功能</p>\n</li>\n<li>\n<p>&quot;Help doesn't help&quot;<br />\n“帮助无济于事”</p>\n<ul>\n<li>If need to add help, maybe fix the feature?<br />\n 如果需要添加帮助，也许可以修复该功能？</li>\n<li>Use documentation writers to help refine the system<br />\n 使用文档编写者来帮助完善系统</li>\n</ul>\n</li>\n<li>\n<p>Good quality writing<br />\n 高质量的写作</p>\n</li>\n</ul>\n<p class=\"gallery\"><img data-src=\"https://i.loli.net/2020/10/12/OvGJ5qEf2pgh9oB.jpg\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/10/12/nHo2LZGkRr1NyKq.jpg\" alt=\"\" /></p>\n<h2 id=\"example\"><a class=\"anchor\" href=\"#example\">#</a> Example</h2>\n<p><img data-src=\"https://i.loli.net/2020/10/12/xHfgdtyn4aJwEKM.jpg\" alt=\"\" /></p>\n<ol>\n<li>Shopping cart icon is not balanced with its background whitespace (graphic design)</li>\n<li>Good: user is greeted by name (feedback)</li>\n<li>Red is used both for help messages and for error messages (consistency, match real world)</li>\n<li>&quot;There is a problem with your order&quot;, but no explanation or suggestions for resolution (error reporting)</li>\n<li>ExtPriceand UnitPriceare strange labels (match real world)</li>\n<li>Remove Hardware button inconsistent with Remove checkbox (consistency)</li>\n<li>&quot;Click here&quot; is unnecessary (simplicity)</li>\n<li>No &quot;Continue shopping&quot; button (user control &amp; freedom)</li>\n<li>Recalculate is very close to Clear Cart (error prevention)</li>\n<li>&quot;Check Out&quot; button doesn’t look like other buttons (consistency, both internal &amp; external)</li>\n<li>Uses &quot;Cart Title&quot; and &quot;Cart Name&quot; for the same concept (consistency)</li>\n<li>Must recall and type in cart title to load (recognition not recall, error prevention, efficiency)</li>\n</ol>\n<h1 id=\"hints-for-better-he\"><a class=\"anchor\" href=\"#hints-for-better-he\">#</a> Hints for better HE</h1>\n<ul>\n<li>Use multiple evaluators<br />\n 使用多个评估者\n<ul>\n<li>Different evaluators find different problems<br />\n 不同的评估者发现不同的问题</li>\n<li>The more the better but diminishing returns<br />\n 越多越好，但递减</li>\n<li>Neilsen recommends 3-5<br />\n 尼尔森建议 3-5</li>\n</ul>\n</li>\n<li>Alternate HE with UT<br />\n 用 UT 替代 HE\n<ul>\n<li>Each method finds different problems<br />\n 每种方法都会发现不同的问题</li>\n<li>HE is cheaper<br />\nHE 便宜</li>\n</ul>\n</li>\n<li>Its OK for observer to help evaluator<br />\n 可以让观察者帮助评估者\n<ul>\n<li>As long as the problem has already been noted<br />\n 只要问题已经指出</li>\n<li>This would not be OK in a UT<br />\n 在 UT 中这不行</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"suggested-report-format-what-to-include\"><a class=\"anchor\" href=\"#suggested-report-format-what-to-include\">#</a> Suggested Report Format What to include</h2>\n<p>建议的报告格式</p>\n<p>What to include</p>\n<ul>\n<li>Problem 问题</li>\n<li>Heuristics 启发式</li>\n<li>Description 说明</li>\n<li>Severity 严重程度</li>\n<li>Recommendation (if any) 推荐（如果有）</li>\n<li>Screen Shots 屏幕截图</li>\n</ul>\n<p><img data-src=\"https://i.loli.net/2020/10/12/cYqSXwxJV867oyp.jpg\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/10/12/Doh9mZcHb7dkNwu.jpg\" alt=\"\" /></p>\n","tags":["计算机科学","Master of Software Engineering","ITMD 534. Human Computer Interaction","人机交互"]},{"id":"https://shoka.lostyu.me/computer-science/mse/itmd-510/week-6/","url":"https://shoka.lostyu.me/computer-science/mse/itmd-510/week-6/","title":"Week 6. Exception Handling","date_published":"2020-10-01T10:43:35.000Z","content_html":"<h1 id=\"notes\"><a class=\"anchor\" href=\"#notes\">#</a> Notes</h1>\n<p>An exception handler is a section of code that <ins>gracefully</ins> responds to exceptions.<br />\n 异常处理程序是一段可以优雅地响应异常的代码。</p>\n<h2 id=\"types-of-exceptions\"><a class=\"anchor\" href=\"#types-of-exceptions\">#</a> Types of Exceptions</h2>\n<ol>\n<li>\n<p>Checked Exceptions 已检查的异常</p>\n<p>The exceptions which are checked by the compiler for smooth execution of program at runtime are called checked Exceptions.<br />\n 由编译器检查，为了运行时能顺利执行程序。</p>\n<p>Example:  <code>InterruptedException</code> ,  <code>FileNotFoundException</code></p>\n</li>\n<li>\n<p>Unchecked Exceptions 未经检查的异常</p>\n<p>The exceptions (Runtime/Error) which are not checked by the compiler are called unchecked exceptions.<br />\n 编译器未检查的异常（运行 / 错误）</p>\n<p>Example:   <code>ArithmeticException</code> ,  <code>NullPointerException</code> , etc.</p>\n</li>\n<li>\n<p>Fully checked Vs. Partially Checked Exceptions:<br />\n 全面检查 VS. 部分检查的异常</p>\n<p>Checked Exception is said be fully checked if and only if, its entire child classes also checked, otherwise that checked exception is called partially checked exception.<br />\n 仅当也检查了它的整个子类时，才说检查异常是完全检查的，否则将检查异常称为部分检查异常。</p>\n</li>\n</ol>\n<p>Example:</p>\n<table>\n<tbody>\n<tr>\n<td>Exception</td>\n<td>Partially checked</td>\n</tr>\n<tr>\n<td>IOException</td>\n<td>Fully checked</td>\n</tr>\n<tr>\n<td>ArithmeticException</td>\n<td>Unchecked Exception.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"handling-exceptions\"><a class=\"anchor\" href=\"#handling-exceptions\">#</a> Handling Exceptions</h2>\n<p>To handle an potential exception, you use a  <code>try</code>  statement.</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token keyword\">try</span> block statements<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ExceptionType</span> <span class=\"token class-name\">ParameterName</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token keyword\">catch</span> block statements<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"the-finally-clause\"><a class=\"anchor\" href=\"#the-finally-clause\">#</a> The  <code>finally</code>  Clause</h3>\n<p>The  <code>try</code>  statement may have an optional  <code>finally</code>  clause.<br />\nIf present, the  <code>finally</code>  clause must appear after all of the  <code>catch</code>  clauses.<br />\n 如果存在，则 <code>finally</code>  子句必须出现在所有 <code>catch</code>  子句之后。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">try</span> block statements<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ExceptionType</span> <span class=\"token class-name\">ParameterName</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">catch</span> block statements<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">finally</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">finally</span> block statements<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"creating-exception-classes\"><a class=\"anchor\" href=\"#creating-exception-classes\">#</a> Creating Exception Classes</h2>\n<p>Some examples of exceptions that can <ins>affect</ins> a bank account:<br />\n 可能影响银行帐户的一些例外示例：</p>\n<ul>\n<li>A negative starting balance is passed to the constructor.<br />\n 传递给构造函数的负的初始余额</li>\n<li>A negative interest rate is passed to the constructor.<br />\n 传递给构造函数的负利率</li>\n<li>A negative number is passed to the deposit method.<br />\n 传递给存款方法的负数</li>\n<li>A negative number is passed to the withdraw method.<br />\n 传递给提现方法的负数</li>\n<li>The amount passed to the withdraw method exceeds the account's balance.<br />\n 传递到提现方法的金额超过了帐户的余额。</li>\n</ul>\n<p>We can create exceptions that represent each of these error conditions.<br />\n 我们可以创建代表每种错误情况的异常。</p>\n<p>Hierarchy chart of Exceptions follows...<br />\n 异常的层次结构图如下...</p>\n<p><img data-src=\"https://i.loli.net/2020/10/22/ApMUTlRLPytqYhD.png\" alt=\"\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>BankAccount.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   The BankAccount class simulates a bank account.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BankAccount</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> balance<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Account balance</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      This constructor sets the starting balance at 0.0.</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token class-name\">BankAccount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      balance <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      This constructor sets the starting balance to the value passed as an argument.</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      @param startBalance The starting balance.</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      @exception NegativeStartingBalance When startBalance is negative.</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token class-name\">BankAccount</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> startBalance<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">NegativeStartingBalance</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>startBalance <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>         <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NegativeStartingBalance</span><span class=\"token punctuation\">(</span>startBalance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>         </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      balance <span class=\"token operator\">=</span> startBalance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      This constructor sets the starting balance to the value in the String argument.</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      @param str The starting balance, as a String.</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token class-name\">BankAccount</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      balance <span class=\"token operator\">=</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseDouble</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      The deposit method makes a deposit into the account.</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      @param amount The amount to add to the</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      balance field.</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deposit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> amount<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      balance <span class=\"token operator\">+=</span> amount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      The deposit method makes a deposit into the account.</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>      @param str The amount to add to the</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      balance field, as a String.</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deposit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        balance <span class=\"token operator\">+=</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseDouble</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>      The withdraw method withdraws an amount from the account.</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>      @param amount The amount to subtract from the balance field.</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> amount<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>      balance <span class=\"token operator\">-=</span> amount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>      The withdraw method withdraws an amount from the account.</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>      @param str The amount to subtract from the balance field, as a String.</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>      balance <span class=\"token operator\">-=</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseDouble</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>      The setBalance method sets the account balance.</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>      @param b The value to store in the balance field.</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setBalance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>      balance <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>      The setBalance method sets the account balance.</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>      @param str The value, as a String, to store in the balance field.</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setBalance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>      balance <span class=\"token operator\">=</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseDouble</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"94\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>      The getBalance method returns the account balance.</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>      @return The value in the balance field.</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>      <span class=\"token keyword\">return</span> balance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Exceptions.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">File</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileNotFoundException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Exceptions</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"resource\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">FileReader</span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token class-name\">BufferedReader</span> br<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>             br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data1.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token class-name\">String</span> line<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>ct<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>line <span class=\"token operator\">=</span> br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                i <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Div result for record = \"</span> <span class=\"token operator\">+</span> ct <span class=\"token operator\">+</span> <span class=\"token string\">\" -> \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token operator\">/</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                ct<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>  <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ArithmeticException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid operation: \"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>  <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">FileNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>               <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"File exception: \"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>  <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>              e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>             <span class=\"token comment\">//System.out.println(\"File exception: \" + e.getMessage());</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>          <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>reader <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                    reader<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    <span class=\"token comment\">//do something with the exception</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--- File End ---\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>    </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>    </pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   NegativeStartingBalance exceptions are thrown by the</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   BankAccount class when a negative starting balance is</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   passed to the constructor.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NegativeStartingBalance</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                   <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Exception</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      This constructor uses a generic</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      error message.</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token class-name\">NegativeStartingBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error: Negative starting balance\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      This constructor specifies the bad starting</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      balance in the error message.</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      @param The bad starting balance.</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token class-name\">NegativeStartingBalance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> amount<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error: Negative starting balance: \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>AccountTest.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AccountTest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token comment\">// Force a NegativeStartingBalance exception.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         <span class=\"token class-name\">BankAccount</span> account <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                     <span class=\"token keyword\">new</span> <span class=\"token class-name\">BankAccount</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">100.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NegativeStartingBalance</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>AIOBSampleHandled.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AIOBSampleHandled</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> myArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">897</span><span class=\"token punctuation\">,</span> <span class=\"token number\">56</span><span class=\"token punctuation\">,</span> <span class=\"token number\">78</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">75</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Elements in the array are:: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>myArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token class-name\">Scanner</span> sc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter the index of the required element :: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">int</span> element <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Element in the given index is :: \"</span> <span class=\"token operator\">+</span> myArray<span class=\"token punctuation\">[</span>element<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayIndexOutOfBoundsException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The index you have entered is invalid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please enter an index number between 0 and 6\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>","tags":["计算机科学","Master of Software Engineering","ITMD 510. Object-Oriented App Develop","Java"]},{"id":"https://shoka.lostyu.me/computer-science/mse/itmd-510/week-5/","url":"https://shoka.lostyu.me/computer-science/mse/itmd-510/week-5/","title":"Week 5. Abstraction vs. Interfaces, Inheritance and Polymorphism","date_published":"2020-09-24T08:52:15.000Z","content_html":"<h1 id=\"notes\"><a class=\"anchor\" href=\"#notes\">#</a> Notes</h1>\n<p>The Four CornerStones of OOP!<br />\nOOP 的四个基石！</p>\n<ul>\n<li>Abstraction (vs. Interfaces)<br />\n 抽象（与接口）</li>\n<li>Polymorphism (many shapes and forms)<br />\n 多态性（许多形状和形式）</li>\n<li>Inheritance (Type/subtype)<br />\n 继承（类型 / 子类型）</li>\n<li>Encapsulation (data hiding)<br />\n 封装（数据隐藏）</li>\n</ul>\n<h2 id=\"abstraction-抽象\"><a class=\"anchor\" href=\"#abstraction-抽象\">#</a> Abstraction 抽象</h2>\n<p>A class that is declared using  <code>abstract</code>  keyword is known as abstract class.<br />\n 使用 <code>abstract</code>  关键字声明的类称为抽象类。</p>\n<p>It can have abstract methods (methods without body) as well as concrete methods (regular methods with body).<br />\n 它可以有抽象方法（没有主体的方法）以及具体方法（有主体的常规方法）。</p>\n<h3 id=\"rules\"><a class=\"anchor\" href=\"#rules\">#</a> Rules</h3>\n<p>An abstract class can not be instantiated, which means you are not allowed to create an object of it.<br />\n 抽象类无法实例化，这意味着不允许您创建抽象类的对象。</p>\n<p>A class derived from the abstract class must implement all those methods that are declared as abstract in the parent class.<br />\n 从抽象类派生的类必须实现在父类中声明为抽象的所有那些方法。</p>\n<h3 id=\"why-use-an-abstract-class\"><a class=\"anchor\" href=\"#why-use-an-abstract-class\">#</a> Why use an abstract class?</h3>\n<p>Consider class  <code>Animal</code> .<br />\nIt may have a method  <code>makeSound()</code>  and subclasses of it like  <code>Dog</code> ,  <code>Cat</code> ,  <code>Lion</code> , etc.<br />\nSince the animal sounds differ from one animal to another, there is no point to implement this method in parent class.<br />\nThis is because every child class must override this method to give its own implementation details.<br />\nEx.  <code>Dog</code>  class will say will say  <code>Woof</code>  and  <code>Cat</code>  class will say  <code>Meow</code> .</p>\n<p>So when we know that all the animal child classes will and should override this method, then there is no point to implement this method in parent class.<br />\n 因此，当我们知道所有动物子类都将并且应该重写此方法时，则没有必要在父类中实现此方法。</p>\n<p>Thus, making this method  <code>abstract</code>  would be the good choice as by making this method abstract we force all the sub classes to implement this method ( otherwise you will get compilation error).<br />\n 因此，使此方法为 “抽象” 将是一个不错的选择，因为通过使该方法成为抽象，我们将强制所有子类实现该方法（否则，您将获得编译错误）。</p>\n<p>Also we need not to give any implementation to this method in parent class.<br />\n 同样，我们不需要在父类中对该方法进行任何实现。</p>\n<p><img data-src=\"https://i.loli.net/2020/10/22/yqe8goBv9JwiFRO.png\" alt=\"\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Code sample</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//abstract (parent) class</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">//abstract method</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">makeSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//Dog class (extends) Animal class</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">makeSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Woof\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token class-name\">Animal</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tobj<span class=\"token punctuation\">.</span><span class=\"token function\">makeSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"interfaces-接口\"><a class=\"anchor\" href=\"#interfaces-接口\">#</a> Interfaces 接口</h2>\n<p>Interface looks like a class but it is not a class.<br />\n 接口看起来像一个类，但不是一个类。</p>\n<p>An interface can have methods and variables.<br />\n 接口可以具有方法和变量。</p>\n<p>Methods declared in interface are by default abstract (only method signature, no body).<br />\n 在接口中声明的方法，默认情况下是抽象的（仅方法签名，没有主体）。</p>\n<p>The variables declared in an interface are  <code>public</code> ,  <code>static</code>  &amp;  <code>final</code>  by default.<br />\n 默认情况下，在接口中声明的变量是 <code>public</code> ， <code>static</code>  和 <code>final</code> 。</p>\n<p>Syntax: Interfaces are declared by specifying a keyword  <code>interface</code> .<br />\n 句法：通过指定关键字 <code>interface</code>  来声明接口。</p>\n<h3 id=\"code-sample\"><a class=\"anchor\" href=\"#code-sample\">#</a> Code sample</h3>\n<p>Movable Interface &amp; Implementations<br />\n 移动接口和实现</p>\n<p>Suppose an application involves many objects that can move.<br />\n 假设一个应用程序涉及许多可以移动的对象。</p>\n<p>We could define an interface called  <code>movable</code> , containing the signatures of the various movement methods.<br />\n 我们可以定义一个称为 <code>movable</code>  的接口，其中包含各种移动方法的签名。</p>\n<p><img data-src=\"https://i.loli.net/2020/10/22/x5kU9GTVY3JSe6X.png\" alt=\"\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* The Movable interface defines a list of public abstract methods to be implemented by its subclasses */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// use keyword \"interface\" (instead of \"class\") to define an interface</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Movable</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">// An interface defines a list of public abstract methods to be implemented by the subclasses</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">moveUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"public\" and \"abstract\" optional</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">moveDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">moveLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">moveRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// The subclass MovablePoint needs to implement all the abstract methods defined in the interface Movable</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MovablePoint</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Movable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">// Private member variables</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// (x, y) coordinates of the point</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">// Constructor</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">MovablePoint</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"(\"</span> <span class=\"token operator\">+</span> x <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">+</span> y <span class=\"token operator\">+</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token comment\">// Need to implement all the abstract methods defined in the interface Movable</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">moveUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\ty<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">moveDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\ty<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">moveLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\tx<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">moveRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\tx<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestMovable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token class-name\">MovablePoint</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MovablePoint</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// upcast</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\tp1<span class=\"token punctuation\">.</span><span class=\"token function\">moveDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\tp1<span class=\"token punctuation\">.</span><span class=\"token function\">moveRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token comment\">// Test Polymorphism</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t<span class=\"token class-name\">Movable</span> p2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MovablePoint</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// upcast</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\tp2<span class=\"token punctuation\">.</span><span class=\"token function\">moveUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t<span class=\"token class-name\">MovablePoint</span> p3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MovablePoint</span><span class=\"token punctuation\">)</span>p2<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// downcast</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"upcasting-downcasting\"><a class=\"anchor\" href=\"#upcasting-downcasting\">#</a> Upcasting &amp; Downcasting</h3>\n<p><img data-src=\"https://i.loli.net/2020/10/22/xnaFWzyXLTsmNIk.png\" alt=\"\" /></p>\n<h3 id=\"which-should-you-use-abstract-classes-or-interfaces\"><a class=\"anchor\" href=\"#which-should-you-use-abstract-classes-or-interfaces\">#</a> Which should you use, abstract classes or interfaces?</h3>\n<ul>\n<li>\n<p>Consider using abstract classes if any of these statements apply to your situation:<br />\n 如果以下任何一种情况适用于您的情况，请考虑使用抽象类：</p>\n<ul>\n<li><span class=\"red\">You want to share code among several closely related classes.</span><br />\n 想在几个紧密相关的类之间共享代码。</li>\n<li>You expect that classes that extend your abstract class have many common methods or fields, or require access modifiers other than  <code>public</code>  (such as  <code>protected</code>  and  <code>private</code> ).<br />\n 希望扩展抽象类的类具有许多公共方法或字段，或者需要除 <code>public</code>  之外的访问修饰符（例如 <code>protected</code>  和 <code>private</code> ）。</li>\n<li>You want to declare <ins>non-static</ins> or non-final fields. This enables you to define methods that can access and modify the state of the object to which they belong.<br />\n 想要声明非 <code>static</code>  或非 <code>final</code>  字段。<br />\n这样定义的方法，可以访问和修改所属对象的状态。</li>\n</ul>\n</li>\n<li>\n<p>Consider using interfaces if any of these statements apply to your situation:<br />\n 如果以下任何一种情况适用于您的情况，请考虑使用接口：</p>\n<ul>\n<li><span class=\"red\">You expect that <ins>unrelated classes</ins> would implement your interface.</span><br />\n 希望不相关的类将实现您的接口。</li>\n<li>You want to specify the behavior of a particular data type, but not concerned about who implements its behavior.<br />\n 想指定特定数据类型的行为，但不关心谁实现其行为。</li>\n<li>You want to take advantage of multiple inheritance.<br />\n 想利用多重继承。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"inheritance-继承\"><a class=\"anchor\" href=\"#inheritance-继承\">#</a> Inheritance 继承</h2>\n<p>Inheritance is a process of defining a new class based on an existing class by extending its common data members and methods.<br />\n 继承是通过扩展其公共数据成员和方法，基于现有类定义新类的过程。</p>\n<dl>\n<dt>Why use Inheritance?</dt>\n<dd>Inheritance allows us to reuse of code, it improves reusability in your java application.<br />\n 继承使我们可以重复使用代码，从而提高了 Java 应用程序的可重用性。</dd>\n<dt>Advantage of use</dt>\n<dd>Code that is already present in base class need not be rewritten in the child class.<br />\n 基类中已经存在的代码无需在子类中重写。</dd>\n</dl>\n<h3 id=\"the-is-a-relationship\"><a class=\"anchor\" href=\"#the-is-a-relationship\">#</a> The &quot;is a&quot; Relationship</h3>\n<p>Inheritance has an &quot;is-a&quot; relationship.<br />\n 继承具有 “is-a” 关系。</p>\n<dl>\n<dt>Inheritance</dt>\n<dd>is a mechanism wherein a new class is derived from an existing class.<br />\n 继承是一种机制，其中新类是从现有类派生的。<br />\nIn Java, classes may inherit or acquire the properties and methods of other classes.<br />\n 在 Java 中，类可以继承或获取其他类的属性和方法。<br />\nA class derived from another class is called a subclass, whereas the class from which a subclass is derived is called a superclass.<br />\n 从另一个类派生的类称为子类，而从中派生子类的类称为超类。</dd>\n<dt>Super Class: 超级类</dt>\n<dd>The class whose features are inherited is known as super class (or a base class or a parent class).<br />\n 被继承功能的类称为超级类（或基类或父类）。</dd>\n<dt>Sub Class: 子类</dt>\n<dd>The class that inherits the other class is known as sub class(or a derived class, extended class, or child class).<br />\n 继承另一个类的类称为子类（或派生类，扩展类或子类）。<br />\nThe subclass can add its own fields and methods in addition to the superclass fields and methods.<br />\n 除了父类的字段和方法之外，子类还可以添加自己的字段和方法。</dd>\n<dt>Reusability: 可重用性</dt>\n<dd>Inheritance supports the concept of &quot;reusability&quot;, i.e. when we want to create a new class and there is already a class that includes some of the code that we want, we can derive our new class from the existing class.<br />\n 继承支持 “可重用性” 的概念，即，当我们要创建一个新类并且已经有一个包含我们想要的某些代码的类时，我们可以从现有类中派生新类。<br />\nBy doing this, we are reusing the fields and methods of the existing class.<br />\n 通过这样做，我们可以重用现有类的字段和方法。<br />\nWhat to avoid? Too much dependency!<br />\n 需要避免什么？太多的依赖！\t<br />\nLoose coupling better than tight coupling. High cohesion better than low cohesion.<br />\n 松耦合优于紧耦合。高内聚力优于低内聚力。</dd>\n</dl>\n<h3 id=\"types-of-inheritance-allowed\"><a class=\"anchor\" href=\"#types-of-inheritance-allowed\">#</a> Types of Inheritance allowed.</h3>\n<p>允许的继承类型。</p>\n<p><img data-src=\"https://i.loli.net/2020/10/07/SbPCURHmM7FYGqJ.png\" alt=\"\" /></p>\n<h3 id=\"access-privileges-访问权限\"><a class=\"anchor\" href=\"#access-privileges-访问权限\">#</a> Access privileges 访问权限</h3>\n<p>UML symbols:</p>\n<blockquote>\n<p><code>-</code>  Private (encapsulation principle)<br />\n <code>+</code>  Public<br />\n <code>#</code>  Protected</p>\n</blockquote>\n<ul>\n<li>\n<p>What is inherited?<br />\nProtected members.<br />\nPublic methods.</p>\n</li>\n<li>\n<p>What is not inherited?<br />\nThe constructor.<br />\nPlaces object into an initial state!</p>\n</li>\n</ul>\n<h3 id=\"types-of-constructors\"><a class=\"anchor\" href=\"#types-of-constructors\">#</a> Types of Constructors</h3>\n<ol>\n<li>System default (no arg), implicit calling.<br />\n 系统默认值，无参数，隐式调用</li>\n<li>Programmer defined, explicit calling<br />\n 程序员定义的，显式调用</li>\n</ol>\n<ul>\n<li>No-arg 无参数</li>\n<li>Parameterized (overloaded)  参数化（重载）</li>\n</ul>\n<h3 id=\"tostring-override\"><a class=\"anchor\" href=\"#tostring-override\">#</a> toString() override</h3>\n<p>All classes in Java inherit from the Object class, directly or indirectly which contains the toString method.<br />\nJava 中的所有类都直接或间接地从包含 <code>toString</code>  方法的 Object 类继承。</p>\n<p>We can override toString() method in any of our classes to print proper output specifying fields of a class.<br />\n 我们可以在任何一个类中重写 <code>toString()</code>  方法，来打印指定类的正确输出。</p>\n<p>To call the parent classes toString method definition, use the word super.<br />\n 要调用父类的 <code>toString</code>  方法定义，请使用单词 <code>super</code> 。</p>\n<h3 id=\"object-state\"><a class=\"anchor\" href=\"#object-state\">#</a> Object State</h3>\n<p>The state of an object encompasses all of the (usually static) properties of the object plus the current (usually dynamic) values of each of these properties.<br />\n 对象的状态包含对象的所有属性（通常是静态），以及这些属性中每个属性的当前值（通常是动态）。</p>\n<p><img data-src=\"https://i.loli.net/2020/10/08/nYdvW1Fl3cbfwUs.png\" alt=\"UML Class Diagram example\" title=\"UML Class Diagram example\" /></p>\n<p><div class=\"links\"><div class=\"item\" title=\"Lucidchart\" style=\"--block-color:#f96b13;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly93d3cubHVjaWRjaGFydC5jb20v\" data-background-image=\"https://d2slcw3kip6qmk.cloudfront.net/marketing/images/LucidchartFavicon.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly93d3cubHVjaWRjaGFydC5jb20v\">Lucidchart</span>\n          <p class=\"desc\">Online Diagram Software & Visual Solution</p>\n          </div></div></div></p>\n<h2 id=\"polymorphism-多态\"><a class=\"anchor\" href=\"#polymorphism-多态\">#</a> Polymorphism 多态</h2>\n<p>Polymorphism is a OOPs concept where one name can have many forms.<br />\n 多态是一个 OOP 概念，指一个名称可以具有多种形式。</p>\n<blockquote>\n<p>For example, you have a smartphone for communication.<br />\n 例如，您有用于通信的智能手机。<br />\nThe communication mode you choose could be anything.<br />\n 您选择的通信模式可以是任何东西。<br />\nIt can be a call, a text message, a picture message, mail, etc.<br />\n 它可以是电话，文本消息，图片消息，邮件等。<br />\nSo, the goal is common that is communication, but their approach is different.<br />\n 目标是共同的，即沟通，但是他们的方法不同。<br />\nThis is called Polymorphism.<br />\n 这称为多态。</p>\n</blockquote>\n<p>Polymorphism deals with subtyping classes and gives us distinctive advantages at runtime.<br />\n 多态处理子类型类，并在运行时为我们提供了独特的优势。</p>\n<h3 id=\"example\"><a class=\"anchor\" href=\"#example\">#</a> Example</h3>\n<p>Consider our Bank Account example.<br />\nWe have one parent class,  <code>Account</code>  with function of  <code>deposit</code>  and  <code>withdraw</code> .<br />\nAccount has 2 child classes.<br />\nThe operation of  <code>deposit</code>  and  <code>withdraw</code>  is same for  <code>Saving</code>  and  <code>Checking</code>  accounts.<br />\nSo the inherited methods from Account class will work.<br />\n 例如我们的 <code>Bank Account</code>  示例。<br />\n我们有一个父类， <code>Account</code>  账户类，具有 <code>deposit</code>  存款和 <code>withdraw</code>  提现功能（两个方法）。<br />\n <code>Account</code>  帐户类有 2 个子类。<br />\n <code>Saving</code>  储蓄和 <code>Checking</code>  支票帐户类的 <code>deposit</code>  存款和 <code>withdraw</code>  提现操作相同。<br />\n因此，从 <code>Account</code>  类继承的方法将起作用。</p>\n<p><img data-src=\"https://i.loli.net/2020/10/08/QIv36SodOebXnx1.png\" alt=\"\" /></p>\n<p>Change in Software Requirement!?<br />\nThere is a change in the requirement specification, something that is so common in the software industry.<br />\n 更改软件需求！？<br />\n需求发生了变化，这在软件行业中很常见。</p>\n<p>Example: You are supposed to add functionality with a privileged Banking Account with overdraft capabilities.<br />\nFor a background, overdraft is a facility where you can withdraw an amount more than available the balance in your account.<br />\nSo, a  <code>withdraw</code>  method for privileged class, needs to be implemented afresh.<br />\nBut you do not change the tested piece of code in  <code>Savings</code>  and  <code>Checking</code>  account.<br />\nThis is the advantage of OOPS!<br />\n 示例：您要添加一个拥有透支功能的 <code>Privileged</code>  特权银行账户的功能。<br />\n透支功能是指可以提取比可用余额更多的金额。<br />\n因此，需要重新实现特权类的 <code>withdraw</code>  提现方法。<br />\n但是，不需要改动 <code>Saving</code>  储蓄和 <code>Checking</code>  支票帐户类中的已测代码段。<br />\n这就是 OOPS 的优势！</p>\n<p><img data-src=\"https://i.loli.net/2020/10/08/NOfj3isyaQB9DLv.png\" alt=\"\" /></p>\n<ol>\n<li>\n<p>Such that when the &quot;withdraw&quot; method for saving account is called a method from parent account class is executed.<br />\n 当调用 <code>Saving</code>  储蓄帐户的 <code>withdraw</code>  提现方法时，将执行父类 <code>Account</code>  帐户类中的方法。<br />\n<img data-src=\"https://i.loli.net/2020/10/08/qZlFiIz3UQGvnCj.jpg\" alt=\"\" /></p>\n</li>\n<li>\n<p>But when the &quot;withdraw&quot; method for the privileged account (overdraft facility) is called, the withdraw method defined in the privileged class is executed. This is Polymorphism.<br />\n 步骤 2）但是，当调用特权帐户的 <code>withdraw</code>  提现方法时，将执行 <code>Privileged</code>  特权类中定义的提现方法。 这就是多态。<br />\n<img data-src=\"https://i.loli.net/2020/10/08/RIAsylC7eFPaDu2.jpg\" alt=\"\" /></p>\n</li>\n</ol>\n<h3 id=\"key-features\"><a class=\"anchor\" href=\"#key-features\">#</a> Key features</h3>\n<h4 id=\"method-overriding\"><a class=\"anchor\" href=\"#method-overriding\">#</a> Method Overriding</h4>\n<p>Method Overriding is redefining a super class method in a sub class.<br />\n 是指在子类中重新定义父类的方法。</p>\n<p>Rules for Method Overriding 规则</p>\n<ul>\n<li>The method signature i.e. method name, parameter list and return type have to match exactly.<br />\n 方法的特征，如方法名、参数列表和返回值，必须完全一致</li>\n<li>The overridden method can widen the accessibility, but not narrow it, i.e. if it is private in the base class, the child class can make it public but not vice versa.<br />\n 重写的方法可以扩大其可访问性，但不能缩小其可访问性，即，如果它在基类中是私有的，则子类可以将其公开，但反之则不然。</li>\n</ul>\n<h4 id=\"super-keyword\"><a class=\"anchor\" href=\"#super-keyword\">#</a>  <code>super</code>  Keyword</h4>\n<p>Keyword  <code>super</code>  can be used to access methods of the parent class from the child class.<br />\n 关键字 <code>super</code>  可用于从子类访问父类的方法。</p>\n<blockquote>\n<p>What if the WITHDRAW method in the PRIVILEGED class wants to execute the functionality defined in ACCOUNT class and then perform its own specific functionality?<br />\n 如果 <code>Privileged</code>  类中的 <code>withdraw</code>  方法要执行 <code>Account</code>  类中定义的功能，然后执行其自有的特定功能，该怎么办？</p>\n</blockquote>\n<h4 id=\"final-keyword\"><a class=\"anchor\" href=\"#final-keyword\">#</a>  <code>final</code>  Keyword</h4>\n<p>The  <code>final</code>  modifier applies to classes, methods, and variables.<br />\n <code>final</code>  修饰符适用于类，方法和变量。</p>\n<p>The meaning of  <code>final</code>  varies from context to context, but the essential idea is the same.<br />\n 最终的含义因上下文而异，但是基本思想是相同的。</p>\n<ul>\n<li>\n<p>A final class may not be inherited<br />\n <code>final</code>  类不会被继承</p>\n</li>\n<li>\n<p>A final variable becomes a constant and its value cannot be changed.<br />\n <code>final</code>  变量为常量，并且其值无法更改。</p>\n</li>\n<li>\n<p>A final method may not be overridden. This is done for security reasons, and these methods are used for optimization.<br />\n <code>final</code>  方法可能不会被覆盖。这是出于安全原因，并且这些方法用于优化。</p>\n</li>\n</ul>\n<h3 id=\"demo\"><a class=\"anchor\" href=\"#demo\">#</a> demo</h3>\n<ol>\n<li>Construct a Polymorphism project and structure classes as follows<br />\n 构造一个多态项目并构造类，如下所示</li>\n</ol>\n<pre class=\"mermaid\"><svg id=\"mermaid-1607194100077\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" height=\"150\" style=\"max-width: 294.40625px;\" viewBox=\"-20 -20 294.40625 150\"><g></g><defs><marker id=\"extensionStart\" class=\"extension\" refX=\"0\" refY=\"7\" markerWidth=\"190\" markerHeight=\"240\" orient=\"auto\"><path d=\"M 1,7 L18,13 V 1 Z\"></path></marker></defs><defs><marker id=\"extensionEnd\" refX=\"19\" refY=\"7\" markerWidth=\"20\" markerHeight=\"28\" orient=\"auto\"><path d=\"M 1,1 V 13 L18,7 Z\"></path></marker></defs><defs><marker id=\"compositionStart\" class=\"extension\" refX=\"0\" refY=\"7\" markerWidth=\"190\" markerHeight=\"240\" orient=\"auto\"><path d=\"M 18,7 L9,13 L1,7 L9,1 Z\"></path></marker></defs><defs><marker id=\"compositionEnd\" refX=\"19\" refY=\"7\" markerWidth=\"20\" markerHeight=\"28\" orient=\"auto\"><path d=\"M 18,7 L9,13 L1,7 L9,1 Z\"></path></marker></defs><defs><marker id=\"aggregationStart\" class=\"extension\" refX=\"0\" refY=\"7\" markerWidth=\"190\" markerHeight=\"240\" orient=\"auto\"><path d=\"M 18,7 L9,13 L1,7 L9,1 Z\"></path></marker></defs><defs><marker id=\"aggregationEnd\" refX=\"19\" refY=\"7\" markerWidth=\"20\" markerHeight=\"28\" orient=\"auto\"><path d=\"M 18,7 L9,13 L1,7 L9,1 Z\"></path></marker></defs><defs><marker id=\"dependencyStart\" class=\"extension\" refX=\"0\" refY=\"7\" markerWidth=\"190\" markerHeight=\"240\" orient=\"auto\"><path d=\"M 5,7 L9,13 L1,7 L9,1 Z\"></path></marker></defs><defs><marker id=\"dependencyEnd\" refX=\"19\" refY=\"7\" markerWidth=\"20\" markerHeight=\"28\" orient=\"auto\"><path d=\"M 18,7 L9,13 L14,7 L9,1 Z\"></path></marker></defs><g id=\"classid-Account-0\" class=\"classGroup\" transform=\"translate(100.7421875,0 )\"><rect x=\"0\" y=\"0\" width=\"48.046875\" height=\"30\" class=\" \"></rect><text y=\"15\" x=\"0\"><tspan class=\"title\" x=\"5\">Account</tspan></text><line x1=\"0\" y1=\"21\" y2=\"21\" x2=\"48.046875\"></line><text x=\"5\" y=\"31\" fill=\"white\" class=\"classText\"></text><line x1=\"0\" y1=\"26\" y2=\"26\" x2=\"48.046875\"></line><text x=\"5\" y=\"41\" fill=\"white\" class=\"classText\"></text></g><g id=\"classid-Checking-1\" class=\"classGroup\" transform=\"translate(0,80 )\"><rect x=\"0\" y=\"0\" width=\"52.296875\" height=\"30\" class=\" \"></rect><text y=\"15\" x=\"0\"><tspan class=\"title\" x=\"5\">Checking</tspan></text><line x1=\"0\" y1=\"21\" y2=\"21\" x2=\"52.296875\"></line><text x=\"5\" y=\"31\" fill=\"white\" class=\"classText\"></text><line x1=\"0\" y1=\"26\" y2=\"26\" x2=\"52.296875\"></line><text x=\"5\" y=\"41\" fill=\"white\" class=\"classText\"></text></g><g id=\"classid-Savings-2\" class=\"classGroup\" transform=\"translate(102.296875,80 )\"><rect x=\"0\" y=\"0\" width=\"44.9375\" height=\"30\" class=\" \"></rect><text y=\"15\" x=\"0\"><tspan class=\"title\" x=\"5\">Savings</tspan></text><line x1=\"0\" y1=\"21\" y2=\"21\" x2=\"44.9375\"></line><text x=\"5\" y=\"31\" fill=\"white\" class=\"classText\"></text><line x1=\"0\" y1=\"26\" y2=\"26\" x2=\"44.9375\"></line><text x=\"5\" y=\"41\" fill=\"white\" class=\"classText\"></text></g><g id=\"classid-Privileged-3\" class=\"classGroup\" transform=\"translate(197.234375,80 )\"><rect x=\"0\" y=\"0\" width=\"57.171875\" height=\"30\" class=\" \"></rect><text y=\"15\" x=\"0\"><tspan class=\"title\" x=\"5\">Privileged</tspan></text><line x1=\"0\" y1=\"21\" y2=\"21\" x2=\"57.171875\"></line><text x=\"5\" y=\"31\" fill=\"white\" class=\"classText\"></text><line x1=\"0\" y1=\"26\" y2=\"26\" x2=\"57.171875\"></line><text x=\"5\" y=\"41\" fill=\"white\" class=\"classText\"></text></g><path d=\"M100.7421875,24.74411788006021L88.30989583333333,29.786764900050173C75.87760416666667,34.82941192004014,51.013020833333336,44.914705960020065,38.580729166666664,54.12401964667671C26.1484375,63.333333333333336,26.1484375,71.66666666666667,26.1484375,75.83333333333333L26.1484375,80\" id=\"edge0\" class=\"relation\" marker-start=\"url(#extensionStart)\"></path><path d=\"M124.765625,30L124.765625,34.166666666666664C124.765625,38.333333333333336,124.765625,46.666666666666664,124.765625,55C124.765625,63.333333333333336,124.765625,71.66666666666667,124.765625,75.83333333333333L124.765625,80\" id=\"edge1\" class=\"relation\" marker-start=\"url(#extensionStart)\"></path><path d=\"M148.7890625,24.509083880943177L161.62760416666666,29.590903234119313C174.46614583333334,34.67272258729545,200.14322916666666,44.83636129364772,212.98177083333334,54.084847313490535C225.8203125,63.333333333333336,225.8203125,71.66666666666667,225.8203125,75.83333333333333L225.8203125,80\" id=\"edge2\" class=\"relation\" marker-start=\"url(#extensionStart)\"></path></svg></pre><ol start=\"2\">\n<li>\n<p>Add in special privileges to the Privileged class to override the withdraw method from the parent class and thus allow specific functionality to allow for the withdraw or not in the child class.<br />\n 在 Privileged 类中添加特殊特权，以覆盖父类的 withdraw 方法，从而允许特定功能允许子类中是否允许退出。</p>\n</li>\n<li>\n<p>Create AccountTest class to check implementation of the Privileged class.<br />\n 创建 AccountTest 类以检查 Privileged 类的实现。</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Account.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Account</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">double</span> balance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Account</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deposit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>balance <span class=\"token operator\">+=</span> amount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>balance  <span class=\"token operator\">=</span>  <span class=\"token punctuation\">(</span>balance<span class=\"token operator\">-</span>amount<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>balance<span class=\"token operator\">-</span>amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// TODO code application logic here</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"balance is \"</span> <span class=\"token operator\">+</span> balance <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Checking.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Checking</span><span class=\"token punctuation\">.</span>java <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Account</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Checking</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Checking\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>      </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Savings.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Savings</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Account</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Savings</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Savings\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>      </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Privilege.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Privilege</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Account</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Privilege</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Privilege\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//override the parent</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> amount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>balance <span class=\"token operator\">-=</span> amount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>AccountTest.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AccountTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">//create objects</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Checking</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Checking</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Savings</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Savings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Account</span> aObjs <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Account</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        aObjs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Checking</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        aObjs<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Checking</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        aObjs<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Checking</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        aObjs<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Savings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        aObjs<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Privilege</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">//test withdraw</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        aObjs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        aObjs<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">//System.out.println(c + \"\\n\" + s );</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">int</span> checkCt<span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> savCt<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Account</span> a <span class=\"token operator\">:</span>  aObjs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>             <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Checking\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                checkCt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>             <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Savings\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                savCt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tots: \\n\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                  <span class=\"token string\">\"Checking ct: \"</span> <span class=\"token operator\">+</span> checkCt <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                  <span class=\"token string\">\" Savings ct: \"</span> <span class=\"token operator\">+</span> savCt <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"review\"><a class=\"anchor\" href=\"#review\">#</a> Review</h1>\n<blockquote>\n<p>Chapter 6/7 OOP Concepts / Arrays / ArrayLists</p>\n</blockquote>\n<ol>\n<li class=\"quiz true\">\n<p>A constructor is a method that is automatically called when an object is created.</p>\n<blockquote>\n<p>构造函数是一种在创建对象时自动调用的方法。</p>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>A constructor</p>\n<ul class=\"options\">\n<li>Has return type of void</li>\n<li>Always accepts two arguments</li>\n<li>Always has an access specifier of private</li>\n<li class=\"correct\">Has the same name as the class</li>\n</ul>\n<blockquote>\n<p>构造函数</p>\n<ul class=\"options\">\n<li>返回类型为 void</li>\n<li>一律接受两个参数</li>\n<li>始终具有私有的访问权限</li>\n<li>与类同名 ✔️</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz essay\">\n<p>What is the <strong>default</strong> <ins>access specifier</ins> for methods and variables of a class?</p>\n<blockquote>\n<p>什么是类的方法和变量的 “默认” 访问权限说明符？<br />\nDefault access specifier for them both is package protected, that is, their accessibility is available to any other class but within the same package.<br />\n 它们的默认访问说明符都受程序包保护，也就是说，它们的可访问性可用于同一包中的任何其他类。</p>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>For the following code, which statement is not true?</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Sphere</span> <span class=\"token punctuation\">&#123;</span>\t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> radius<span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> x<span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> z<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul class=\"options\">\n<li class=\"correct\">z is available to code that is written outside the Sphere class</li>\n<li>radius, x, y, and z are called members of the Sphere class</li>\n<li>x is available to code that is written outside the Sphere class</li>\n<li>radius is not available to code written outside the Sphere class</li>\n</ul>\n<blockquote>\n<p>对于以下代码，哪个语句不正确</p>\n<ul class=\"options\">\n<li>z 可用于在 Sphere 类之外编写的代码 ✔️</li>\n<li>radius，x，y 和 z 被称为 Sphere 类的成员</li>\n<li>x 可用于在 Sphere 类之外编写的代码</li>\n<li>radius 不适用于在 Sphere 类之外编写的代码</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz essay\">\n<p>What will be returned from the following method?</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">methodA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">double</span> a <span class=\"token operator\">=</span> <span class=\"token number\">8.5</span> <span class=\"token operator\">+</span> <span class=\"token number\">9.5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>以下方法将返回什么？<br />\nThis is an error</p>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>What would be the results of the following code?</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> SIZE <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// ... Code that will put values in array1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> a <span class=\"token operator\">&lt;=</span> array1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   value <span class=\"token operator\">+=</span> array1<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul class=\"options\">\n<li>value contains the lowest value in array1</li>\n<li>value contains the sum of all the values in array1</li>\n<li>value contains the highest value in array1</li>\n<li class=\"correct\">This would cause the program to crash</li>\n</ul>\n<blockquote>\n<p>以下代码的结果是什么？</p>\n<ul class=\"options\">\n<li>值包含 array1 中的最小值</li>\n<li>value 包含 array1 中所有值的总和</li>\n<li>值包含 array1 中的最大值</li>\n<li>这会导致程序崩溃 ✔️</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>The binary search algorithm</p>\n<ul class=\"options\">\n<li class=\"correct\">will cut the portion of the array being searched in half each time the loop fails to locate the search value</li>\n<li>will have an average of N/2 comparisons, where N is the number of elements in the array</li>\n<li>is less efficient than the sequential search algorithm</li>\n<li>will have a maximum number of comparisons equal to the number of elements in the array</li>\n</ul>\n<blockquote>\n<p>二进制搜索算法</p>\n<ul class=\"options\">\n<li>每次循环未能找到搜索值时，将被搜索数组的部分减少一半。 ✔️</li>\n<li>将具有 N/2 个比较的平均值，其中 N 是数组中元素的数量</li>\n<li>比顺序搜索算法效率低</li>\n<li>将具有的最大比较数量等于数组中元素的数量</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>If lower is the first subscript in a contiguous portion of an array, and upper is the last subscript, then the array item in the middle of that array portion is at subscript</p>\n<ul class=\"options\">\n<li class=\"correct\">(lower + upper)/2</li>\n<li>(upper - lower)/2</li>\n<li>(lower - upper)/2</li>\n<li>lower + upper/2</li>\n</ul>\n<blockquote>\n<p>如果 lower 是数组连续部分中的第一个下标，而 upper 是最后一个下标，则该数组部分中间的数组项位于下标？</p>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>The following statement creates an ArrayList object. What is the purpose of the  <code>&lt;String&gt;</code>  notation?</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul class=\"options\">\n<li>It specfies that everything store for the arr object will be converted to a String</li>\n<li>It specfies that String objects may not be stored in the ArrayList object</li>\n<li class=\"correct\">It specfies that only String objects may be stored in the ArrayList object</li>\n<li>It specfies that the get method will only return String objects</li>\n</ul>\n<blockquote>\n<p>以下语句创建一个 <code>ArrayList</code>  对象。  <code>&lt;String&gt;</code>  表示法的目的是什么？</p>\n<ul class=\"options\">\n<li>确定将所有存储在 <code>arr</code>  对象中的东西都转换为 <code>String</code> ；</li>\n<li>确定 <code>String</code>  对象可能不存储在 <code>ArrayList</code>  对象中；</li>\n<li>规定只有 <code>String</code>  对象可以存储在 <code>ArrayList</code>  对象中； ✔️</li>\n<li>它指定 <code>get</code>  方法将仅返回 <code>String ob</code> 。</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>The declaration</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span> aL <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul class=\"options\">\n<li>compiles and runs correctly, but is not recommended</li>\n<li>allows the programmer to create an ArrayList that holds integer types</li>\n<li class=\"correct\">causes a compile-time error</li>\n<li>compiles correctly, but causes an exception to be thrown at run time</li>\n</ul>\n<blockquote>\n<ul class=\"options\">\n<li>正确编译并运行，但不建议</li>\n<li>允许程序员创建一个保存整数类型的 ArrayList</li>\n<li>导致编译时错误 ✔️</li>\n<li>正确编译，但导致在运行时引发异常</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n","tags":["计算机科学","Master of Software Engineering","ITMD 510. Object-Oriented App Develop","Java"]},{"id":"https://shoka.lostyu.me/computer-science/mse/itmd-534/lecture-3/","url":"https://shoka.lostyu.me/computer-science/mse/itmd-534/lecture-3/","title":"Lecture 3. How to organize and use data from contextual inquiry","date_published":"2020-09-23T12:16:25.000Z","content_html":"<h1 id=\"what-to-do-with-all-data\"><a class=\"anchor\" href=\"#what-to-do-with-all-data\">#</a> What to do with all data?</h1>\n<p>如何处理所有数据？</p>\n<p>How to organize and use data from contextual inquiry?<br />\n 如何组织和使用情境访谈的数据</p>\n<h2 id=\"recommended-technique\"><a class=\"anchor\" href=\"#recommended-technique\">#</a> Recommended technique</h2>\n<p>Use <span class=\"orange\">Graphical Models (diagrams)</span><br />\n 推荐技术：使用图形模型</p>\n<ul>\n<li>Integrate<br />\n 整合</li>\n<li>Summarize<br />\n 总结</li>\n<li>Point back to the data<br />\n 指向数据</li>\n<li>Help inspire and guide design<br />\n 帮助启发和指导设计</li>\n<li>Provide shared focus<br />\n 提供共同的焦点</li>\n<li>Provide an intermediate deliverable outside design team<br />\n 提供一个中间交付的外部设计团队</li>\n</ul>\n<p>&quot;Opinions are cheap but insights are priceless.&quot;<br />\n 意见不多，但见识却多无价</p>\n<h2 id=\"why-graphical-为什么用图表\"><a class=\"anchor\" href=\"#why-graphical-为什么用图表\">#</a> Why Graphical 为什么用图表</h2>\n<ul>\n<li>Displays whole picture at once<br />\n 一次显示整个图片</li>\n<li>Reveals patterns<br />\n 显示图案</li>\n<li>Forces summarization and conciseness<br />\n 力求简洁</li>\n<li>Multiple models provides different perspectives<br />\n 多种模型提供不同的观点</li>\n</ul>\n<h2 id=\"affinity-diagram-亲和图\"><a class=\"anchor\" href=\"#affinity-diagram-亲和图\">#</a> Affinity Diagram 亲和图</h2>\n<ul>\n<li>Write down each quote/observation on a slip of paper<br />\n 将每个报价 / 观察结果记在纸条上</li>\n<li>Put up on board<br />\n 贴在墙上</li>\n<li>Coalesce items that have affinity<br />\n 具有亲和力的合并项\n<ul>\n<li>If they are saying similar things about an issue<br />\n 如果他们对某个问题有类似的发言</li>\n</ul>\n</li>\n<li>Give names to different groups (colors too)<br />\n 为不同的组命名（颜色也是）</li>\n<li>Continue grouping subgroups<br />\n 继续分组子组</li>\n<li>A hierarchy will be formed<br />\n 将形成一个层次结构</li>\n</ul>\n<blockquote>\n<p>Beyer &amp; Holtzblatt call this process &quot;Contextual Design&quot;</p>\n</blockquote>\n<ul>\n<li>\n<p>After collecting data – we go to the models<br />\n 收集数据后，进入模型</p>\n<ul>\n<li>Affinity diagrams are more important for teams and when there are lots of ideas<br />\n 亲和图对于团队以及何时有新主意很重要</li>\n</ul>\n</li>\n<li>\n<p>You will make the models directly from your transcripts<br />\n 你可以直接从笔记中制作模型。</p>\n</li>\n</ul>\n<p><img data-src=\"https://i.loli.net/2020/10/03/K2GCa1jk6xR9TVM.jpg\" alt=\"\" /></p>\n<h1 id=\"models\"><a class=\"anchor\" href=\"#models\">#</a> Models</h1>\n<ul>\n<li>\n<p>Flow Model<br />\n 流程模型<br />\n Communication and coordination necessary to perform task<br />\n 执行任务所需的沟通和协调</p>\n</li>\n<li>\n<p>Social / Cultural Model<br />\n 社会 / 文化模型<br />\n Constraints on work due to policy, culture, or values<br />\n 由于政策，文化或价值观而对工作造成的限制</p>\n</li>\n<li>\n<p>Artifact Model<br />\n 器物模型<br />\n Physical things used and created<br />\n 使用和创建的物理事物</p>\n</li>\n<li>\n<p>Physical Model<br />\n 物理模型<br />\n Layout of work environment as it affects the work.<br />\n 工作环境的布局，因为它会影响工作。</p>\n</li>\n<li>\n<p>Sequence / Step-by-Step Model<br />\n 顺序 / 逐步模型</p>\n<ul>\n<li>Detailed work steps<br />\n 详细的工作步骤</li>\n<li>&quot;Step by Step Task Interaction Model&quot;<br />\n 分步任务交互模型</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"in-all-models\"><a class=\"anchor\" href=\"#in-all-models\">#</a> In All Models</h2>\n<p>ALWAYS label everything you put on the model with the line-number in the transcript (or time on the video/audio, if no transcript).<br />\n 始终使用笔记中的行号，标记放在模型上的所有内容（如果没有笔记，则使用视频 / 音频的时间）。</p>\n<p>This allows you to get back to the raw data to see if a different interpretation is possible.<br />\n 这可以让你找回原始数据，并查看是否有其他解释。</p>\n<p>If there is no pointer back, then it is an unsupported Assumption and subject to additional scrutiny.<br />\n 如果没有指针返回，则表示它是一个不受支持的假设，需要进行额外的检查。</p>\n<p>Don’t make things up –show only what is available in the data<br />\n 不要整理 —— 只显示数据中可用的内容</p>\n<h2 id=\"breakdownbarriers-细分障碍\"><a class=\"anchor\" href=\"#breakdownbarriers-细分障碍\">#</a> Breakdown/Barriers 细分 / 障碍</h2>\n<ul>\n<li>\n<p>Problems that interfere with normal operation<br />\n 干扰正常运行的问题</p>\n</li>\n<li>\n<p>Represented in most models<br />\n 代表大多数型号</p>\n</li>\n<li>\n<p>Key opportunities and issues for design<br />\n 设计的主要机会和问题</p>\n</li>\n<li>\n<p>Often shown in red with a &quot;lightning bolt&quot;<br />\n 通常以 “闪电” 的形式显示为红色</p>\n</li>\n</ul>\n<p><img data-src=\"https://i.loli.net/2020/10/03/8buV2tnEKIPk3oc.png\" alt=\"\" /></p>\n<h3 id=\"additional-example\"><a class=\"anchor\" href=\"#additional-example\">#</a> Additional Example</h3>\n<ul>\n<li>New example: Giving a presentation</li>\n</ul>\n<p><img data-src=\"https://i.loli.net/2020/10/03/rVZmBMU1LWawDKn.jpg\" alt=\"\" /></p>\n<ul>\n<li>From the paper: 来自论文\n<ul>\n<li>Karen Cross, Adrienne Warmack, and Brad Myers.<br />\n&quot;Lessons Learned: Using Contextual Inquiry Analysis to Improve PDA Control of Presentations&quot;<br />\n 经验教训：用语境查询分析改善 PDA 控制的演讲</li>\n<li>Results influenced design of SlideShow Commander remote control product for mobile phones<br />\n 结果影响了手机上的幻灯片遥控产品的设计</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"flow-model-流程模型\"><a class=\"anchor\" href=\"#flow-model-流程模型\">#</a> Flow Model 流程模型</h2>\n<ul>\n<li>\n<p>Communication and coordination necessary to perform tasks<br />\n 执行任务所需的沟通和协调</p>\n<ul>\n<li>Work flow 工作流</li>\n<li>Who talks to whom? Who gives what to whom?<br />\n 谁与谁在对话？谁给了什么给谁？</li>\n</ul>\n</li>\n<li>\n<p>Key <em>roles</em> of individuals or groups<br />\n 个人或团体的关键作用</p>\n</li>\n<li>\n<p>Key <em>responsibilities</em> of that person with respect to the tasks<br />\n 该人在任务方面的主要职责</p>\n</li>\n<li>\n<p><em>Flow</em> of communication and artifacts, shown as arrows<br />\n 通信和工件流，如箭头所示</p>\n</li>\n<li>\n<p>Artifacts passed around<br />\n 工件传递</p>\n</li>\n<li>\n<p>Actions along the way<br />\n 沿途操作</p>\n</li>\n<li>\n<p>Places that things or people go<br />\n 要去的地方</p>\n</li>\n<li>\n<p>Breakdowns<br />\n 故障</p>\n</li>\n</ul>\n<h3 id=\"flow-model-structure-结构\"><a class=\"anchor\" href=\"#flow-model-structure-结构\">#</a> Flow Model Structure 结构</h3>\n<ul>\n<li>\n<p>Circles and/or icons = people or groups by role<br />\n 圆圈和 / 或图表 ➡️ 按角色分类的人或组</p>\n</li>\n<li>\n<p>Boxes = things (artifacts), places, files, etc.<br />\n 盒子 ➡️ 事物（物件）、位置、文件等</p>\n</li>\n<li>\n<p>Arrows = flow<br />\n 箭头 ➡️ 流向</p>\n</li>\n<li>\n<p>Red lightening bolts = breakdowns<br />\n 红色闪电标志 ➡️ 故障</p>\n</li>\n<li>\n<p>Times refer to time codes in video<br />\n 时间是视频中的时间码</p>\n<ul>\n<li>Could also refer to lines of a transcript<br />\n 也可以参考笔记的行号</li>\n<li><code>(A)</code>  = <ins>A</ins>ssumption 假设 = interpretation 解释\n<ul>\n<li>Note: not for team-member's opinions about the UI<br />\n 注意：不适用于团队成员对用户界面的看法</li>\n<li>Instead (A) is for assumptions about what userdid<br />\n 相反 (A) 是关于用户使用什么的假设</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>Note: you (interviewer) are never in any model<br />\n 注意：你作为采访者，永远不会参与任何模型</p>\n</blockquote>\n<h3 id=\"flow-model-components-组成\"><a class=\"anchor\" href=\"#flow-model-components-组成\">#</a> Flow Model Components 组成</h3>\n<h4 id=\"general\"><a class=\"anchor\" href=\"#general\">#</a> General</h4>\n<ul>\n<li>How do job responsibilities get assigned to people?<br />\n 如何分配工作职责给大家？</li>\n<li>How do they get help?<br />\n 大家如何获得帮助</li>\n<li>How do new tasks get assigned, and how are they carried out?<br />\n 如何分配新任务，以及如何执行它们？</li>\n<li>Coordination: where did each artifact come from and where does it go?<br />\n 协调：每个物件从何而来？\n<ul>\n<li>Problems with coordination: forgetting, timing, steps<br />\n 协调问题：遗忘，时间安排，步骤</li>\n</ul>\n</li>\n<li>Creates the &quot;bird's eye view&quot; of organizational structure<br />\n 创建组织结构的 “鸟瞰图”</li>\n</ul>\n<h4 id=\"web-网站\"><a class=\"anchor\" href=\"#web-网站\">#</a> Web 网站</h4>\n<ul>\n<li>NOT flow chart of pages visited<br />\n 没有访问页面的流程图</li>\n<li>How information and command flow among the site(s)<br />\n 信息和命令如何在站点之间流动</li>\n</ul>\n<h3 id=\"flow-model-example\"><a class=\"anchor\" href=\"#flow-model-example\">#</a> Flow Model Example</h3>\n<p class=\"gallery\"><img data-src=\"https://i.loli.net/2020/10/03/H1NUKGpTPB3ilyf.jpg\" alt=\"cdw\" title=\"cdw\" /><br />\n<img data-src=\"https://i.loli.net/2020/10/03/LKCXvMo5VFUTjZp.jpg\" alt=\"stuttering\" title=\"stuttering\" /><br />\n<img data-src=\"https://i.loli.net/2020/10/03/EMYKdwQp1hvyqUH.jpg\" alt=\"ssc\" title=\"ssc\" /></p>\n<h2 id=\"social-model-社会模型\"><a class=\"anchor\" href=\"#social-model-社会模型\">#</a> Social Model 社会模型</h2>\n<ul>\n<li>\n<p>Culture of organization, family, community defines expectations, desires, policies, values and approach<br />\n 组织、家庭、社区的文化，定义了期望、欲望、政策、价值观和方法</p>\n</li>\n<li>\n<p>&quot;Culture is as invisible as water to a fish&quot;<br />\n 文化就像鱼的水一样看不见</p>\n<ul>\n<li>Pervasive, inescapable; yet invisible and intangible<br />\n 普遍存在，不可避免； 看不见，摸不着</li>\n</ul>\n</li>\n<li>\n<p>Types of influences:<br />\n 影响类型：</p>\n<ul>\n<li>Formal and informal policies<br />\n 正式和非正式政策</li>\n<li>Power of individuals and groups over each other<br />\n 个人和团体相互之间的力量</li>\n<li>Values of company or team<br />\n 公司或团队的价值观</li>\n<li>Work domain constraints<br />\n 工作领域限制</li>\n<li>Group's sense of identity<br />\n 集体的认同感</li>\n<li>People's emotions about what they do<br />\n 人对自己所做之事情的情感</li>\n<li>The style, values and preferences of individuals or teams<br />\n 个人或团队的风格，价值观和偏好</li>\n</ul>\n</li>\n<li>\n<p>More examples of what goes on social model:<br />\n 更多示例</p>\n<ul>\n<li>When acceptable to use a recording device<br />\n 当可接受使用记录设备时</li>\n<li>What friends might think<br />\n 朋友可能会怎么想</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"social-model-structure\"><a class=\"anchor\" href=\"#social-model-structure\">#</a> Social Model Structure</h3>\n<ul>\n<li>\n<p>Ovals for &quot;Influencers&quot;: individuals or groups, internal or external<br />\n 椭圆形 ➡️ “影响者”：内部或外部的个人或团体</p>\n</li>\n<li>\n<p>Thought bubbles for feelings/concerns that they actually expressed<br />\n 思想泡泡 ➡️ 他们实际表达的感受 / 担忧</p>\n</li>\n<li>\n<p>Arrows for direction of influence<br />\n 箭头 ➡️ 影响的方向</p>\n<ul>\n<li>Labels for samples of dialog showing type of influence and attitudes<br />\n 标签 ➡️ 样本的对话框，显示影响的类型和态度\n<ul>\n<li>Worded as commands<br />\n 文字 ➡️ 命令</li>\n</ul>\n</li>\n<li>Also show &quot;pushback&quot; –influence in other direction<br />\n 同时显示 “回推” ➡️ 对其他方向的影响</li>\n</ul>\n</li>\n<li>\n<p>Breakdowns<br />\n 故障</p>\n<ul>\n<li>In relationships among people<br />\n 在人与人的关系中</li>\n<li>No need to repeat previously shown problems<br />\n 无需重复先前提过的问题</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>NOTE: Not allowed to make stuff up!<br />\nJust what you actually have data to support!<br />\n 注意：不允许美化！只要实际需要支持的数据！</p>\n</blockquote>\n<h3 id=\"social-model-example\"><a class=\"anchor\" href=\"#social-model-example\">#</a> Social Model Example</h3>\n<p class=\"gallery\"><img data-src=\"https://i.loli.net/2020/10/03/T8DAmik3YFqlBd5.png\" alt=\"cdw\" title=\"cdw\" /><br />\n<img data-src=\"https://i.loli.net/2020/10/03/mPFQ3BkzJgdW6nG.jpg\" alt=\"stuttering\" title=\"stuttering\" /><br />\n<img data-src=\"https://i.loli.net/2020/10/03/bkQuNDt4iAsTCzx.jpg\" alt=\"ssc\" title=\"ssc\" /></p>\n<h2 id=\"artifact-model-工件模型\"><a class=\"anchor\" href=\"#artifact-model-工件模型\">#</a> Artifact Model 工件模型</h2>\n<ul>\n<li>\n<p>Artifacts: What people create, modify and use as part of tasks<br />\n 工件：人们在任务中创建、修改和使用的内容</p>\n</li>\n<li>\n<p>Reveal traces of people’s work practices<br />\n 揭示人们工作习惯的痕迹</p>\n</li>\n<li>\n<p>Examples:</p>\n<ul>\n<li>Handwritten notes and signatures on hardcopy project plans -&gt; information flow and approval<br />\n 硬拷贝项目计划上的手写注释和签名 -&gt; 信息流和批准</li>\n<li>Fancy formatting on spreadsheet -&gt; looks are important<br />\n 电子表格上的精美格式 -&gt; 外观很重要</li>\n<li>Screen shots showing problematic features<br />\n 屏幕截图显示有问题的功能</li>\n</ul>\n</li>\n<li>\n<p>Model = drawing, photograph or copy of real artifact<br />\n 模型 = 实际工件的图纸、照片或副本</p>\n</li>\n<li>\n<p>Annotate with observations<br />\n 注释与观测</p>\n</li>\n</ul>\n<h3 id=\"artifact-model-example\"><a class=\"anchor\" href=\"#artifact-model-example\">#</a> Artifact Model Example</h3>\n<p class=\"gallery\"><img data-src=\"https://i.loli.net/2020/10/03/4vYOWk9oLc1dhIT.png\" alt=\"cdw\" title=\"cdw\" /><br />\n<img data-src=\"https://i.loli.net/2020/10/03/QUbX6kyqEdtgoil.jpg\" alt=\"stuttering\" title=\"stuttering\" /><br />\n<img data-src=\"https://i.loli.net/2020/10/03/AgrOk9nzyMiWfCe.jpg\" alt=\"stuttering\" title=\"stuttering\" /><br />\n<img data-src=\"https://i.loli.net/2020/10/03/jnNCtPaZGwrVmKR.jpg\" alt=\"stuttering\" title=\"stuttering\" /></p>\n<h2 id=\"physical-model-物理模型\"><a class=\"anchor\" href=\"#physical-model-物理模型\">#</a> Physical Model 物理模型</h2>\n<ul>\n<li>\n<p>Way the physical environment affects tasks<br />\n 物理环境影响任务的方式</p>\n<ul>\n<li>E.g, placement of items on a desk<br />\n 例如，将物品放在桌子上</li>\n<li>Proximity of printers<br />\n 邻近打印机</li>\n<li>Can't hold a device with a keyboard while standing up<br />\n 站立时无法手持键盘设备</li>\n</ul>\n</li>\n<li>\n<p>In presentation example, where people are and layout of environment<br />\n 在演示示例中，人在哪里以及环境的布局</p>\n</li>\n</ul>\n<blockquote>\n<p>Note: Physical model not always relevant or needed<br />\nSeems less important for web, unless mobile<br />\n 注意：物理模型并非始终相关或需要<br />\n对于网站似乎就不太重要，除非是移动设备</p>\n</blockquote>\n<h3 id=\"physical-model-components\"><a class=\"anchor\" href=\"#physical-model-components\">#</a> Physical Model Components</h3>\n<ul>\n<li>Places in which work occurs<br />\n 工作场所</li>\n<li>Physical structures which limit or define the space<br />\n 限制或定义空间的物理结构</li>\n<li>Usage and movement within the space<br />\n 空间内的使用和移动</li>\n<li>Hardware and other artifacts used<br />\n 使用的硬件和其他工件</li>\n<li>Layout of tools and artifacts<br />\n 工具和工件的布局</li>\n<li>Positions of people within environment<br />\n 人们在环境中的位置</li>\n<li>Breakdowns due to physical environment<br />\n 由于物理环境造成的故障</li>\n</ul>\n<h3 id=\"physical-model-example\"><a class=\"anchor\" href=\"#physical-model-example\">#</a> Physical Model Example</h3>\n<p><img data-src=\"https://i.loli.net/2020/10/05/FsSBWwNURtrIvCq.jpg\" alt=\"ssc\" title=\"ssc\" /></p>\n<h2 id=\"sequence-model-序列模型\"><a class=\"anchor\" href=\"#sequence-model-序列模型\">#</a> Sequence Model 序列模型</h2>\n<ul>\n<li>Similar to the Flow Model<br />\n 与流程模型相似</li>\n<li><em>Steps</em> taken to complete a task<br />\n 踏踏实实地完成任务</li>\n<li><em>Triggers</em> that cause the step to happen<br />\n 导致步骤发生的触发器\n<ul>\n<li>E.g., at a particular time; when something else happens<br />\n 例如，在特定时间； 当其他事情发生时</li>\n</ul>\n</li>\n<li><em>Intent</em> is key to understanding the steps<br />\n 意图是理解步骤的关键\n<ul>\n<li>Also called the goal<br />\n 也称为目标</li>\n<li>Why each step is performed, and why in that order<br />\n 为什么要执行每个步骤，以及为什么要按顺序进行</li>\n</ul>\n</li>\n<li>Arrows to show order of the steps<br />\n 箭头显示步骤顺序\n<ul>\n<li>Can have loops<br />\n 可以有循环</li>\n</ul>\n</li>\n<li>Breakdowns in communication or coordination<br />\n 沟通或协调失误</li>\n</ul>\n<h3 id=\"sequence-model-components\"><a class=\"anchor\" href=\"#sequence-model-components\">#</a> Sequence Model Components</h3>\n<ul>\n<li>Can choose level of detail depending on focus (what investigating)<br />\n 可以根据重点，选择详细程度（进行调查）\n<ul>\n<li>E.g., for writing a letter:<br />\n 例如，写一封信：\n<ul>\n<li>High-level (functional level): Find most recent letter written to same person, open it, delete date, replace with new date, delete contents, type new contents, …<br />\n 高级（功能级别）：查找写给同一个人的最新字母，打开它，删除日期，替换为新日期，删除内容，键入新内容，…</li>\n<li>Low level (user interface level): Switch windows explorer to details view, Sort files by date, double-click on top item, check &quot;To:&quot; to see if correct person, click and drag across date field, …<br />\n 低级别（用户界面级别）：将 Windows 资源管理器切换到详细信息视图，按日期对文件排序，双击顶部项目，选中 “收件人：” 以查看是否正确的人，单击并在日期字段中拖动，…</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Notice hesitations and errors<br />\n 注意犹豫和错误\n<ul>\n<li>Interrupt and ask why or what expected<br />\n 中断，并询问原因或期望</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"sequence-model-example\"><a class=\"anchor\" href=\"#sequence-model-example\">#</a> Sequence Model Example</h3>\n<p><img data-src=\"https://i.loli.net/2020/10/05/TinG7lFmWNxBaLV.jpg\" alt=\"cdw\" title=\"cdw\" /></p>\n<h2 id=\"creating-models-创建模型\"><a class=\"anchor\" href=\"#creating-models-创建模型\">#</a> Creating Models 创建模型</h2>\n<ul>\n<li>\n<p>Create models generalizing over all interviewees<br />\n 建立涵盖所有受访者的模型</p>\n<ul>\n<li>&quot;Consolidated&quot; models<br />\n “合并” 模型</li>\n<li>Barrier summaries<br />\n 屏障摘要</li>\n<li>Key Idea: Induce generalizations from concrete data<br />\n 关键思想：从具体数据中得出概括\n<ul>\n<li>Don't rely on intuition alone<br />\n 不要只凭直觉</li>\n<li>Don't deduce from logical abstractions<br />\n 不要从逻辑抽象中推断</li>\n<li>Example:\n<ul>\n<li>Logic says system manager will diagnose the reason behind a system failure.<br />\n 逻辑表示系统管理员将诊断系统故障的原因。</li>\n<li>Actual practice: System manager tries standard fixes first (like reboot) &amp; diagnoses only if necessary<br />\n 实际做法：系统管理员首先尝试进行标准修复（例如重新启动）并仅在必要时进行诊断</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Main goal: Deduce the intent<br />\n 主要目标：推论意图</p>\n</li>\n</ul>\n<h2 id=\"what-to-do-with-models-模型的用处\"><a class=\"anchor\" href=\"#what-to-do-with-models-模型的用处\">#</a> What to do with Models 模型的用处</h2>\n<ul>\n<li>User data drives innovation<br />\n 用户数据推动创新\n<ul>\n<li>Solve problems (breakdowns) identified in models<br />\n 解决模型中发现的问题（故障）</li>\n<li>Grounded brainstorming<br />\n 头脑风暴</li>\n</ul>\n</li>\n<li>Flow model<br />\n 流程模型\n<ul>\n<li>Eliminate flows, roles, redundant data entry<br />\n 消除流程，角色，冗余数据输入</li>\n</ul>\n</li>\n<li>Social / Cultural model<br />\n 社会 / 文化模型\n<ul>\n<li>Increase communication, reinforce positive values<br />\n 增加沟通，增强正面价值</li>\n</ul>\n</li>\n<li>Artifact model:<br />\n 工件模型\n<ul>\n<li>Guide requirements, metaphors, remove screen problems<br />\n 指导要求，隐喻，消除屏幕问题</li>\n</ul>\n</li>\n<li>Physical model:<br />\n 物理模型\n<ul>\n<li>Depend only on what is available, reduce motion, improve flow of artifacts<br />\n 仅取决于可用的东西，减少运动，改善伪影的流动</li>\n</ul>\n</li>\n<li>Sequence model:<br />\n 序列模型\n<ul>\n<li>Eliminate, automate steps<br />\n 消除步骤并使其自动化</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"usability-engineering-可用性工程\"><a class=\"anchor\" href=\"#usability-engineering-可用性工程\">#</a> Usability Engineering 可用性工程</h1>\n<ul>\n<li>Parallel with &quot;software engineering&quot;<br />\n 与 “软件工程” 并行</li>\n<li>Make use of usability more like engineering:<br />\n 像工程一样使用可用性：</li>\n<li>&quot;Engineering&quot; “工程学”\n<ul>\n<li>Measurable, process-oriented<br />\n 可衡量的，面向过程的</li>\n<li>Not just &quot;art&quot;<br />\n 不只是 “艺术”</li>\n</ul>\n</li>\n<li>Term coined by John Bennett in the 1980's<br />\nJohn Bennett 在 1980 年代创造的术语</li>\n<li>ISO 13407 &amp; 13529 standards discuss UE process<br />\nISO 13407 和 13529 标准，评估 UE 流程</li>\n</ul>\n<h2 id=\"usability-engineering-steps-设计思维的步骤\"><a class=\"anchor\" href=\"#usability-engineering-steps-设计思维的步骤\">#</a> Usability Engineering steps 设计思维的步骤</h2>\n<ol>\n<li>Study the users and their tasks<br />\n 研究用户及其任务</li>\n<li>Study the competition<br />\n 研究比赛</li>\n<li>Set usability goals<br />\n 设定可用性目标</li>\n<li>Participatory Design<br />\n 参与式设计</li>\n<li>Coordinating the Total Interface for Consistency<br />\n 协调总接口的一致性\n<ul>\n<li>Include documentation, help, etc.<br />\n 包括文档，帮助等。</li>\n</ul>\n</li>\n<li>Guidelines and Heuristic Evaluation<br />\n 准则和启发式评估\n<ul>\n<li>Evaluate your interface according to the guidelines.<br />\n 根据指南评估您的界面。</li>\n</ul>\n</li>\n<li>Make prototypes of the system early and quickly<br />\n 尽早快速制作系统原型</li>\n<li>Empirical testing<br />\n 实证检验</li>\n<li>Iterative design with usability analysis<br />\n 具有可用性分析的迭代设计</li>\n<li>Collect feedback from field use<br />\n 收集现场使用的反馈</li>\n</ol>\n<h2 id=\"know-the-user\"><a class=\"anchor\" href=\"#know-the-user\">#</a> Know the User</h2>\n<ul>\n<li>Study the intended users and the use of the product<br />\n 研究目标用户和产品的使用\n<ul>\n<li>Best if developers go and interview them personally<br />\n 最好是开发人员亲自去采访他们</li>\n</ul>\n</li>\n<li>Difficult because<br />\n 困难包括\n<ul>\n<li>May want to hide the developers<br />\n 可能要隐藏开发人员</li>\n<li>Reluctance of sales people<br />\n 销售人员的不情愿</li>\n<li>Reluctance of users<br />\n 用户的不情愿</li>\n</ul>\n</li>\n<li>User Characteristics<br />\n 用户特征\n<ul>\n<li>Work experience, education level, age, previous computer experience<br />\n 工作经验，学历，年龄，以前的计算机经验</li>\n<li>Time for learning, training<br />\n 学习，培训时间</li>\n<li>Available hardware (monitor size, acceptance of plugins, cell-phones vs. desktop)<br />\n 可用的硬件（显示器大小，接受插件，手机与台式机的对比）</li>\n<li>Social context of use<br />\n 使用的社会环境</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"personas-用户画像\"><a class=\"anchor\" href=\"#personas-用户画像\">#</a> Personas 用户画像</h2>\n<ul>\n<li>Popularized by Alan Cooper 由艾伦・库珀推广</li>\n<li>User archetype you can use to help guide design decisions<br />\n 用户原型可以用来帮助指导设计决策</li>\n<li>Created after contextual inquiry or equivalent<br />\n 经过情境访谈或等效查询后创建</li>\n<li>Summarizes properties of a group of users<br />\n 汇总一组用户的属性</li>\n<li>Use: helps keep designers &amp; implementers focused on user needs.<br />\n 使用：帮助设计师和实施者专注于用户需求。</li>\n<li>Include: behavior patterns, goals, skills, attitudes, and environment, with a few fictional personal details to bring the persona to life<br />\n 包括：行为模式，目标，技能，态度和环境，以及一些虚构的个人详细信息，使人物形象栩栩如生</li>\n<li>Have a small number for each product<br />\n 每个产品都有少量\n<ul>\n<li>One for each important group of users<br />\n 每个重要用户组一个</li>\n</ul>\n</li>\n</ul>\n<p>From: <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5zdGVwdHdvLmNvbS5hdS9wYXBlcnMva21jX3BlcnNvbmFzLw==\">http://www.steptwo.com.au/papers/kmc_personas/</span></p>\n<p>Bob is 52 years old and works as a mechanic with an organisation offering road service to customers when their car breaks down. He has worked in the job for the past 12 years and knows it well. Many of the younger mechanics ask Bob for advice when they meet up in the depot as he always knows the answer to tricky mechanical problems. Bob likes sharing his knowledge with the younger guys, as it makes him feel a valued part of the team.</p>\n<p>Bob works rolling day and night shifts and spends his shifts attending breakdowns and lockouts (when customers lock their keys in the car). About 20% of the jobs he attends are complex and he occasionally needs to refer to his standard issue manuals. Bob tries to avoid using the manuals in front of customers as he thinks it gives the impression he doesn't know what he's doing.</p>\n<p>Bob has seen many changes over the years with the company and has tried his best to move with the times. However he found it a bit daunting when a new computer was installed in his van several years ago, and now he has heard rumoursthat the computer is going to be upgraded to one with a bigger screen that's meant to be faster and better.</p>\n<p>Bob's been told that he will be able to access the intranet on the new computer. He has heard about the intranet and saw once in an early version on his manager's computer. He wonders if he will be able to find out want'sgoing on in the company more easily, especially as customers' seem to know more about the latest company news than he does when he turns up at a job. This can be embarrassing and has been a source of frustration for Bob throughout his time with the company.</p>\n<p>Bob wonders if he will be able to cope with the new computer system. He doesn't mind asking his grandchildren for help when he wants to send an email to his brother overseas, but asking the guys at work for help is another story.</p>\n<h1 id=\"task-analysis\"><a class=\"anchor\" href=\"#task-analysis\">#</a> Task Analysis</h1>\n<ul>\n<li>What tasks the users will do?<br />\n 用户将执行哪些任务？</li>\n<li>Involve users in this<br />\n 让用户参与其中</li>\n<li>Important to include exceptions and error conditions<br />\n 重要的是要包含异常和错误条件</li>\n<li>Many different kinds and variations on Task Analyses<br />\n 任务分析的许多不同种类和变体\n<ul>\n<li>Nielsen's (in the book Designing Web Usability: The Practice of Simplicity)<br />\n《设计 Web 可用性：简单实践》 - Nielsen</li>\n<li>&quot;Hierarchical Task Analysis&quot;<br />\n 分层任务分析</li>\n<li>(Better to use CI)<br />\n 最好使用 CI</li>\n</ul>\n</li>\n<li>Need tasks to design CIs, usability analysis, scenarios<br />\n 需要任务来设计 CI，可用性分析和方案</li>\n</ul>\n<h2 id=\"task-inventory-任务清单\"><a class=\"anchor\" href=\"#task-inventory-任务清单\">#</a> Task Inventory 任务清单</h2>\n<p><img data-src=\"https://i.loli.net/2020/10/05/pHyfF1z78OYPXM5.jpg\" alt=\"Task Inventory\" /></p>\n<h2 id=\"user-centered-task-analysis-以用户为中心的任务分析\"><a class=\"anchor\" href=\"#user-centered-task-analysis-以用户为中心的任务分析\">#</a> User Centered Task Analysis 以用户为中心的任务分析</h2>\n<ul>\n<li>Based on what user will do<br />\n 根据用户的意愿\n<ul>\n<li>Not what system will do<br />\n 没有什么系统会做</li>\n</ul>\n</li>\n<li>Not a list of system features<br />\n 未列出系统功能</li>\n<li>High-level 高水平</li>\n<li>Nothing about how to accomplish at user level<br />\n 关于如何在用户级别完成操作\n<ul>\n<li>No discussion of web pages, buttons, filling in fields, etc.<br />\n 不讨论网页，按钮，填写字段等。</li>\n</ul>\n</li>\n<li>Example, company YYY menu structure based on functions rather than tasks =&gt; Inefficient for every task!<br />\n 例如，公司 YYY 菜单结构基于功能而不是任务 =&gt; 效率低下！</li>\n</ul>\n<h2 id=\"components-of-task-analysis-任务分析的组成\"><a class=\"anchor\" href=\"#components-of-task-analysis-任务分析的组成\">#</a> Components of Task Analysis 任务分析的组成</h2>\n<ul>\n<li>Goals:<br />\n 目标：\n<ul>\n<li>What are the actions this task is supposed to accomplish?<br />\n 该任务应完成的动作是什么？</li>\n<li>Remember: not howit will be done, just what<br />\n 请记住：不是怎么做，而是</li>\n<li>Think alouds reveal why<br />\n 大胆想出原因</li>\n</ul>\n</li>\n<li>Information needs<br />\n 信息需求\n<ul>\n<li>What does the user need to know or view to do this task?<br />\n 用户需要知道或查看哪些内容才能执行此任务？</li>\n<li>Includes what needs to be on the screen.<br />\n 包括屏幕上需要显示的内容。</li>\n<li>Both:<br />\n 两者：\n<ul>\n<li>What does the system need to show?<br />\n 系统需要显示什么？</li>\n<li>What does the user need to know?<br />\n 用户需要知道什么？</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"scenarios-of-task-analysis-任务分析的方案\"><a class=\"anchor\" href=\"#scenarios-of-task-analysis-任务分析的方案\">#</a> Scenarios of Task Analysis 任务分析的方案</h2>\n<ul>\n<li>Scenarios (stories) of typical uses:<br />\n 典型场景（故事）\n<ul>\n<li>Related to software engineering &quot;use cases&quot;<br />\n 有关软件工程的 “用例”</li>\n<li>Specific example of how a user might use the system.<br />\n 用户如何使用系统的特定示例</li>\n<li>One scenario for each major class of users doing each kind of important task<br />\n 每个主要类别的用户都需要执行一种重要任务的场景</li>\n<li>Will want to make those tasks efficient and easy<br />\n 想要使那些任务高效且容易</li>\n<li>What is important to optimize?<br />\n 什么是最重要的优化？</li>\n<li>Will significantly affect the design<br />\n 会严重影响设计</li>\n<li>Try to include lots of exceptional cases<br />\n 尝试包含很多例外情况</li>\n<li>Shows how the interface will be used<br />\n 显示如何使用界面</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"functional-analysis-功能分析\"><a class=\"anchor\" href=\"#functional-analysis-功能分析\">#</a> Functional Analysis 功能分析</h2>\n<ul>\n<li>What really needs to be done<br />\n 真正需要做什么</li>\n<li>Not just the way users are doing it now<br />\n 不只是用户现在的操作方式\n<ul>\n<li>May be a more efficient or more appropriate way to achieve same task<br />\n 可能是完成相同任务的更有效或更合适的方法</li>\n</ul>\n</li>\n<li>Usually, companies are good at this<br />\n 通常，公司擅长于此\n<ul>\n<li>However, may include extra functions that are not useful<br />\n 但是，可能包括一些没有用的额外功能</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"competitive-analysis-竞品分析\"><a class=\"anchor\" href=\"#competitive-analysis-竞品分析\">#</a> Competitive Analysis 竞品分析</h2>\n<ul>\n<li>&quot;Know the competition&quot;<br />\n“知道竞品”</li>\n<li>For usability and function<br />\n 为了可用性和功能</li>\n<li>Read trade-press reviews of products or web sites<br />\n 阅读产品或网站的贸易新闻评论</li>\n<li>Visit competitor's web sites<br />\n 访问竞争对手的网站\n<ul>\n<li>Also, web sites for related products<br />\n 以及，相关产品的网站</li>\n</ul>\n</li>\n<li>Importance of various features, issues<br />\n 各种功能，问题的重要性\n<ul>\n<li>Pictures, navigation, search, prices, shipping, metaphors<br />\n 图片，导航，搜索，价格，运输，隐喻</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"goal-setting-目标设定\"><a class=\"anchor\" href=\"#goal-setting-目标设定\">#</a> Goal Setting 目标设定</h2>\n<ul>\n<li>What does it mean to be &quot;easy to use&quot;?<br />\n“易于使用” 是什么意思？</li>\n<li>Some proposed definitions:<br />\n 一些建议的定义：\n<ul>\n<li>&quot;I like it&quot;<br />\n“我喜欢”</li>\n<li>&quot;I always do it that way&quot;<br />\n“我总是那样做”</li>\n<li>&quot;That is the way the xxx system does it&quot;<br />\n“这就是 xxx 系统的处理方式”</li>\n<li>&quot;It is easy to implement&quot;<br />\n“易于实施”</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"improved-改善\"><a class=\"anchor\" href=\"#improved-改善\">#</a> Improved 改善</h3>\n<ul>\n<li>\n<p>Objective Criteria<br />\n 客观标准</p>\n<ul>\n<li>Can be learned in less than 2 minutes<br />\n 不到 2 分钟即可学会</li>\n<li>User will perform 2 error-free purchases per session<br />\n 用户每次会话将执行 2 次无错购买</li>\n<li>The error rate will be lower than 2 per 10 operations<br />\n 每 10 次操作的错误率将低于 2</li>\n<li>Tasks will be performed in 30% of the time it takes using the competitor’s system<br />\n 使用竞争对手的系统将在 30％的时间内完成任务</li>\n<li>Users will have a high satisfaction with the system as measured by a survey.<br />\n 通过问卷调查，用户会对系统高度满意。</li>\n</ul>\n</li>\n<li>\n<p>Explicit, specific, measurable metrics.<br />\n 明确，具体，可衡量的指标。</p>\n</li>\n<li>\n<p>Allows objective decision making.<br />\n 允许客观决策。</p>\n</li>\n<li>\n<p>Tradeoffs, so have to pick relevant metrics<br />\n 权衡，所以必须选择相关指标</p>\n</li>\n<li>\n<p>Some measures:<br />\n 一些措施：</p>\n<ul>\n<li>Learnability: Time to learn how to do specific tasks (at a specific proficiency)<br />\n 学习能力：时间来学习如何执行特定的任务（以特定的熟练程度）</li>\n<li>Efficiency: (Expert) Time to execute benchmark (typical) tasks. Throughput.<br />\n 效率：（专家）执行基准（典型）任务的时间。 吞吐量。</li>\n<li>Errors: Error rate per task. Time spent on errors. Error severity.<br />\n 错误：每个任务的错误率。 花在错误上的时间。 错误严重性。</li>\n<li>Lots of measures from web analytics:<br />\n 网络分析中的许多措施：\n<ul>\n<li>Abandonment rates, Completion rates, Clickthroughs,% completions, etc.<br />\n 放弃率，完成率，点击率，完成率等。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Subjective satisfaction: Questionnaire.<br />\n 主观满意度：问卷。</p>\n</li>\n</ul>\n<h2 id=\"financial-impact-财务影响\"><a class=\"anchor\" href=\"#financial-impact-财务影响\">#</a> Financial Impact 财务影响</h2>\n<ul>\n<li>Prove It! 证明给我看！</li>\n<li>Demonstrates the importance of usability<br />\n 展示可用性的重要性</li>\n<li>#users * their salary per hour * #hours on system = cost of system per hour<br />\n＃个用户 * 他们每小时的薪水 *＃个系统小时数 = 每小时系统成本</li>\n<li>Estimate savings of reduced training, error time, need for support staff, etc.<br />\n 估计减少培训、减少错误时间、需要支持人员等，而节省的费用。</li>\n<li>Tells how much time to spend on usability<br />\n 告诉您要花多少时间在可用性上</li>\n<li>Whole books on this topic:<br />\n 有关此主题的整本书：\n<ul>\n<li>Randolph G. Bias and Deborah J. Mayhew, Eds.Cost-Justifying Usability: An Update for the Internet Age, Second Edition. Morgan Kaufmann, 2005<br />\n 成本合理性：互联网时代的更新</li>\n<li>Randolph G. Bias and Deborah J. Mayhew, Cost-Justifying Usability, Boston: Academic Press, 1994.<br />\n 合理成本可用性</li>\n</ul>\n</li>\n</ul>\n","tags":["计算机科学","Master of Software Engineering","ITMD 534. Human Computer Interaction","人机交互"]}]}